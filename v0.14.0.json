{"files":[{"file":"blob.h","functions":["git_blob_lookup","git_blob_lookup_prefix","git_blob_close","git_blob_rawcontent","git_blob_rawsize","git_blob_create_fromfile","git_blob_create_frombuffer"],"meta":{"brief":"Git blob load and write routines","defgroup":"git_blob Git blob load and write routines","ingroup":"Git","comments":"\n"},"lines":138},{"file":"branch.h","functions":[],"meta":{},"lines":9},{"file":"commit.h","functions":["git_commit_lookup","git_commit_lookup_prefix","git_commit_close","git_commit_id","git_commit_message_short","git_commit_message","git_commit_time","git_commit_time_offset","git_commit_committer","git_commit_author","git_commit_tree","git_commit_tree_oid","git_commit_parentcount","git_commit_parent","git_commit_parent_oid","git_commit_create","git_commit_create_v"],"meta":{"brief":"Git commit parsing, formatting routines","defgroup":"git_commit Git commit parsing, formatting routines","ingroup":"Git","comments":"\n"},"lines":270},{"file":"common.h","functions":["git_libgit2_version"],"meta":{"brief":"Git common platform definitions","defgroup":"git_common Git common platform definitions","ingroup":"Git","comments":"\n"},"lines":128},{"file":"config.h","functions":["git_config_find_global","git_config_open_global","git_config_file__ondisk","git_config_new","git_config_add_file","git_config_add_file_ondisk","git_config_open_ondisk","git_config_free","git_config_get_int","git_config_get_long","git_config_get_bool","git_config_get_string","git_config_set_int","git_config_set_long","git_config_set_bool","git_config_set_string","git_config_delete","git_config_foreach"],"meta":{"brief":"Git config management routines","defgroup":"git_config Git config management routines","ingroup":"Git","comments":"\n"},"lines":284},{"file":"errors.h","functions":["git_lasterror","git_strerror","git_clearerror"],"meta":{"brief":"Git error handling routines and variables","ingroup":"Git","comments":"\n"},"lines":162},{"file":"index.h","functions":["git_index_open","git_index_clear","git_index_free","git_index_read","git_index_write","git_index_find","git_index_uniq","git_index_add","git_index_add2","git_index_append","git_index_append2","git_index_remove","git_index_get","git_index_entrycount","git_index_entrycount_unmerged","git_index_get_unmerged_bypath","git_index_get_unmerged_byindex","git_index_entry_stage"],"meta":{"brief":"Git index parsing and manipulation routines","defgroup":"git_index Git index parsing and manipulation routines","ingroup":"Git","comments":"\n"},"lines":324},{"file":"net.h","functions":[],"meta":{"brief":"Git networking declarations","ingroup":"Git","comments":"\n"},"lines":67},{"file":"object.h","functions":["git_object_lookup","git_object_lookup_prefix","git_object_id","git_object_type","git_object_owner","git_object_close","git_object_type2string","git_object_string2type","git_object_typeisloose","git_object__size"],"meta":{"brief":"Git revision object management routines","defgroup":"git_object Git revision object management routines","ingroup":"Git","comments":"\n"},"lines":191},{"file":"odb.h","functions":["git_odb_new","git_odb_open","git_odb_add_backend","git_odb_add_alternate","git_odb_close","git_odb_read","git_odb_read_prefix","git_odb_read_header","git_odb_exists","git_odb_write","git_odb_open_wstream","git_odb_open_rstream","git_odb_hash","git_odb_hashfile","git_odb_object_close","git_odb_object_id","git_odb_object_data","git_odb_object_size","git_odb_object_type"],"meta":{"brief":"Git object database routines","defgroup":"git_odb Git object database routines","ingroup":"Git","comments":"\n"},"lines":351},{"file":"odb_backend.h","functions":[],"meta":{"brief":"Git custom backend functions","defgroup":"git_backend Git custom backend API","ingroup":"Git","comments":"\n"},"lines":118},{"file":"oid.h","functions":["git_oid_fromstr","git_oid_fromstrn","git_oid_fromraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_to_string","git_oid_cpy","git_oid_cmp","git_oid_ncmp","git_oid_shorten_new","git_oid_shorten_add","git_oid_shorten_free"],"meta":{"brief":"Git object id routines","defgroup":"git_oid Git object id routines","ingroup":"Git","comments":"\n"},"lines":225},{"file":"reflog.h","functions":["git_reflog_read","git_reflog_write","git_reflog_entrycount","git_reflog_entry_byindex","git_reflog_entry_oidold","git_reflog_entry_oidnew","git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_free"],"meta":{"brief":"Git reflog management routines","defgroup":"git_reflog Git reflog management routines","ingroup":"Git","comments":"\n"},"lines":129},{"file":"refs.h","functions":["git_reference_lookup","git_reference_create_symbolic","git_reference_create_oid","git_reference_oid","git_reference_target","git_reference_type","git_reference_name","git_reference_resolve","git_reference_owner","git_reference_set_target","git_reference_set_oid","git_reference_rename","git_reference_delete","git_reference_packall","git_reference_listall","git_reference_foreach"],"meta":{"brief":"Git reference management routines","defgroup":"git_reference Git reference management routines","ingroup":"Git","comments":"\n"},"lines":276},{"file":"refspec.h","functions":["git_refspec_src","git_refspec_dst","git_refspec_src_match","git_refspec_transform"],"meta":{"brief":"Git refspec attributes","defgroup":"git_refspec Git refspec attributes","ingroup":"Git","comments":"\n"},"lines":75},{"file":"remote.h","functions":["git_remote_get","git_remote_name","git_remote_url","git_remote_fetchspec","git_remote_pushspec","git_remote_connect","git_remote_ls","git_remote_free"],"meta":{"brief":"Git remote management","defgroup":"git_remote Git remote management routines","ingroup":"Git","comments":"\n"},"lines":122},{"file":"repository.h","functions":["git_repository_open","git_repository_open2","git_repository_open3","git_repository_discover","git_repository_database","git_repository_index","git_repository_free","git_repository_init","git_repository_head_detached","git_repository_head_orphan","git_repository_is_empty","git_repository_path","git_repository_is_bare","git_repository_config"],"meta":{"brief":"Git repository management routines","defgroup":"git_repository Git repository management routines","ingroup":"Git","comments":"\n"},"lines":332},{"file":"revwalk.h","functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_hide","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"],"meta":{"brief":"Git revision traversal routines","defgroup":"git_revwalk Git revision traversal routines","ingroup":"Git","comments":"\n"},"lines":187},{"file":"signature.h","functions":["git_signature_new","git_signature_now","git_signature_dup","git_signature_free"],"meta":{"brief":"Git signature creation","defgroup":"git_signature Git signature creation","ingroup":"Git","comments":"\n"},"lines":81},{"file":"status.h","functions":["git_status_foreach","git_status_file"],"meta":{"brief":"Git file status routines","defgroup":"git_status Git file status routines","ingroup":"Git","comments":"\n"},"lines":79},{"file":"tag.h","functions":["git_tag_lookup","git_tag_lookup_prefix","git_tag_close","git_tag_id","git_tag_target","git_tag_target_oid","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_list","git_tag_list_match"],"meta":{"brief":"Git tag parsing routines","defgroup":"git_tag Git tag management","ingroup":"Git","comments":"\n"},"lines":297},{"file":"thread-utils.h","functions":[],"meta":{},"lines":78},{"file":"transport.h","functions":["git_transport_new"],"meta":{"brief":"Git protocol transport abstraction","defgroup":"git_transport Git protocol transport abstraction","ingroup":"Git","comments":"\n"},"lines":58},{"file":"tree.h","functions":["git_tree_lookup","git_tree_lookup_prefix","git_tree_close","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_entry_type","git_tree_entry_2object","git_tree_create_fromindex","git_treebuilder_create","git_treebuilder_clear","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_filter","git_treebuilder_write"],"meta":{"brief":"Git tree parsing, loading routines","defgroup":"git_tree Git tree parsing, loading routines","ingroup":"Git","comments":"\n"},"lines":291},{"file":"types.h","functions":[],"meta":{"brief":"libgit2 base & compatibility types","ingroup":"Git","comments":"\n"},"lines":191},{"file":"zlib.h","functions":["deflateBound"],"meta":{"brief":"Git data compression routines","defgroup":"git_zlib Git data compression routines","ingroup":"Git","comments":"\n"},"lines":58}],"functions":{"git_blob_lookup":{"type":"function","file":"blob.h","line":50,"lineto":53,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the looked up blob"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the blob."},{"name":"id","type":"const git_oid *","comment":"identity of the blob to locate."}],"argline":"git_blob **blob, git_repository *repo, const git_oid *id","sig":"git_blob **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a blob object from a repository.</p>\n","comments":"","group":"blob","examples":{"general.c":["ex/v0.14.0/general.html#git_blob_lookup-1"]}},"git_blob_lookup_prefix":{"type":"function","file":"blob.h","line":67,"lineto":70,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the looked up blob"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the blob."},{"name":"id","type":"const git_oid *","comment":"identity of the blob to locate."},{"name":"len","type":"unsigned int","comment":"the length of the short identifier"}],"argline":"git_blob **blob, git_repository *repo, const git_oid *id, unsigned int len","sig":"git_blob **::git_repository *::const git_oid *::unsigned int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a blob object from a repository,\ngiven a prefix of its identifier (short id).</p>\n","comments":"<p>@see git_object_lookup_prefix</p>\n","group":"blob"},"git_blob_close":{"type":"function","file":"blob.h","line":83,"lineto":86,"args":[{"name":"blob","type":"git_blob *","comment":"the blob to close"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"void"},"description":"<p>Close an open blob</p>\n","comments":"<p>This is a wrapper around git_object_close()</p>\n\n<p>IMPORTANT:\nIt <em>is</em> necessary to call this method when you stop\nusing a blob. Failure to do so will cause a memory leak.</p>\n","group":"blob"},"git_blob_rawcontent":{"type":"function","file":"blob.h","line":101,"lineto":101,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"const void *","comment":"the pointer; NULL if the blob has no contents"},"description":"<p>Get a read-only buffer with the raw content of a blob.</p>\n","comments":"<p>A pointer to the raw content of a blob is returned;\nthis pointer is owned internally by the object and shall\nnot be free&#39;d. The pointer may be invalidated at a later\ntime.</p>\n","group":"blob","examples":{"general.c":["ex/v0.14.0/general.html#git_blob_rawcontent-2"]}},"git_blob_rawsize":{"type":"function","file":"blob.h","line":109,"lineto":109,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"int","comment":"size on bytes"},"description":"<p>Get the size in bytes of the contents of a blob</p>\n","comments":"","group":"blob","examples":{"general.c":["ex/v0.14.0/general.html#git_blob_rawsize-3","ex/v0.14.0/general.html#git_blob_rawsize-4"]}},"git_blob_create_fromfile":{"type":"function","file":"blob.h","line":122,"lineto":122,"args":[{"name":"oid","type":"git_oid *","comment":"return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written. this repository cannot be bare"},{"name":"path","type":"const char *","comment":"file from which the blob will be created, relative to the repository's working dir"}],"argline":"git_oid *oid, git_repository *repo, const char *path","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Read a file from the working folder of a repository\nand write it to the Object Database as a loose blob</p>\n","comments":"","group":"blob"},"git_blob_create_frombuffer":{"type":"function","file":"blob.h","line":134,"lineto":134,"args":[{"name":"oid","type":"git_oid *","comment":"return the oid of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where to blob will be written"},{"name":"buffer","type":"const void *","comment":"data to be written into the blob"},{"name":"len","type":"size_t","comment":"length of the data"}],"argline":"git_oid *oid, git_repository *repo, const void *buffer, size_t len","sig":"git_oid *::git_repository *::const void *::size_t","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Write an in-memory buffer to the ODB as a blob</p>\n","comments":"","group":"blob"},"git_commit_lookup":{"type":"function","file":"commit.h","line":51,"lineto":54,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the looked up commit"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the commit."},{"name":"id","type":"const git_oid *","comment":"identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit."}],"argline":"git_commit **commit, git_repository *repo, const git_oid *id","sig":"git_commit **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a commit object from a repository.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_lookup-5","ex/v0.14.0/general.html#git_commit_lookup-6","ex/v0.14.0/general.html#git_commit_lookup-7"]}},"git_commit_lookup_prefix":{"type":"function","file":"commit.h","line":69,"lineto":72,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the looked up commit"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the commit."},{"name":"id","type":"const git_oid *","comment":"identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit."},{"name":"len","type":"unsigned","comment":"the length of the short identifier"}],"argline":"git_commit **commit, git_repository *repo, const git_oid *id, unsigned len","sig":"git_commit **::git_repository *::const git_oid *::unsigned","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a commit object from a repository,\ngiven a prefix of its identifier (short id).</p>\n","comments":"<p>@see git_object_lookup_prefix</p>\n","group":"commit"},"git_commit_close":{"type":"function","file":"commit.h","line":85,"lineto":88,"args":[{"name":"commit","type":"git_commit *","comment":"the commit to close"}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"void"},"description":"<p>Close an open commit</p>\n","comments":"<p>This is a wrapper around git_object_close()</p>\n\n<p>IMPORTANT:\nIt <em>is</em> necessary to call this method when you stop\nusing a commit. Failure to do so will cause a memory leak.</p>\n","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_close-8","ex/v0.14.0/general.html#git_commit_close-9","ex/v0.14.0/general.html#git_commit_close-10","ex/v0.14.0/general.html#git_commit_close-11"]}},"git_commit_id":{"type":"function","file":"commit.h","line":97,"lineto":97,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_oid *","comment":"object identity for the commit."},"description":"<p>Get the id of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_id-12"]}},"git_commit_message_short":{"type":"function","file":"commit.h","line":105,"lineto":105,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const char *","comment":"the short message of a commit"},"description":"<p>Get the short (one line) message of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_message_short-13","ex/v0.14.0/general.html#git_commit_message_short-14"]}},"git_commit_message":{"type":"function","file":"commit.h","line":113,"lineto":113,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const char *","comment":"the message of a commit"},"description":"<p>Get the full message of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_message-15"]}},"git_commit_time":{"type":"function","file":"commit.h","line":121,"lineto":121,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"git_time_t","comment":"the time of a commit"},"description":"<p>Get the commit time (i.e. committer time) of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_time-16","ex/v0.14.0/general.html#git_commit_time-17"]}},"git_commit_time_offset":{"type":"function","file":"commit.h","line":129,"lineto":129,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"int","comment":"positive or negative timezone offset, in minutes from UTC"},"description":"<p>Get the commit timezone offset (i.e. committer&#39;s preferred timezone) of a commit.</p>\n","comments":"","group":"commit"},"git_commit_committer":{"type":"function","file":"commit.h","line":137,"lineto":137,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_signature *","comment":"the committer of a commit"},"description":"<p>Get the committer of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_committer-18"]}},"git_commit_author":{"type":"function","file":"commit.h","line":145,"lineto":145,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_signature *","comment":"the author of a commit"},"description":"<p>Get the author of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_author-19","ex/v0.14.0/general.html#git_commit_author-20"]}},"git_commit_tree":{"type":"function","file":"commit.h","line":154,"lineto":154,"args":[{"name":"tree_out","type":"git_tree **","comment":"pointer where to store the tree object"},{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_tree **tree_out, git_commit *commit","sig":"git_tree **::git_commit *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Get the tree pointed to by a commit.</p>\n","comments":"","group":"commit"},"git_commit_tree_oid":{"type":"function","file":"commit.h","line":164,"lineto":164,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_oid *","comment":"the id of tree pointed to by commit."},"description":"<p>Get the id of the tree pointed to by a commit. This differs from\n<code>git_commit_tree</code> in that no attempts are made to fetch an object\nfrom the ODB.</p>\n","comments":"","group":"commit"},"git_commit_parentcount":{"type":"function","file":"commit.h","line":172,"lineto":172,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"unsigned int","comment":"integer of count of parents"},"description":"<p>Get the number of parents of this commit</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_parentcount-21"]}},"git_commit_parent":{"type":"function","file":"commit.h","line":182,"lineto":182,"args":[{"name":"parent","type":"git_commit **","comment":"Pointer where to store the parent commit"},{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)"}],"argline":"git_commit **parent, git_commit *commit, unsigned int n","sig":"git_commit **::git_commit *::unsigned int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Get the specified parent of the commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_parent-22"]}},"git_commit_parent_oid":{"type":"function","file":"commit.h","line":193,"lineto":193,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)"}],"argline":"git_commit *commit, unsigned int n","sig":"git_commit *::unsigned int","return":{"type":"const git_oid *","comment":"the id of the parent, NULL on error."},"description":"<p>Get the oid of a specified parent for a commit. This is different from\n<code>git_commit_parent</code>, which will attempt to load the parent commit from\nthe ODB.</p>\n","comments":"","group":"commit"},"git_commit_create":{"type":"function","file":"commit.h","line":233,"lineto":242,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the newly created commit"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the commit"},{"name":"update_ref","type":"const char *","comment":"If not NULL, name of the reference that will be updated to point to this commit. If the reference is not direct, it will be resolved to a direct reference. Use \"HEAD\" to update the HEAD of the current branch and make it point to this commit"},{"name":"author","type":"const git_signature *","comment":"Signature representing the author and the authory time of this commit"},{"name":"committer","type":"const git_signature *","comment":"Signature representing the committer and the commit time of this commit"},{"name":"message","type":"const char *","comment":"Full message for this commit"},{"name":"tree","type":"const git_tree *","comment":"An instance of a `git_tree` object that will be used as the tree for the commit. This tree object must also be owned by the given `repo`."},{"name":"parent_count","type":"int","comment":"Number of parents for this commit"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *update_ref,\n\t\tconst git_signature *author,\n\t\tconst git_signature *committer,\n\t\tconst char *message,\n\t\tconst git_tree *tree,\n\t\tint parent_count,\n\t\tconst git_commit *parents[]","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const git_tree *::int","return":{"type":"int","comment":"0 on success; error code otherwise The created commit will be written to the Object Database and the given reference will be updated to point to it"},"description":"<p>Create a new commit in the repository using <code>git_object</code>\ninstances as parameters.</p>\n","comments":"","group":"commit"},"git_commit_create_v":{"type":"function","file":"commit.h","line":257,"lineto":266,"args":[{"name":"oid","type":"git_oid *"},{"name":"repo","type":"git_repository *"},{"name":"update_ref","type":"const char *"},{"name":"author","type":"const git_signature *"},{"name":"committer","type":"const git_signature *"},{"name":"message","type":"const char *"},{"name":"tree","type":"const git_tree *"},{"name":"parent_count","type":"int"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *update_ref,\n\t\tconst git_signature *author,\n\t\tconst git_signature *committer,\n\t\tconst char *message,\n\t\tconst git_tree *tree,\n\t\tint parent_count,\n\t\t...","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const git_tree *::int","return":{"type":"int"},"description":"<p>Create a new commit in the repository using a variable\nargument list.</p>\n","comments":"<p>The parents for the commit are specified as a variable\nlist of pointers to <code>const git_commit *</code>. Note that this\nis a convenience method which may not be safe to export\nfor certain languages or compilers</p>\n\n<p>All other parameters remain the same</p>\n\n<p>@see git_commit_create</p>\n","group":"commit","examples":{"general.c":["ex/v0.14.0/general.html#git_commit_create_v-23"]}},"git_libgit2_version":{"type":"function","file":"common.h","line":124,"lineto":124,"args":[{"name":"major","type":"int *","comment":"Store the major version number"},{"name":"minor","type":"int *","comment":"Store the minor version number"},{"name":"rev","type":"int *","comment":"Store the revision (patch) number"}],"argline":"int *major, int *minor, int *rev","sig":"int *::int *::int *","return":{"type":"void"},"description":"<p>Return the version of the libgit2 library\nbeing currently used.</p>\n","comments":"","group":"libgit2"},"git_config_find_global":{"type":"function","file":"config.h","line":70,"lineto":70,"args":[{"name":"global_config_path","type":"char *","comment":"Buffer of GIT_PATH_MAX length to store the path"}],"argline":"char *global_config_path","sig":"char *","return":{"type":"int","comment":"GIT_SUCCESS if a global configuration file has been found. Its path will be stored in `buffer`."},"description":"<p>Locate the path to the global configuration file</p>\n","comments":"<p>The user or global configuration file is usually\nlocated in <code>$HOME/.gitconfig</code>.</p>\n\n<p>This method will try to guess the full path to that\nfile, if the file exists. The returned path\nmay be used on any <code>git_config</code> call to load the\nglobal configuration file.</p>\n","group":"config"},"git_config_open_global":{"type":"function","file":"config.h","line":81,"lineto":81,"args":[{"name":"out","type":"git_config **","comment":"Pointer to store the config instance"}],"argline":"git_config **out","sig":"git_config **","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Open the global configuration file</p>\n","comments":"<p>Utility wrapper that calls <code>git_config_find_global</code>\nand opens the located file, if it exists.</p>\n","group":"config"},"git_config_file__ondisk":{"type":"function","file":"config.h","line":94,"lineto":94,"args":[{"name":"out","type":"struct git_config_file **","comment":"the new backend"},{"name":"path","type":"const char *","comment":"where the config file is located"}],"argline":"struct git_config_file **out, const char *path","sig":"struct git_config_file **::const char *","return":{"type":"int"},"description":"<p>Create a configuration file backend for ondisk files</p>\n","comments":"<p>These are the normal <code>.gitconfig</code> files that Core Git\nprocesses. Note that you first have to add this file to a\nconfiguration object before you can query it for configuration\nvariables.</p>\n","group":"config"},"git_config_new":{"type":"function","file":"config.h","line":105,"lineto":105,"args":[{"name":"out","type":"git_config **","comment":"pointer to the new configuration"}],"argline":"git_config **out","sig":"git_config **","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Allocate a new configuration object</p>\n","comments":"<p>This object is empty, so you have to add a file to it before you\ncan do anything with it.</p>\n","group":"config"},"git_config_add_file":{"type":"function","file":"config.h","line":122,"lineto":122,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration to add the file to"},{"name":"file","type":"git_config_file *","comment":"the configuration file (backend) to add"},{"name":"priority","type":"int","comment":"the priority the backend should have"}],"argline":"git_config *cfg, git_config_file *file, int priority","sig":"git_config *::git_config_file *::int","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Add a generic config file instance to an existing config</p>\n","comments":"<p>Note that the configuration object will free the file\nautomatically.</p>\n\n<p>Further queries on this config object will access each\nof the config file instances in order (instances with\na higher priority will be accessed first).</p>\n","group":"config"},"git_config_add_file_ondisk":{"type":"function","file":"config.h","line":143,"lineto":143,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration to add the file to"},{"name":"path","type":"const char *","comment":"path to the configuration file (backend) to add"},{"name":"priority","type":"int","comment":"the priority the backend should have"}],"argline":"git_config *cfg, const char *path, int priority","sig":"git_config *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Add an on-disk config file instance to an existing config</p>\n","comments":"<p>The on-disk file pointed at by <code>path</code> will be opened and\nparsed; it&#39;s expected to be a native Git config file following\nthe default Git config syntax (see man git-config).</p>\n\n<p>Note that the configuration object will free the file\nautomatically.</p>\n\n<p>Further queries on this config object will access each\nof the config file instances in order (instances with\na higher priority will be accessed first).</p>\n","group":"config"},"git_config_open_ondisk":{"type":"function","file":"config.h","line":158,"lineto":158,"args":[{"name":"cfg","type":"git_config **","comment":"The configuration instance to create"},{"name":"path","type":"const char *","comment":"Path to the on-disk file to open"}],"argline":"git_config **cfg, const char *path","sig":"git_config **::const char *","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Create a new config instance containing a single on-disk file</p>\n","comments":"<p>This method is a simple utility wrapper for the following sequence\nof calls:\n- git_config_new\n- git_config_add_file_ondisk</p>\n","group":"config","examples":{"general.c":["ex/v0.14.0/general.html#git_config_open_ondisk-24"]}},"git_config_free":{"type":"function","file":"config.h","line":165,"lineto":165,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration to free"}],"argline":"git_config *cfg","sig":"git_config *","return":{"type":"void"},"description":"<p>Free the configuration and its associated memory and files</p>\n","comments":"","group":"config"},"git_config_get_int":{"type":"function","file":"config.h","line":175,"lineto":175,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"out","type":"int *","comment":"pointer to the variable where the value should be stored"}],"argline":"git_config *cfg, const char *name, int *out","sig":"git_config *::const char *::int *","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Get the value of an integer config variable.</p>\n","comments":"","group":"config","examples":{"general.c":["ex/v0.14.0/general.html#git_config_get_int-25"]}},"git_config_get_long":{"type":"function","file":"config.h","line":185,"lineto":185,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"out","type":"long int *","comment":"pointer to the variable where the value should be stored"}],"argline":"git_config *cfg, const char *name, long int *out","sig":"git_config *::const char *::long int *","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Get the value of a long integer config variable.</p>\n","comments":"","group":"config"},"git_config_get_bool":{"type":"function","file":"config.h","line":198,"lineto":198,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"out","type":"int *","comment":"pointer to the variable where the value should be stored"}],"argline":"git_config *cfg, const char *name, int *out","sig":"git_config *::const char *::int *","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Get the value of a boolean config variable.</p>\n","comments":"<p>This function uses the usual C convention of 0 being false and\nanything else true.</p>\n","group":"config"},"git_config_get_string":{"type":"function","file":"config.h","line":211,"lineto":211,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"out","type":"const char **","comment":"pointer to the variable's value"}],"argline":"git_config *cfg, const char *name, const char **out","sig":"git_config *::const char *::const char **","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Get the value of a string config variable.</p>\n","comments":"<p>The string is owned by the variable and should not be freed by the\nuser.</p>\n","group":"config","examples":{"general.c":["ex/v0.14.0/general.html#git_config_get_string-26"]}},"git_config_set_int":{"type":"function","file":"config.h","line":221,"lineto":221,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"int","comment":"Integer value for the variable"}],"argline":"git_config *cfg, const char *name, int value","sig":"git_config *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Set the value of an integer config variable.</p>\n","comments":"","group":"config"},"git_config_set_long":{"type":"function","file":"config.h","line":231,"lineto":231,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"long int","comment":"Long integer value for the variable"}],"argline":"git_config *cfg, const char *name, long int value","sig":"git_config *::const char *::long int","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Set the value of a long integer config variable.</p>\n","comments":"","group":"config"},"git_config_set_bool":{"type":"function","file":"config.h","line":241,"lineto":241,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"int","comment":"the value to store"}],"argline":"git_config *cfg, const char *name, int value","sig":"git_config *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Set the value of a boolean config variable.</p>\n","comments":"","group":"config"},"git_config_set_string":{"type":"function","file":"config.h","line":254,"lineto":254,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"const char *","comment":"the string to store."}],"argline":"git_config *cfg, const char *name, const char *value","sig":"git_config *::const char *::const char *","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Set the value of a string config variable.</p>\n","comments":"<p>A copy of the string is made and the user is free to use it\nafterwards.</p>\n","group":"config"},"git_config_delete":{"type":"function","file":"config.h","line":262,"lineto":262,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration"},{"name":"name","type":"const char *","comment":"the variable to delete"}],"argline":"git_config *cfg, const char *name","sig":"git_config *::const char *","return":{"type":"int"},"description":"<p>Delete a config variable</p>\n","comments":"","group":"config"},"git_config_foreach":{"type":"function","file":"config.h","line":277,"lineto":280,"args":[{"name":"cfg","type":"git_config *","comment":"where to get the variables from"},{"name":"callback","type":"int (*)(const char *var_name, const char *value, void *payload)","comment":"the function to call on each variable"},{"name":"payload","type":"void *","comment":"the data to pass to the callback"}],"argline":"git_config *cfg,\n\tint (*callback)(const char *var_name, const char *value, void *payload),\n\tvoid *payload","sig":"git_config *::int (*)(const char *var_name, const char *value, void *payload)::void *","return":{"type":"int","comment":"GIT_SUCCESS or the return value of the callback which didn't return 0"},"description":"<p>Perform an operation on each config variable.</p>\n","comments":"<p>The callback receives the normalized name and value of each variable\nin the config backend, and the data pointer passed to this function.\nAs soon as one of the callback functions returns something other than 0,\nthis function returns that value.</p>\n","group":"config"},"git_lasterror":{"type":"function","file":"errors.h","line":141,"lineto":141,"args":[],"argline":"void","sig":"","return":{"type":"const char *","comment":"a string explaining the error"},"description":"<p>Return a detailed error string with the latest error\nthat occurred in the library.\n@return a string explaining the error</p>\n","comments":"","group":"errors"},"git_strerror":{"type":"function","file":"errors.h","line":153,"lineto":153,"args":[{"name":"num","type":"int","comment":"The error code to explain"}],"argline":"int num","sig":"int","return":{"type":"const char *","comment":"a string explaining the error code"},"description":"<p>strerror() for the Git library</p>\n","comments":"<p>Get a string description for a given error code.\nNOTE: This method will be eventually deprecated in favor\nof the new <code>git_lasterror</code>.</p>\n","group":"errors"},"git_clearerror":{"type":"function","file":"errors.h","line":158,"lineto":158,"args":[],"argline":"void","sig":"","return":{"type":"void"},"description":"<p>Clear the latest library error</p>\n","comments":"","group":"errors"},"git_index_open":{"type":"function","file":"index.h","line":129,"lineto":129,"args":[{"name":"index","type":"git_index **","comment":"the pointer for the new index"},{"name":"index_path","type":"const char *","comment":"the path to the index file in disk"}],"argline":"git_index **index, const char *index_path","sig":"git_index **::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Create a new bare Git index object as a memory representation\nof the Git index file in &#39;index_path&#39;, without a repository\nto back it.</p>\n","comments":"<p>Since there is no ODB or working directory behind this index,\nany Index methods which rely on these (e.g. index_add) will\nfail with the GIT_EBAREINDEX error code.</p>\n\n<p>If you need to access the index of an actual repository,\nuse the <code>git_repository_index</code> wrapper.</p>\n\n<p>The index must be freed once it&#39;s no longer in use.</p>\n","group":"index"},"git_index_clear":{"type":"function","file":"index.h","line":138,"lineto":138,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void"},"description":"<p>Clear the contents (all the entries) of an index object.\nThis clears the index object in memory; changes must be manually\nwritten to disk for them to take effect.</p>\n","comments":"","group":"index"},"git_index_free":{"type":"function","file":"index.h","line":145,"lineto":145,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void"},"description":"<p>Free an existing index object.</p>\n","comments":"","group":"index","examples":{"general.c":["ex/v0.14.0/general.html#git_index_free-27"],"showindex.c":["ex/v0.14.0/showindex.html#git_index_free-1"]}},"git_index_read":{"type":"function","file":"index.h","line":154,"lineto":154,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"<p>Update the contents of an existing index object in memory\nby reading from the hard disk.</p>\n","comments":"","group":"index","examples":{"showindex.c":["ex/v0.14.0/showindex.html#git_index_read-2"]}},"git_index_write":{"type":"function","file":"index.h","line":163,"lineto":163,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"<p>Write an existing index object from memory back to disk\nusing an atomic file lock.</p>\n","comments":"","group":"index"},"git_index_find":{"type":"function","file":"index.h","line":173,"lineto":173,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"int","comment":"an index >= 0 if found, -1 otherwise"},"description":"<p>Find the first index of any entries which point to given\npath in the Git index.</p>\n","comments":"","group":"index"},"git_index_uniq":{"type":"function","file":"index.h","line":180,"lineto":180,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void"},"description":"<p>Remove all entries with equal path except last added</p>\n","comments":"","group":"index"},"git_index_add":{"type":"function","file":"index.h","line":195,"lineto":195,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"filename to add"},{"name":"stage","type":"int","comment":"stage for the entry"}],"argline":"git_index *index, const char *path, int stage","sig":"git_index *::const char *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"<p>Add or update an index entry from a file in disk</p>\n","comments":"<p>The file <code>path</code> must be relative to the repository&#39;s\nworking folder and must be readable.</p>\n\n<p>This method will fail in bare index instances.</p>\n","group":"index"},"git_index_add2":{"type":"function","file":"index.h","line":207,"lineto":207,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"source_entry","type":"const git_index_entry *","comment":"new entry object"}],"argline":"git_index *index, const git_index_entry *source_entry","sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"<p>Add or update an index entry from an in-memory struct</p>\n","comments":"<p>A full copy (including the &#39;path&#39; string) of the given\n&#39;source_entry&#39; will be inserted on the index.</p>\n","group":"index"},"git_index_append":{"type":"function","file":"index.h","line":226,"lineto":226,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"filename to add"},{"name":"stage","type":"int","comment":"stage for the entry"}],"argline":"git_index *index, const char *path, int stage","sig":"git_index *::const char *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"<p>Add (append) an index entry from a file in disk</p>\n","comments":"<p>A new entry will always be inserted into the index;\nif the index already contains an entry for such\npath, the old entry will <strong>not</strong> be replaced.</p>\n\n<p>The file <code>path</code> must be relative to the repository&#39;s\nworking folder and must be readable.</p>\n\n<p>This method will fail in bare index instances.</p>\n","group":"index"},"git_index_append2":{"type":"function","file":"index.h","line":243,"lineto":243,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"source_entry","type":"const git_index_entry *","comment":"new entry object"}],"argline":"git_index *index, const git_index_entry *source_entry","sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"<p>Add (append) an index entry from an in-memory struct</p>\n","comments":"<p>A new entry will always be inserted into the index;\nif the index already contains an entry for the path\nin the <code>entry</code> struct, the old entry will <strong>not</strong> be\nreplaced.</p>\n\n<p>A full copy (including the &#39;path&#39; string) of the given\n&#39;source_entry&#39; will be inserted on the index.</p>\n","group":"index"},"git_index_remove":{"type":"function","file":"index.h","line":252,"lineto":252,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"position","type":"int","comment":"position of the entry to remove"}],"argline":"git_index *index, int position","sig":"git_index *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"<p>Remove an entry from the index</p>\n","comments":"","group":"index"},"git_index_get":{"type":"function","file":"index.h","line":267,"lineto":267,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"n","type":"unsigned int","comment":"the position of the entry"}],"argline":"git_index *index, unsigned int n","sig":"git_index *::unsigned int","return":{"type":"git_index_entry *","comment":"a pointer to the entry; NULL if out of bounds"},"description":"<p>Get a pointer to one of the entries in the index</p>\n","comments":"<p>This entry can be modified, and the changes will be written\nback to disk on the next write() call.</p>\n\n<p>The entry should not be freed by the caller.</p>\n","group":"index","examples":{"general.c":["ex/v0.14.0/general.html#git_index_get-28"],"showindex.c":["ex/v0.14.0/showindex.html#git_index_get-3"]}},"git_index_entrycount":{"type":"function","file":"index.h","line":275,"lineto":275,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current entries"},"description":"<p>Get the count of entries currently in the index</p>\n","comments":"","group":"index","examples":{"general.c":["ex/v0.14.0/general.html#git_index_entrycount-29"],"showindex.c":["ex/v0.14.0/showindex.html#git_index_entrycount-4"]}},"git_index_entrycount_unmerged":{"type":"function","file":"index.h","line":283,"lineto":283,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current unmerged entries"},"description":"<p>Get the count of unmerged entries currently in the index</p>\n","comments":"","group":"index"},"git_index_get_unmerged_bypath":{"type":"function","file":"index.h","line":295,"lineto":295,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"const git_index_entry_unmerged *","comment":"the unmerged entry; NULL if not found"},"description":"<p>Get an unmerged entry from the index.</p>\n","comments":"<p>The returned entry is read-only and should not be modified\nof freed by the caller.</p>\n","group":"index"},"git_index_get_unmerged_byindex":{"type":"function","file":"index.h","line":307,"lineto":307,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"n","type":"unsigned int","comment":"the position of the entry"}],"argline":"git_index *index, unsigned int n","sig":"git_index *::unsigned int","return":{"type":"const git_index_entry_unmerged *","comment":"a pointer to the unmerged entry; NULL if out of bounds"},"description":"<p>Get an unmerged entry from the index.</p>\n","comments":"<p>The returned entry is read-only and should not be modified\nof freed by the caller.</p>\n","group":"index"},"git_index_entry_stage":{"type":"function","file":"index.h","line":320,"lineto":320,"args":[{"name":"entry","type":"const git_index_entry *","comment":"The entry"}],"argline":"const git_index_entry *entry","sig":"const git_index_entry *","return":{"type":"int"},"description":"<p>Return the stage number from a git index entry</p>\n","comments":"<p>This entry is calculated from the entrie&#39;s flag\nattribute like this:</p>\n\n<p>(entry-&gt;flags &amp; GIT_IDXENTRY_STAGEMASK) &gt;&gt; GIT_IDXENTRY_STAGESHIFT</p>\n","group":"index"},"git_object_lookup":{"type":"function","file":"object.h","line":59,"lineto":63,"args":[{"name":"object","type":"git_object **","comment":"pointer to the looked-up object"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the object"},{"name":"id","type":"const git_oid *","comment":"the unique identifier for the object"},{"name":"type","type":"git_otype","comment":"the type of the object"}],"argline":"git_object **object,\n\t\tgit_repository *repo,\n\t\tconst git_oid *id,\n\t\tgit_otype type","sig":"git_object **::git_repository *::const git_oid *::git_otype","return":{"type":"int","comment":"a reference to the object"},"description":"<p>Lookup a reference to one of the objects in a repostory.</p>\n","comments":"<p>The generated reference is owned by the repository and\nshould be closed with the <code>git_object_close</code> method\ninstead of free&#39;d manually.</p>\n\n<p>The &#39;type&#39; parameter must match the type of the object\nin the odb; the method will fail otherwise.\nThe special value &#39;GIT_OBJ_ANY&#39; may be passed to let\nthe method guess the object&#39;s type.</p>\n","group":"object"},"git_object_lookup_prefix":{"type":"function","file":"object.h","line":92,"lineto":97,"args":[{"name":"object_out","type":"git_object **","comment":"pointer where to store the looked-up object"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the object"},{"name":"id","type":"const git_oid *","comment":"a short identifier for the object"},{"name":"len","type":"unsigned int","comment":"the length of the short identifier"},{"name":"type","type":"git_otype","comment":"the type of the object"}],"argline":"git_object **object_out,\n\t\tgit_repository *repo,\n\t\tconst git_oid *id,\n\t\tunsigned int len,\n\t\tgit_otype type","sig":"git_object **::git_repository *::const git_oid *::unsigned int::git_otype","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a reference to one of the objects in a repostory,\ngiven a prefix of its identifier (short id).</p>\n","comments":"<p>The object obtained will be so that its identifier\nmatches the first &#39;len&#39; hexadecimal characters\n(packets of 4 bits) of the given &#39;id&#39;.\n&#39;len&#39; must be at least GIT_OID_MINPREFIXLEN, and\nlong enough to identify a unique object matching\nthe prefix; otherwise the method will fail.</p>\n\n<p>The generated reference is owned by the repository and\nshould be closed with the <code>git_object_close</code> method\ninstead of free&#39;d manually.</p>\n\n<p>The &#39;type&#39; parameter must match the type of the object\nin the odb; the method will fail otherwise.\nThe special value &#39;GIT_OBJ_ANY&#39; may be passed to let\nthe method guess the object&#39;s type.</p>\n","group":"object"},"git_object_id":{"type":"function","file":"object.h","line":105,"lineto":105,"args":[{"name":"obj","type":"const git_object *","comment":"the repository object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"const git_oid *","comment":"the SHA1 id"},"description":"<p>Get the id (SHA1) of a repository object</p>\n","comments":"","group":"object"},"git_object_type":{"type":"function","file":"object.h","line":113,"lineto":113,"args":[{"name":"obj","type":"const git_object *","comment":"the repository object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"git_otype","comment":"the object's type"},"description":"<p>Get the object type of an object</p>\n","comments":"","group":"object"},"git_object_owner":{"type":"function","file":"object.h","line":127,"lineto":127,"args":[{"name":"obj","type":"const git_object *","comment":"the object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"git_repository *","comment":"the repository who owns this object"},"description":"<p>Get the repository that owns this object</p>\n","comments":"<p>Freeing or calling <code>git_repository_close</code> on the\nreturned pointer will invalidate the actual object.</p>\n\n<p>Any other operation may be run on the repository without\naffecting the object.</p>\n","group":"object"},"git_object_close":{"type":"function","file":"object.h","line":144,"lineto":144,"args":[{"name":"object","type":"git_object *","comment":"the object to close"}],"argline":"git_object *object","sig":"git_object *","return":{"type":"void"},"description":"<p>Close an open object</p>\n","comments":"<p>This method instructs the library to close an existing\nobject; note that git_objects are owned and cached by the repository\nso the object may or may not be freed after this library call,\ndepending on how agressive is the caching mechanism used\nby the repository.</p>\n\n<p>IMPORTANT:\nIt <em>is</em> necessary to call this method when you stop using\nan object. Failure to do so will cause a memory leak.</p>\n","group":"object","examples":{"general.c":["ex/v0.14.0/general.html#git_object_close-30"]}},"git_object_type2string":{"type":"function","file":"object.h","line":155,"lineto":155,"args":[{"name":"type","type":"git_otype","comment":"object type to convert."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"const char *","comment":"the corresponding string representation."},"description":"<p>Convert an object type to it&#39;s string representation.</p>\n","comments":"<p>The result is a pointer to a string in static memory and\nshould not be free()&#39;ed.</p>\n","group":"object","examples":{"general.c":["ex/v0.14.0/general.html#git_object_type2string-31"]}},"git_object_string2type":{"type":"function","file":"object.h","line":163,"lineto":163,"args":[{"name":"str","type":"const char *","comment":"the string to convert."}],"argline":"const char *str","sig":"const char *","return":{"type":"git_otype","comment":"the corresponding git_otype."},"description":"<p>Convert a string object type representation to it&#39;s git_otype.</p>\n","comments":"","group":"object"},"git_object_typeisloose":{"type":"function","file":"object.h","line":172,"lineto":172,"args":[{"name":"type","type":"git_otype","comment":"object type to test."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"int","comment":"true if the type represents a valid loose object type, false otherwise."},"description":"<p>Determine if the given git_otype is a valid loose object type.</p>\n","comments":"","group":"object"},"git_object__size":{"type":"function","file":"object.h","line":186,"lineto":186,"args":[{"name":"type","type":"git_otype","comment":"object type to get its size"}],"argline":"git_otype type","sig":"git_otype","return":{"type":"size_t","comment":"size in bytes of the object"},"description":"<p>Get the size in bytes for the structure which\nacts as an in-memory representation of any given\nobject type.</p>\n","comments":"<p>For all the core types, this would the equivalent\nof calling <code>sizeof(git_commit)</code> if the core types\nwere not opaque on the external API.</p>\n","group":"object"},"git_odb_new":{"type":"function","file":"odb.h","line":53,"lineto":53,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened. Set to NULL if the open failed."}],"argline":"git_odb **out","sig":"git_odb **","return":{"type":"int","comment":"GIT_SUCCESS if the database was created; otherwise an error code describing why the open was not possible."},"description":"<p>Create a new object database with no backends.</p>\n","comments":"<p>Before the ODB can be used for read/writing, a custom database\nbackend must be manually added using <code>git_odb_add_backend()</code></p>\n","group":"odb"},"git_odb_open":{"type":"function","file":"odb.h","line":72,"lineto":72,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened. Set to NULL if the open failed."},{"name":"objects_dir","type":"const char *","comment":"path of the backends' \"objects\" directory."}],"argline":"git_odb **out, const char *objects_dir","sig":"git_odb **::const char *","return":{"type":"int","comment":"GIT_SUCCESS if the database opened; otherwise an error code describing why the open was not possible."},"description":"<p>Create a new object database and automatically add\nthe two default backends:</p>\n","comments":"<ul>\n<li><p>git_odb_backend_loose: read and write loose object files\nfrom disk, assuming <code>objects_dir</code> as the Objects folder</p></li>\n<li><p>git_odb_backend_pack: read objects from packfiles,\nassuming <code>objects_dir</code> as the Objects folder which\ncontains a &#39;pack/&#39; folder with the corresponding data</p></li>\n</ul>\n","group":"odb"},"git_odb_add_backend":{"type":"function","file":"odb.h","line":87,"lineto":87,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"backend","type":"git_odb_backend *","comment":"pointer to a git_odb_backend instance"},{"name":"priority","type":"int","comment":"Value for ordering the backends queue"}],"argline":"git_odb *odb, git_odb_backend *backend, int priority","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"description":"<p>Add a custom backend to an existing Object DB</p>\n","comments":"<p>The backends are checked in relative ordering, based on the\nvalue of the <code>priority</code> parameter.</p>\n\n<p>Read <odb_backends.h> for more information.</p>\n","group":"odb"},"git_odb_add_alternate":{"type":"function","file":"odb.h","line":108,"lineto":108,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"backend","type":"git_odb_backend *","comment":"pointer to a git_odb_backend instance"},{"name":"priority","type":"int","comment":"Value for ordering the backends queue"}],"argline":"git_odb *odb, git_odb_backend *backend, int priority","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"description":"<p>Add a custom backend to an existing Object DB; this\nbackend will work as an alternate.</p>\n","comments":"<p>Alternate backends are always checked for objects <em>after</em>\nall the main backends have been exhausted.</p>\n\n<p>The backends are checked in relative ordering, based on the\nvalue of the <code>priority</code> parameter.</p>\n\n<p>Writing is disabled on alternate backends.</p>\n\n<p>Read <odb_backends.h> for more information.</p>\n","group":"odb"},"git_odb_close":{"type":"function","file":"odb.h","line":115,"lineto":115,"args":[{"name":"db","type":"git_odb *","comment":"database pointer to close. If NULL no action is taken."}],"argline":"git_odb *db","sig":"git_odb *","return":{"type":"void"},"description":"<p>Close an open object database.</p>\n","comments":"","group":"odb"},"git_odb_read":{"type":"function","file":"odb.h","line":134,"lineto":134,"args":[{"name":"out","type":"git_odb_object **","comment":"pointer where to store the read object"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_odb_object **out, git_odb *db, const git_oid *id","sig":"git_odb_object **::git_odb *::const git_oid *","return":{"type":"int","comment":"- GIT_SUCCESS if the object was read; - GIT_ENOTFOUND if the object is not in the database."},"description":"<p>Read an object from the database.</p>\n","comments":"<p>This method queries all available ODB backends\ntrying to read the given OID.</p>\n\n<p>The returned object is reference counted and\ninternally cached, so it should be closed\nby the user once it&#39;s no longer in use.</p>\n","group":"odb","examples":{"general.c":["ex/v0.14.0/general.html#git_odb_read-32"]}},"git_odb_read_prefix":{"type":"function","file":"odb.h","line":162,"lineto":162,"args":[{"name":"out","type":"git_odb_object **","comment":"pointer where to store the read object"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"short_id","type":"const git_oid *","comment":"a prefix of the id of the object to read."},{"name":"len","type":"unsigned int","comment":"the length of the prefix"}],"argline":"git_odb_object **out, git_odb *db, const git_oid *short_id, unsigned int len","sig":"git_odb_object **::git_odb *::const git_oid *::unsigned int","return":{"type":"int","comment":"GIT_SUCCESS if the object was read; GIT_ENOTFOUND if the object is not in the database. GIT_EAMBIGUOUS if the prefix is ambiguous (several objects match the prefix)"},"description":"<p>Read an object from the database, given a prefix\nof its identifier.</p>\n","comments":"<p>This method queries all available ODB backends\ntrying to match the &#39;len&#39; first hexadecimal\ncharacters of the &#39;short_id&#39;.\nThe remaining (GIT_OID_HEXSZ-len)*4 bits of\n&#39;short_id&#39; must be 0s.\n&#39;len&#39; must be at least GIT_OID_MINPREFIXLEN,\nand the prefix must be long enough to identify\na unique object in all the backends; the\nmethod will fail otherwise.</p>\n\n<p>The returned object is reference counted and\ninternally cached, so it should be closed\nby the user once it&#39;s no longer in use.</p>\n","group":"odb"},"git_odb_read_header":{"type":"function","file":"odb.h","line":182,"lineto":182,"args":[{"name":"len_p","type":"size_t *","comment":"pointer where to store the length"},{"name":"type_p","type":"git_otype *","comment":"pointer where to store the type"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id","sig":"size_t *::git_otype *::git_odb *::const git_oid *","return":{"type":"int","comment":"- GIT_SUCCESS if the object was read; - GIT_ENOTFOUND if the object is not in the database."},"description":"<p>Read the header of an object from the database, without\nreading its full contents.</p>\n","comments":"<p>The header includes the length and the type of an object.</p>\n\n<p>Note that most backends do not support reading only the header\nof an object, so the whole object will be read and then the\nheader will be returned.</p>\n","group":"odb"},"git_odb_exists":{"type":"function","file":"odb.h","line":193,"lineto":193,"args":[{"name":"db","type":"git_odb *","comment":"database to be searched for the given object."},{"name":"id","type":"const git_oid *","comment":"the object to search for."}],"argline":"git_odb *db, const git_oid *id","sig":"git_odb *::const git_oid *","return":{"type":"int","comment":"- 1, if the object was found - 0, otherwise"},"description":"<p>Determine if the given object can be found in the object database.</p>\n","comments":"","group":"odb"},"git_odb_write":{"type":"function","file":"odb.h","line":213,"lineto":213,"args":[{"name":"oid","type":"git_oid *","comment":"pointer to store the OID result of the write"},{"name":"odb","type":"git_odb *","comment":"object database where to store the object"},{"name":"data","type":"const void *","comment":"buffer with the data to storr"},{"name":"len","type":"size_t","comment":"size of the buffer"},{"name":"type","type":"git_otype","comment":"type of the data to store"}],"argline":"git_oid *oid, git_odb *odb, const void *data, size_t len, git_otype type","sig":"git_oid *::git_odb *::const void *::size_t::git_otype","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Write an object directly into the ODB</p>\n","comments":"<p>This method writes a full object straight into the ODB.\nFor most cases, it is preferred to write objects through a write\nstream, which is both faster and less memory intensive, specially\nfor big objects.</p>\n\n<p>This method is provided for compatibility with custom backends\nwhich are not able to support streaming writes</p>\n","group":"odb","examples":{"general.c":["ex/v0.14.0/general.html#git_odb_write-33"]}},"git_odb_open_wstream":{"type":"function","file":"odb.h","line":242,"lineto":242,"args":[{"name":"stream","type":"git_odb_stream **","comment":"pointer where to store the stream"},{"name":"db","type":"git_odb *","comment":"object database where the stream will write"},{"name":"size","type":"size_t","comment":"final size of the object that will be written"},{"name":"type","type":"git_otype","comment":"type of the object that will be written"}],"argline":"git_odb_stream **stream, git_odb *db, size_t size, git_otype type","sig":"git_odb_stream **::git_odb *::size_t::git_otype","return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"description":"<p>Open a stream to write an object into the ODB</p>\n","comments":"<p>The type and final length of the object must be specified\nwhen opening the stream.</p>\n\n<p>The returned stream will be of type <code>GIT_STREAM_WRONLY</code> and\nwill have the following methods:</p>\n\n<pre><code>- stream-&gt;write: write `n` bytes into the stream\n- stream-&gt;finalize_write: close the stream and store the object in\n    the odb\n- stream-&gt;free: free the stream\n</code></pre>\n\n<p>The streaming write won&#39;t be effective until <code>stream-&gt;finalize_write</code>\nis called and returns without an error</p>\n\n<p>The stream must always be free&#39;d or will leak memory.</p>\n\n<p>@see git_odb_stream</p>\n","group":"odb"},"git_odb_open_rstream":{"type":"function","file":"odb.h","line":268,"lineto":268,"args":[{"name":"stream","type":"git_odb_stream **","comment":"pointer where to store the stream"},{"name":"db","type":"git_odb *","comment":"object database where the stream will read from"},{"name":"oid","type":"const git_oid *","comment":"oid of the object the stream will read from"}],"argline":"git_odb_stream **stream, git_odb *db, const git_oid *oid","sig":"git_odb_stream **::git_odb *::const git_oid *","return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"description":"<p>Open a stream to read an object from the ODB</p>\n","comments":"<p>Note that most backends do <em>not</em> support streaming reads\nbecause they store their objects as compressed/delta&#39;ed blobs.</p>\n\n<p>It&#39;s recommended to use <code>git_odb_read</code> instead, which is\nassured to work on all backends.</p>\n\n<p>The returned stream will be of type <code>GIT_STREAM_RDONLY</code> and\nwill have the following methods:</p>\n\n<pre><code>- stream-&gt;read: read `n` bytes from the stream\n- stream-&gt;free: free the stream\n</code></pre>\n\n<p>The stream must always be free&#39;d or will leak memory.</p>\n\n<p>@see git_odb_stream</p>\n","group":"odb"},"git_odb_hash":{"type":"function","file":"odb.h","line":282,"lineto":282,"args":[{"name":"id","type":"git_oid *","comment":"the resulting object-ID."},{"name":"data","type":"const void *","comment":"data to hash"},{"name":"len","type":"size_t","comment":"size of the data"},{"name":"type","type":"git_otype","comment":"of the data to hash"}],"argline":"git_oid *id, const void *data, size_t len, git_otype type","sig":"git_oid *::const void *::size_t::git_otype","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Determine the object-ID (sha1 hash) of a data buffer</p>\n","comments":"<p>The resulting SHA-1 OID will the itentifier for the data\nbuffer as if the data buffer it were to written to the ODB.</p>\n","group":"odb"},"git_odb_hashfile":{"type":"function","file":"odb.h","line":295,"lineto":295,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"path","type":"const char *","comment":"file to read and determine object id for"},{"name":"type","type":"git_otype","comment":"the type of the object that will be hashed"}],"argline":"git_oid *out, const char *path, git_otype type","sig":"git_oid *::const char *::git_otype","return":{"type":"int","comment":"GIT_SUCCESS if valid; error code otherwise"},"description":"<p>Read a file from disk and fill a git_oid with the object id\nthat the file would have if it were written to the Object\nDatabase as an object of the given type. Similar functionality\nto git.git&#39;s <code>git hash-object</code> without the <code>-w</code> flag.</p>\n","comments":"","group":"odb"},"git_odb_object_close":{"type":"function","file":"odb.h","line":305,"lineto":305,"args":[{"name":"object","type":"git_odb_object *","comment":"object to close"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"void"},"description":"<p>Close an ODB object</p>\n","comments":"<p>This method must always be called once a <code>git_odb_object</code> is no\nlonger needed, otherwise memory will leak.</p>\n","group":"odb","examples":{"general.c":["ex/v0.14.0/general.html#git_odb_object_close-34"]}},"git_odb_object_id":{"type":"function","file":"odb.h","line":315,"lineto":315,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"const git_oid *","comment":"a pointer to the OID"},"description":"<p>Return the OID of an ODB object</p>\n","comments":"<p>This is the OID from which the object was read from</p>\n","group":"odb"},"git_odb_object_data":{"type":"function","file":"odb.h","line":328,"lineto":328,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"const void *","comment":"a pointer to the data"},"description":"<p>Return the data of an ODB object</p>\n","comments":"<p>This is the uncompressed, raw data as read from the ODB,\nwithout the leading header.</p>\n\n<p>This pointer is owned by the object and shall not be free&#39;d.</p>\n","group":"odb","examples":{"general.c":["ex/v0.14.0/general.html#git_odb_object_data-35"]}},"git_odb_object_size":{"type":"function","file":"odb.h","line":339,"lineto":339,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"size_t","comment":"the size"},"description":"<p>Return the size of an ODB object</p>\n","comments":"<p>This is the real size of the <code>data</code> buffer, not the\nactual size of the object.</p>\n","group":"odb","examples":{"general.c":["ex/v0.14.0/general.html#git_odb_object_size-36"]}},"git_odb_object_type":{"type":"function","file":"odb.h","line":347,"lineto":347,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"git_otype","comment":"the type"},"description":"<p>Return the type of an ODB object</p>\n","comments":"","group":"odb","examples":{"general.c":["ex/v0.14.0/general.html#git_odb_object_type-37"]}},"git_oid_fromstr":{"type":"function","file":"oid.h","line":65,"lineto":65,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes)."}],"argline":"git_oid *out, const char *str","sig":"git_oid *::const char *","return":{"type":"int","comment":"GIT_SUCCESS if valid; GIT_ENOTOID on failure."},"description":"<p>Parse a hex formatted object id into a git_oid.</p>\n","comments":"","group":"oid","examples":{"general.c":["ex/v0.14.0/general.html#git_oid_fromstr-38","ex/v0.14.0/general.html#git_oid_fromstr-39","ex/v0.14.0/general.html#git_oid_fromstr-40","ex/v0.14.0/general.html#git_oid_fromstr-41","ex/v0.14.0/general.html#git_oid_fromstr-42","ex/v0.14.0/general.html#git_oid_fromstr-43","ex/v0.14.0/general.html#git_oid_fromstr-44","ex/v0.14.0/general.html#git_oid_fromstr-45"]}},"git_oid_fromstrn":{"type":"function","file":"oid.h","line":78,"lineto":78,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string of at least size `length`"},{"name":"length","type":"size_t","comment":"length of the input string"}],"argline":"git_oid *out, const char *str, size_t length","sig":"git_oid *::const char *::size_t","return":{"type":"int","comment":"GIT_SUCCESS if valid; GIT_ENOTOID on failure."},"description":"<p>Parse N characters of a hex formatted object id into a git_oid</p>\n","comments":"<p>If N is odd, N-1 characters will be parsed instead.\nThe remaining space in the git_oid will be set to zero.</p>\n","group":"oid"},"git_oid_fromraw":{"type":"function","file":"oid.h","line":86,"lineto":86,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"raw","type":"const unsigned char *","comment":"the raw input bytes to be copied."}],"argline":"git_oid *out, const unsigned char *raw","sig":"git_oid *::const unsigned char *","return":{"type":"void"},"description":"<p>Copy an already raw oid into a git_oid structure.</p>\n","comments":"","group":"oid"},"git_oid_fmt":{"type":"function","file":"oid.h","line":98,"lineto":98,"args":[{"name":"str","type":"char *","comment":"output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required."},{"name":"oid","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *str, const git_oid *oid","sig":"char *::const git_oid *","return":{"type":"void"},"description":"<p>Format a git_oid into a hex string.</p>\n","comments":"","group":"oid","examples":{"general.c":["ex/v0.14.0/general.html#git_oid_fmt-46","ex/v0.14.0/general.html#git_oid_fmt-47","ex/v0.14.0/general.html#git_oid_fmt-48","ex/v0.14.0/general.html#git_oid_fmt-49","ex/v0.14.0/general.html#git_oid_fmt-50"],"showindex.c":["ex/v0.14.0/showindex.html#git_oid_fmt-5"]}},"git_oid_pathfmt":{"type":"function","file":"oid.h","line":113,"lineto":113,"args":[{"name":"str","type":"char *","comment":"output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (41 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required."},{"name":"oid","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *str, const git_oid *oid","sig":"char *::const git_oid *","return":{"type":"void"},"description":"<p>Format a git_oid into a loose-object path string.</p>\n","comments":"<p>The resulting string is &quot;aa/...&quot;, where &quot;aa&quot; is the first two\nhex digitis of the oid and &quot;...&quot; is the remaining 38 digits.</p>\n","group":"oid"},"git_oid_allocfmt":{"type":"function","file":"oid.h","line":122,"lineto":122,"args":[{"name":"oid","type":"const git_oid *","comment":"the oid structure to format"}],"argline":"const git_oid *oid","sig":"const git_oid *","return":{"type":"char *","comment":"the c-string; NULL if memory is exhausted. Caller must deallocate the string with free()."},"description":"<p>Format a git_oid into a newly allocated c-string.</p>\n","comments":"","group":"oid"},"git_oid_to_string":{"type":"function","file":"oid.h","line":139,"lineto":139,"args":[{"name":"out","type":"char *","comment":"the buffer into which the oid string is output."},{"name":"n","type":"size_t","comment":"the size of the out buffer."},{"name":"oid","type":"const git_oid *","comment":"the oid structure to format."}],"argline":"char *out, size_t n, const git_oid *oid","sig":"char *::size_t::const git_oid *","return":{"type":"char *","comment":"the out buffer pointer, assuming no input parameter errors, otherwise a pointer to an empty string."},"description":"<p>Format a git_oid into a buffer as a hex format c-string.</p>\n","comments":"<p>If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\noid c-string will be truncated to n-1 characters. If there are\nany input parameter errors (out == NULL, n == 0, oid == NULL),\nthen a pointer to an empty string is returned, so that the return\nvalue can always be printed.</p>\n","group":"oid"},"git_oid_cpy":{"type":"function","file":"oid.h","line":147,"lineto":147,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"src","type":"const git_oid *","comment":"oid structure to copy from."}],"argline":"git_oid *out, const git_oid *src","sig":"git_oid *::const git_oid *","return":{"type":"void"},"description":"<p>Copy an oid from one structure to another.</p>\n","comments":"","group":"oid"},"git_oid_cmp":{"type":"function","file":"oid.h","line":156,"lineto":156,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."}],"argline":"const git_oid *a, const git_oid *b","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":"<0, 0, >0 if a < b, a == b, a > b."},"description":"<p>Compare two oid structures.</p>\n","comments":"","group":"oid"},"git_oid_ncmp":{"type":"function","file":"oid.h","line":167,"lineto":167,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."},{"name":"len","type":"unsigned int","comment":"the number of hex chars to compare"}],"argline":"const git_oid *a, const git_oid *b, unsigned int len","sig":"const git_oid *::const git_oid *::unsigned int","return":{"type":"int","comment":"0 in case of a match"},"description":"<p>Compare the first &#39;len&#39; hexadecimal characters (packets of 4 bits)\nof two oid structures.</p>\n","comments":"","group":"oid"},"git_oid_shorten_new":{"type":"function","file":"oid.h","line":188,"lineto":188,"args":[{"name":"min_length","type":"size_t","comment":"The minimal length for all identifiers, which will be used even if shorter OIDs would still be unique."}],"argline":"size_t min_length","sig":"size_t","return":{"type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance, NULL if OOM"},"description":"<p>Create a new OID shortener.</p>\n","comments":"<p>The OID shortener is used to process a list of OIDs\nin text form and return the shortest length that would\nuniquely identify all of them.</p>\n\n<p>E.g. look at the result of <code>git log --abbrev</code>.</p>\n","group":"oid"},"git_oid_shorten_add":{"type":"function","file":"oid.h","line":214,"lineto":214,"args":[{"name":"os","type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance"},{"name":"text_oid","type":"const char *","comment":"an OID in text form"}],"argline":"git_oid_shorten *os, const char *text_oid","sig":"git_oid_shorten *::const char *","return":{"type":"int","comment":"the minimal length to uniquely identify all OIDs added so far to the set; or an error code (<0) if an error occurs."},"description":"<p>Add a new OID to set of shortened OIDs and calculate\nthe minimal length to uniquely identify all the OIDs in\nthe set.</p>\n","comments":"<p>The OID is expected to be a 40-char hexadecimal string.\nThe OID is owned by the user and will not be modified\nor freed.</p>\n\n<p>For performance reasons, there is a hard-limit of how many\nOIDs can be added to a single set (around ~22000, assuming\na mostly randomized distribution), which should be enough\nfor any kind of program, and keeps the algorithm fast and\nmemory-efficient.</p>\n\n<p>Attempting to add more than those OIDs will result in a\nGIT_ENOMEM error</p>\n","group":"oid"},"git_oid_shorten_free":{"type":"function","file":"oid.h","line":221,"lineto":221,"args":[{"name":"os","type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance"}],"argline":"git_oid_shorten *os","sig":"git_oid_shorten *","return":{"type":"void"},"description":"<p>Free an OID shortener instance</p>\n","comments":"","group":"oid"},"git_reflog_read":{"type":"function","file":"reflog.h","line":51,"lineto":51,"args":[{"name":"reflog","type":"git_reflog **","comment":"pointer to reflog"},{"name":"ref","type":"git_reference *","comment":"log pointer to reflog"}],"argline":"git_reflog **reflog, git_reference *ref","sig":"git_reflog **::git_reference *","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Read the reflog for the given reference</p>\n","comments":"<p>The reflog must be freed manually by using\ngit_reflog_free().</p>\n","group":"reflog"},"git_reflog_write":{"type":"function","file":"reflog.h","line":69,"lineto":69,"args":[{"name":"ref","type":"git_reference *","comment":"the changed reference"},{"name":"oid_old","type":"const git_oid *","comment":"the OID the reference was pointing to"},{"name":"committer","type":"const git_signature *","comment":"the signature of the committer"},{"name":"msg","type":"const char *","comment":"the reflog message"}],"argline":"git_reference *ref, const git_oid *oid_old, const git_signature *committer, const char *msg","sig":"git_reference *::const git_oid *::const git_signature *::const char *","return":{"type":"int","comment":"GIT_SUCCESS on success; error code otherwise"},"description":"<p>Write a new reflog for the given reference</p>\n","comments":"<p>If there is no reflog file for the given\nreference yet, it will be created.</p>\n\n<p><code>oid_old</code> may be NULL in case it&#39;s a new reference.</p>\n\n<p><code>msg</code> is optional and can be NULL.</p>\n","group":"reflog"},"git_reflog_entrycount":{"type":"function","file":"reflog.h","line":77,"lineto":77,"args":[{"name":"reflog","type":"git_reflog *","comment":"the previously loaded reflog"}],"argline":"git_reflog *reflog","sig":"git_reflog *","return":{"type":"unsigned int","comment":"the number of log entries"},"description":"<p>Get the number of log entries in a reflog</p>\n","comments":"","group":"reflog"},"git_reflog_entry_byindex":{"type":"function","file":"reflog.h","line":86,"lineto":86,"args":[{"name":"reflog","type":"git_reflog *","comment":"a previously loaded reflog"},{"name":"idx","type":"unsigned int","comment":"the position to lookup"}],"argline":"git_reflog *reflog, unsigned int idx","sig":"git_reflog *::unsigned int","return":{"type":"const git_reflog_entry *","comment":"the entry; NULL if not found"},"description":"<p>Lookup an entry by its index</p>\n","comments":"","group":"reflog"},"git_reflog_entry_oidold":{"type":"function","file":"reflog.h","line":94,"lineto":94,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"char *","comment":"the old oid"},"description":"<p>Get the old oid</p>\n","comments":"","group":"reflog"},"git_reflog_entry_oidnew":{"type":"function","file":"reflog.h","line":102,"lineto":102,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"char *","comment":"the new oid at this time"},"description":"<p>Get the new oid</p>\n","comments":"","group":"reflog"},"git_reflog_entry_committer":{"type":"function","file":"reflog.h","line":110,"lineto":110,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"git_signature *","comment":"the committer"},"description":"<p>Get the committer of this entry</p>\n","comments":"","group":"reflog"},"git_reflog_entry_msg":{"type":"function","file":"reflog.h","line":118,"lineto":118,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"char *","comment":"the log msg"},"description":"<p>Get the log msg</p>\n","comments":"","group":"reflog"},"git_reflog_free":{"type":"function","file":"reflog.h","line":125,"lineto":125,"args":[{"name":"reflog","type":"git_reflog *","comment":"reflog to free"}],"argline":"git_reflog *reflog","sig":"git_reflog *","return":{"type":"void"},"description":"<p>Free the reflog</p>\n","comments":"","group":"reflog"},"git_reference_lookup":{"type":"function","file":"refs.h","line":52,"lineto":52,"args":[{"name":"reference_out","type":"git_reference **","comment":"pointer to the looked-up reference"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the reference"},{"name":"name","type":"const char *","comment":"the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)"}],"argline":"git_reference **reference_out, git_repository *repo, const char *name","sig":"git_reference **::git_repository *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a reference by its name in a repository.</p>\n","comments":"<p>The generated reference is owned by the repository and\nshould not be freed by the user.</p>\n","group":"reference","examples":{"general.c":["ex/v0.14.0/general.html#git_reference_lookup-51"]}},"git_reference_create_symbolic":{"type":"function","file":"refs.h","line":73,"lineto":73,"args":[{"name":"ref_out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"repo","type":"git_repository *","comment":"Repository where that reference will live"},{"name":"name","type":"const char *","comment":"The name of the reference"},{"name":"target","type":"const char *","comment":"The target of the reference"},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_reference **ref_out, git_repository *repo, const char *name, const char *target, int force","sig":"git_reference **::git_repository *::const char *::const char *::int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Create a new symbolic reference.</p>\n","comments":"<p>The reference will be created in the repository and written\nto the disk.</p>\n\n<p>This reference is owned by the repository and shall not\nbe free&#39;d by the user.</p>\n\n<p>If <code>force</code> is true and there already exists a reference\nwith the same name, it will be overwritten.</p>\n","group":"reference"},"git_reference_create_oid":{"type":"function","file":"refs.h","line":94,"lineto":94,"args":[{"name":"ref_out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"repo","type":"git_repository *","comment":"Repository where that reference will live"},{"name":"name","type":"const char *","comment":"The name of the reference"},{"name":"id","type":"const git_oid *","comment":"The object id pointed to by the reference."},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id, int force","sig":"git_reference **::git_repository *::const char *::const git_oid *::int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Create a new object id reference.</p>\n","comments":"<p>The reference will be created in the repository and written\nto the disk.</p>\n\n<p>This reference is owned by the repository and shall not\nbe free&#39;d by the user.</p>\n\n<p>If <code>force</code> is true and there already exists a reference\nwith the same name, it will be overwritten.</p>\n","group":"reference"},"git_reference_oid":{"type":"function","file":"refs.h","line":104,"lineto":104,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const git_oid *","comment":"a pointer to the oid if available, NULL otherwise"},"description":"<p>Get the OID pointed to by a reference.</p>\n","comments":"<p>Only available if the reference is direct (i.e. not symbolic)</p>\n","group":"reference","examples":{"general.c":["ex/v0.14.0/general.html#git_reference_oid-52"]}},"git_reference_target":{"type":"function","file":"refs.h","line":114,"lineto":114,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const char *","comment":"a pointer to the name if available, NULL otherwise"},"description":"<p>Get full name to the reference pointed by this reference</p>\n","comments":"<p>Only available if the reference is symbolic</p>\n","group":"reference","examples":{"general.c":["ex/v0.14.0/general.html#git_reference_target-53"]}},"git_reference_type":{"type":"function","file":"refs.h","line":124,"lineto":124,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"git_rtype","comment":"the type"},"description":"<p>Get the type of a reference</p>\n","comments":"<p>Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)</p>\n","group":"reference","examples":{"general.c":["ex/v0.14.0/general.html#git_reference_type-54"]}},"git_reference_name":{"type":"function","file":"refs.h","line":132,"lineto":132,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const char *","comment":"the full name for the ref"},"description":"<p>Get the full name of a reference</p>\n","comments":"","group":"reference"},"git_reference_resolve":{"type":"function","file":"refs.h","line":147,"lineto":147,"args":[{"name":"resolved_ref","type":"git_reference **","comment":"Pointer to the peeled reference"},{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference **resolved_ref, git_reference *ref","sig":"git_reference **::git_reference *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Resolve a symbolic reference</p>\n","comments":"<p>Thie method iteratively peels a symbolic reference\nuntil it resolves to a direct reference to an OID.</p>\n\n<p>If a direct reference is passed as an argument,\nthat reference is returned immediately</p>\n","group":"reference"},"git_reference_owner":{"type":"function","file":"refs.h","line":155,"lineto":155,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"git_repository *","comment":"a pointer to the repo"},"description":"<p>Get the repository where a reference resides</p>\n","comments":"","group":"reference"},"git_reference_set_target":{"type":"function","file":"refs.h","line":170,"lineto":170,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"},{"name":"target","type":"const char *","comment":"The new target for the reference"}],"argline":"git_reference *ref, const char *target","sig":"git_reference *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Set the symbolic target of a reference.</p>\n","comments":"<p>The reference must be a symbolic reference, otherwise\nthis method will fail.</p>\n\n<p>The reference will be automatically updated in\nmemory and on disk.</p>\n","group":"reference"},"git_reference_set_oid":{"type":"function","file":"refs.h","line":185,"lineto":185,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"},{"name":"id","type":"const git_oid *","comment":"The new target OID for the reference"}],"argline":"git_reference *ref, const git_oid *id","sig":"git_reference *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Set the OID target of a reference.</p>\n","comments":"<p>The reference must be a direct reference, otherwise\nthis method will fail.</p>\n\n<p>The reference will be automatically updated in\nmemory and on disk.</p>\n","group":"reference"},"git_reference_rename":{"type":"function","file":"refs.h","line":198,"lineto":198,"args":[{"name":"ref","type":"git_reference *"},{"name":"new_name","type":"const char *"},{"name":"force","type":"int"}],"argline":"git_reference *ref, const char *new_name, int force","sig":"git_reference *::const char *::int","return":{"type":"int"},"description":"<p>Rename an existing reference</p>\n","comments":"<p>This method works for both direct and symbolic references.\nThe new name will be checked for validity and may be\nmodified into a normalized form.</p>\n\n<p>The refernece will be immediately renamed in-memory\nand on disk.</p>\n","group":"reference"},"git_reference_delete":{"type":"function","file":"refs.h","line":209,"lineto":209,"args":[{"name":"ref","type":"git_reference *"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int"},"description":"<p>Delete an existing reference</p>\n","comments":"<p>This method works for both direct and symbolic references.</p>\n\n<p>The reference will be immediately removed on disk and from\nmemory. The given reference pointer will no longer be valid.</p>\n","group":"reference"},"git_reference_packall":{"type":"function","file":"refs.h","line":227,"lineto":227,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where the loose refs will be packed"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Pack all the loose references in the repository</p>\n","comments":"<p>This method will load into the cache all the loose\nreferences on the repository and update the\n<code>packed-refs</code> file with them.</p>\n\n<p>Once the <code>packed-refs</code> file has been written properly,\nthe loose references will be removed from disk.</p>\n\n<p>WARNING: calling this method may invalidate any existing\nreferences previously loaded on the cache.</p>\n","group":"reference"},"git_reference_listall":{"type":"function","file":"refs.h","line":250,"lineto":250,"args":[{"name":"array","type":"git_strarray *","comment":"Pointer to a git_strarray structure where the reference names will be stored"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the refs"},{"name":"list_flags","type":"unsigned int","comment":"Filtering flags for the reference listing."}],"argline":"git_strarray *array, git_repository *repo, unsigned int list_flags","sig":"git_strarray *::git_repository *::unsigned int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Fill a list with all the references that can be found\nin a repository.</p>\n","comments":"<p>The listed references may be filtered by type, or using\na bitwise OR of several types. Use the magic value\n<code>GIT_REF_LISTALL</code> to obtain all references, including\npacked ones.</p>\n\n<p>The string array will be filled with the names of all\nreferences; these values are owned by the user and\nshould be free&#39;d manually when no longer needed, using\n<code>git_strarray_free</code>.</p>\n","group":"reference","examples":{"general.c":["ex/v0.14.0/general.html#git_reference_listall-55"]}},"git_reference_foreach":{"type":"function","file":"refs.h","line":272,"lineto":272,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the refs"},{"name":"list_flags","type":"unsigned int","comment":"Filtering flags for the reference listing."},{"name":"callback","type":"int (*)(const char *, void *)","comment":"Function which will be called for every listed ref"},{"name":"payload","type":"void *","comment":"Additional data to pass to the callback"}],"argline":"git_repository *repo, unsigned int list_flags, int (*callback)(const char *, void *), void *payload","sig":"git_repository *::unsigned int::int (*)(const char *, void *)::void *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Perform an operation on each reference in the repository</p>\n","comments":"<p>The processed references may be filtered by type, or using\na bitwise OR of several types. Use the magic value\n<code>GIT_REF_LISTALL</code> to obtain all references, including\npacked ones.</p>\n\n<p>The <code>callback</code> function will be called for each of the references\nin the repository, and will receive the name of the reference and\nthe <code>payload</code> value passed to this method.</p>\n","group":"reference"},"git_refspec_src":{"type":"function","file":"refspec.h","line":45,"lineto":45,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"const char *","comment":"the refspec's source specifier"},"description":"<p>Get the source specifier</p>\n","comments":"","group":"refspec"},"git_refspec_dst":{"type":"function","file":"refspec.h","line":53,"lineto":53,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"const char *","comment":"the refspec's destination specifier"},"description":"<p>Get the destination specifier</p>\n","comments":"","group":"refspec"},"git_refspec_src_match":{"type":"function","file":"refspec.h","line":63,"lineto":63,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"},{"name":"refname","type":"const char *","comment":"the name of the reference to check"}],"argline":"const git_refspec *refspec, const char *refname","sig":"const git_refspec *::const char *","return":{"type":"int","comment":"GIT_SUCCESS on successful match; GIT_ENOMACH on match failure or an error code on other failure"},"description":"<p>Match a refspec&#39;s source descriptor with a reference name</p>\n","comments":"","group":"refspec"},"git_refspec_transform":{"type":"function","file":"refspec.h","line":74,"lineto":75,"args":[{"name":"out","type":"char *","comment":"where to store the target name"},{"name":"outlen","type":"size_t","comment":"the size ouf the `out` buffer"},{"name":"spec","type":"const git_refspec *","comment":"the refspec"},{"name":"name","type":"const char *","comment":"the name of the reference to transform @preturn GIT_SUCCESS, GIT_ESHORTBUFFER or another error"}],"argline":"char *out, size_t outlen, const git_refspec *spec, const char *name","sig":"char *::size_t::const git_refspec *::const char *","return":{"type":"int"},"description":"<p>Transform a reference to its target following the refspec&#39;s rules</p>\n","comments":"","group":"refspec"},"git_remote_get":{"type":"function","file":"remote.h","line":57,"lineto":57,"args":[{"name":"out","type":"struct git_remote **","comment":"pointer to the new remote object"},{"name":"cfg","type":"struct git_config *","comment":"the repository's configuration"},{"name":"name","type":"const char *","comment":"the remote's name"}],"argline":"struct git_remote **out, struct git_config *cfg, const char *name","sig":"struct git_remote **::struct git_config *::const char *","return":{"type":"int","comment":"0 on success; error value otherwise"},"description":"<p>Get the information for a particular remote</p>\n","comments":"","group":"remote"},"git_remote_name":{"type":"function","file":"remote.h","line":65,"lineto":65,"args":[{"name":"remote","type":"struct git_remote *","comment":"the remote"}],"argline":"struct git_remote *remote","sig":"struct git_remote *","return":{"type":"const char *","comment":"a pointer to the name"},"description":"<p>Get the remote&#39;s name</p>\n","comments":"","group":"remote"},"git_remote_url":{"type":"function","file":"remote.h","line":73,"lineto":73,"args":[{"name":"remote","type":"struct git_remote *","comment":"the remote"}],"argline":"struct git_remote *remote","sig":"struct git_remote *","return":{"type":"const char *","comment":"a pointer to the url"},"description":"<p>Get the remote&#39;s url</p>\n","comments":"","group":"remote"},"git_remote_fetchspec":{"type":"function","file":"remote.h","line":81,"lineto":81,"args":[{"name":"remote","type":"struct git_remote *","comment":"the remote"}],"argline":"struct git_remote *remote","sig":"struct git_remote *","return":{"type":"const git_refspec *","comment":"a pointer to the fetch refspec or NULL if it doesn't exist"},"description":"<p>Get the fetch refspec</p>\n","comments":"","group":"remote"},"git_remote_pushspec":{"type":"function","file":"remote.h","line":89,"lineto":89,"args":[{"name":"remote","type":"struct git_remote *","comment":"the remote"}],"argline":"struct git_remote *remote","sig":"struct git_remote *","return":{"type":"const git_refspec *","comment":"a pointer to the push refspec or NULL if it doesn't exist"},"description":"<p>Get the push refspec</p>\n","comments":"","group":"remote"},"git_remote_connect":{"type":"function","file":"remote.h","line":100,"lineto":100,"args":[{"name":"remote","type":"struct git_remote *","comment":"the remote to connect to"},{"name":"direction","type":"int"}],"argline":"struct git_remote *remote, int direction","sig":"struct git_remote *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"<p>Open a connection to a remote</p>\n","comments":"<p>The transport is selected based on the URL</p>\n","group":"remote"},"git_remote_ls":{"type":"function","file":"remote.h","line":111,"lineto":111,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"refs","type":"git_headarray *","comment":"where to store the refs"}],"argline":"git_remote *remote, git_headarray *refs","sig":"git_remote *::git_headarray *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"<p>Get a list of refs at the remote</p>\n","comments":"<p>The remote (or more exactly its transport) must be connected.</p>\n","group":"remote"},"git_remote_free":{"type":"function","file":"remote.h","line":118,"lineto":122,"args":[{"name":"remote","type":"struct git_remote *","comment":"the remote to free"}],"argline":"struct git_remote *remote","sig":"struct git_remote *","return":{"type":"void"},"description":"<p>Free the memory associated with a remote</p>\n","comments":"","group":"remote"},"git_repository_open":{"type":"function","file":"repository.h","line":64,"lineto":64,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"path","type":"const char *","comment":"the path to the repository"}],"argline":"git_repository **repository, const char *path","sig":"git_repository **::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Open a git repository.</p>\n","comments":"<p>The &#39;path&#39; argument must point to an existing git repository\nfolder, e.g.</p>\n\n<pre><code>/path/to/my_repo/.git/  (normal repository)\n                    objects/\n                    index\n                    HEAD\n\n/path/to/bare_repo/     (bare repository)\n                objects/\n                index\n                HEAD\n</code></pre>\n\n<p>The method will automatically detect if &#39;path&#39; is a normal\nor bare repository or fail is &#39;path&#39; is neither.</p>\n","group":"repository","examples":{"general.c":["ex/v0.14.0/general.html#git_repository_open-56"],"showindex.c":["ex/v0.14.0/showindex.html#git_repository_open-6"]}},"git_repository_open2":{"type":"function","file":"repository.h","line":93,"lineto":97,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"git_dir","type":"const char *","comment":"The full path to the repository folder e.g. a '.git' folder for live repos, any folder for bare Equivalent to $GIT_DIR. Cannot be NULL."},{"name":"git_object_directory","type":"const char *","comment":"The full path to the ODB folder. the folder where all the loose and packed objects are stored Equivalent to $GIT_OBJECT_DIRECTORY. If NULL, \"$GIT_DIR/objects/\" is assumed."},{"name":"git_index_file","type":"const char *","comment":"The full path to the index (dircache) file Equivalent to $GIT_INDEX_FILE. If NULL, \"$GIT_DIR/index\" is assumed."},{"name":"git_work_tree","type":"const char *","comment":"The full path to the working tree of the repository, if the repository is not bare. Equivalent to $GIT_WORK_TREE. If NULL, the repository is assumed to be bare."}],"argline":"git_repository **repository,\n\t\tconst char *git_dir,\n\t\tconst char *git_object_directory,\n\t\tconst char *git_index_file,\n\t\tconst char *git_work_tree","sig":"git_repository **::const char *::const char *::const char *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Open a git repository by manually specifying all its paths</p>\n","comments":"","group":"repository"},"git_repository_open3":{"type":"function","file":"repository.h","line":128,"lineto":132,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"git_dir","type":"const char *","comment":"The full path to the repository folder e.g. a '.git' folder for live repos, any folder for bare Equivalent to $GIT_DIR. Cannot be NULL."},{"name":"object_database","type":"git_odb *","comment":"A pointer to a git_odb created & initialized by the user (e.g. with custom backends). This object database will be owned by the repository and will be automatically free'd. It should not be manually free'd by the user, or this git_repository object will become invalid."},{"name":"git_index_file","type":"const char *","comment":"The full path to the index (dircache) file Equivalent to $GIT_INDEX_FILE. If NULL, \"$GIT_DIR/index\" is assumed."},{"name":"git_work_tree","type":"const char *","comment":"The full path to the working tree of the repository, if the repository is not bare. Equivalent to $GIT_WORK_TREE. If NULL, the repository is assumed to be bare."}],"argline":"git_repository **repository,\n\t\tconst char *git_dir,\n\t\tgit_odb *object_database,\n\t\tconst char *git_index_file,\n\t\tconst char *git_work_tree","sig":"git_repository **::const char *::git_odb *::const char *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Open a git repository by manually specifying its paths and\nthe object database it will use.</p>\n","comments":"","group":"repository"},"git_repository_discover":{"type":"function","file":"repository.h","line":161,"lineto":161,"args":[{"name":"repository_path","type":"char *","comment":"The user allocated buffer which will contain the found path."},{"name":"size","type":"size_t","comment":"repository_path size"},{"name":"start_path","type":"const char *","comment":"The base path where the lookup starts."},{"name":"across_fs","type":"int","comment":"If true, then the lookup will not stop when a filesystem device change is detected while exploring parent directories."},{"name":"ceiling_dirs","type":"const char *","comment":"A GIT_PATH_LIST_SEPARATOR separated list of absolute symbolic link free paths. The lookup will stop when any of this paths is reached. Note that the lookup always performs on start_path no matter start_path appears in ceiling_dirs ceiling_dirs might be NULL (which is equivalent to an empty string)"}],"argline":"char *repository_path, size_t size, const char *start_path, int across_fs, const char *ceiling_dirs","sig":"char *::size_t::const char *::int::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Look for a git repository and copy its path in the given buffer. The lookup start\nfrom base_path and walk across parent directories if nothing has been found. The\nlookup ends when the first repository is found, or when reaching a directory\nreferenced in ceiling_dirs or when the filesystem changes (in case across_fs\nis true).</p>\n","comments":"<p>The method will automatically detect if the repository is bare (if there is\na repository).</p>\n","group":"repository"},"git_repository_database":{"type":"function","file":"repository.h","line":169,"lineto":169,"args":[{"name":"repo","type":"git_repository *","comment":"a repository object"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"git_odb *","comment":"a pointer to the object db"},"description":"<p>Get the object database behind a Git repository</p>\n","comments":"","group":"repository","examples":{"general.c":["ex/v0.14.0/general.html#git_repository_database-57"]}},"git_repository_index":{"type":"function","file":"repository.h","line":189,"lineto":189,"args":[{"name":"index","type":"git_index **","comment":"Pointer where to store the index"},{"name":"repo","type":"git_repository *","comment":"a repository object"}],"argline":"git_index **index, git_repository *repo","sig":"git_index **::git_repository *","return":{"type":"int","comment":"0 on success; error code if the index could not be opened"},"description":"<p>Open the Index file of a Git repository</p>\n","comments":"<p>This returns a new and unique <code>git_index</code> object representing the\nactive index for the repository.</p>\n\n<p>This method may be called more than once (e.g. on different threads).</p>\n\n<p>Each returned <code>git_index</code> object is independent and suffers no race\nconditions: synchronization is done at the FS level.</p>\n\n<p>Each returned <code>git_index</code> object must be manually freed by the user,\nusing <code>git_index_free</code>.</p>\n","group":"repository","examples":{"general.c":["ex/v0.14.0/general.html#git_repository_index-58"],"showindex.c":["ex/v0.14.0/showindex.html#git_repository_index-7"]}},"git_repository_free":{"type":"function","file":"repository.h","line":202,"lineto":202,"args":[{"name":"repo","type":"git_repository *","comment":"repository handle to close. If NULL nothing occurs."}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"void"},"description":"<p>Free a previously allocated repository</p>\n","comments":"<p>Note that after a repository is free&#39;d, all the objects it has spawned\nwill still exist until they are manually closed by the user\nwith <code>git_object_close</code>, but accessing any of the attributes of\nan object without a backing repository will result in undefined\nbehavior</p>\n","group":"repository","examples":{"general.c":["ex/v0.14.0/general.html#git_repository_free-59"],"showindex.c":["ex/v0.14.0/showindex.html#git_repository_free-8"]}},"git_repository_init":{"type":"function","file":"repository.h","line":219,"lineto":219,"args":[{"name":"repo_out","type":"git_repository **","comment":"pointer to the repo which will be created or reinitialized"},{"name":"path","type":"const char *","comment":"the path to the repository"},{"name":"is_bare","type":"unsigned","comment":"if true, a Git repository without a working directory is created at the pointed path. If false, provided path will be considered as the working directory into which the .git directory will be created."}],"argline":"git_repository **repo_out, const char *path, unsigned is_bare","sig":"git_repository **::const char *::unsigned","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Creates a new Git repository in the given folder.</p>\n","comments":"<p>TODO:\n- Reinit the repository\n- Create config files</p>\n","group":"repository"},"git_repository_head_detached":{"type":"function","file":"repository.h","line":231,"lineto":231,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"1 if HEAD is detached, 0 if i'ts not; error code if there was an error."},"description":"<p>Check if a repository&#39;s HEAD is detached</p>\n","comments":"<p>A repository&#39;s HEAD is detached when it points directly to a commit\ninstead of a branch.</p>\n","group":"repository"},"git_repository_head_orphan":{"type":"function","file":"repository.h","line":243,"lineto":243,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"1 if the current branch is an orphan, 0 if it's not; error code if therewas an error"},"description":"<p>Check if the current branch is an orphan</p>\n","comments":"<p>An orphan branch is one named from HEAD but which doesn&#39;t exist in\nthe refs namespace, because it doesn&#39;t have any commit to point to.</p>\n","group":"repository"},"git_repository_is_empty":{"type":"function","file":"repository.h","line":255,"lineto":255,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"1 if the repository is empty, 0 if it isn't, error code if the repository is corrupted"},"description":"<p>Check if a repository is empty</p>\n","comments":"<p>An empty repository has just been initialized and contains\nno commits.</p>\n","group":"repository"},"git_repository_path":{"type":"function","file":"repository.h","line":282,"lineto":282,"args":[{"name":"repo","type":"git_repository *","comment":"a repository object"},{"name":"id","type":"git_repository_pathid","comment":"The ID of the path to return"}],"argline":"git_repository *repo, git_repository_pathid id","sig":"git_repository *::git_repository_pathid","return":{"type":"const char *","comment":"absolute path of the requested id"},"description":"<p>Get one of the paths to the repository</p>\n","comments":"<p>Possible values for <code>id</code>:</p>\n\n<p>GIT_REPO_PATH: return the path to the repository\nGIT_REPO_PATH_INDEX: return the path to the index\nGIT_REPO_PATH_ODB: return the path to the ODB\nGIT_REPO_PATH_WORKDIR: return the path to the working\n    directory</p>\n","group":"repository"},"git_repository_is_bare":{"type":"function","file":"repository.h","line":290,"lineto":290,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"1 if the repository is empty, 0 otherwise."},"description":"<p>Check if a repository is bare</p>\n","comments":"","group":"repository"},"git_repository_config":{"type":"function","file":"repository.h","line":325,"lineto":328,"args":[{"name":"out","type":"git_config **","comment":"the repository's configuration"},{"name":"repo","type":"git_repository *","comment":"the repository for which to get the config"},{"name":"user_config_path","type":"const char *","comment":"Path to the user config file"},{"name":"system_config_path","type":"const char *","comment":"Path to the system-wide config file"}],"argline":"git_config **out,\n\tgit_repository *repo,\n\tconst char *user_config_path,\n\tconst char *system_config_path","sig":"git_config **::git_repository *::const char *::const char *","return":{"type":"int"},"description":"<p>Retrieve the relevant configuration for a repository</p>\n","comments":"<p>By default he returned <code>git_config</code> instance contains a single\nconfiguration file, the `.gitconfig&#39; file that may be found\ninside the repository.</p>\n\n<p>If the <code>user_config_path</code> variable is not NULL, the given config\nfile will be also included in the configuration set. On most UNIX\nsystems, this file may be found on <code>$HOME/.gitconfig</code>.</p>\n\n<p>If the <code>system_config_path</code> variable is not NULL, the given config\nfile will be also included in the configuration set. On most UNIX\nsystems, this file may be found on <code>$PREFIX/etc/gitconfig</code>.</p>\n\n<p>The resulting <code>git_config</code> instance will query the files in the following\norder:</p>\n\n<ul>\n<li>Repository configuration file</li>\n<li>User configuration file</li>\n<li>System configuration file</li>\n</ul>\n\n<p>The method will fail if any of the passed config files cannot be\nfound or accessed.</p>\n\n<p>The returned <code>git_config</code> instance is owned by the caller and must\nbe manually free&#39;d once it&#39;s no longer on use.</p>\n","group":"repository"},"git_revwalk_new":{"type":"function","file":"revwalk.h","line":88,"lineto":88,"args":[{"name":"walker","type":"git_revwalk **","comment":"pointer to the new revision walker"},{"name":"repo","type":"git_repository *","comment":"the repo to walk through"}],"argline":"git_revwalk **walker, git_repository *repo","sig":"git_revwalk **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Allocate a new revision walker to iterate through a repo.</p>\n","comments":"<p>This revision walker uses a custom memory pool and an internal\ncommit cache, so it is relatively expensive to allocate.</p>\n\n<p>For maximum performance, this revision walker should be\nreused for different walks.</p>\n\n<p>This revision walker is <em>not</em> thread safe: it may only be\nused to walk a repository on a single thread; however,\nit is possible to have several revision walkers in\nseveral different threads walking the same repository.</p>\n","group":"revwalk","examples":{"general.c":["ex/v0.14.0/general.html#git_revwalk_new-60"]}},"git_revwalk_reset":{"type":"function","file":"revwalk.h","line":103,"lineto":103,"args":[{"name":"walker","type":"git_revwalk *","comment":"handle to reset."}],"argline":"git_revwalk *walker","sig":"git_revwalk *","return":{"type":"void"},"description":"<p>Reset the revision walker for reuse.</p>\n","comments":"<p>This will clear all the pushed and hidden commits, and\nleave the walker in a blank state (just like at\ncreation) ready to receive new commit pushes and\nstart a new walk.</p>\n\n<p>The revision walk is automatically reset when a walk\nis over.</p>\n","group":"revwalk"},"git_revwalk_push":{"type":"function","file":"revwalk.h","line":120,"lineto":120,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"oid","type":"const git_oid *","comment":"the oid of the commit to start from."}],"argline":"git_revwalk *walk, const git_oid *oid","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Mark a commit to start traversal from.</p>\n","comments":"<p>The given OID must belong to a commit on the walked\nrepository.</p>\n\n<p>The given commit will be used as one of the roots\nwhen starting the revision walk. At least one commit\nmust be pushed the repository before a walk can\nbe started.</p>\n","group":"revwalk","examples":{"general.c":["ex/v0.14.0/general.html#git_revwalk_push-61"]}},"git_revwalk_hide":{"type":"function","file":"revwalk.h","line":136,"lineto":136,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"oid","type":"const git_oid *","comment":"the oid of commit that will be ignored during the traversal"}],"argline":"git_revwalk *walk, const git_oid *oid","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Mark a commit (and its ancestors) uninteresting for the output.</p>\n","comments":"<p>The given OID must belong to a commit on the walked\nrepository.</p>\n\n<p>The resolved commit and all its parents will be hidden from the\noutput on the revision walk.</p>\n","group":"revwalk"},"git_revwalk_next":{"type":"function","file":"revwalk.h","line":156,"lineto":156,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the oid of the next commit"},{"name":"walk","type":"git_revwalk *","comment":"the walker to pop the commit from."}],"argline":"git_oid *oid, git_revwalk *walk","sig":"git_oid *::git_revwalk *","return":{"type":"int","comment":"GIT_SUCCESS if the next commit was found; GIT_EREVWALKOVER if there are no commits left to iterate"},"description":"<p>Get the next commit from the revision walk.</p>\n","comments":"<p>The initial call to this method is <em>not</em> blocking when\niterating through a repo with a time-sorting mode.</p>\n\n<p>Iterating with Topological or inverted modes makes the initial\ncall blocking to preprocess the commit list, but this block should be\nmostly unnoticeable on most repositories (topological preprocessing\ntimes at 0.3s on the git.git repo).</p>\n\n<p>The revision walker is reset when the walk is over.</p>\n","group":"revwalk","examples":{"general.c":["ex/v0.14.0/general.html#git_revwalk_next-62"]}},"git_revwalk_sorting":{"type":"function","file":"revwalk.h","line":167,"lineto":167,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"sort_mode","type":"unsigned int","comment":"combination of GIT_SORT_XXX flags"}],"argline":"git_revwalk *walk, unsigned int sort_mode","sig":"git_revwalk *::unsigned int","return":{"type":"void"},"description":"<p>Change the sorting mode when iterating through the\nrepository&#39;s contents.</p>\n","comments":"<p>Changing the sorting mode resets the walker.</p>\n","group":"revwalk","examples":{"general.c":["ex/v0.14.0/general.html#git_revwalk_sorting-63"]}},"git_revwalk_free":{"type":"function","file":"revwalk.h","line":174,"lineto":174,"args":[{"name":"walk","type":"git_revwalk *","comment":"traversal handle to close. If NULL nothing occurs."}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"void"},"description":"<p>Free a revision walker previously allocated.</p>\n","comments":"","group":"revwalk","examples":{"general.c":["ex/v0.14.0/general.html#git_revwalk_free-64"]}},"git_revwalk_repository":{"type":"function","file":"revwalk.h","line":183,"lineto":183,"args":[{"name":"walk","type":"git_revwalk *","comment":"the revision walker"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"git_repository *","comment":"the repository being walked"},"description":"<p>Return the repository on which this walker\nis operating.</p>\n","comments":"","group":"revwalk"},"git_signature_new":{"type":"function","file":"signature.h","line":50,"lineto":50,"args":[{"name":"name","type":"const char *","comment":"name of the person"},{"name":"email","type":"const char *","comment":"email of the person"},{"name":"time","type":"git_time_t","comment":"time when the action happened"},{"name":"offset","type":"int","comment":"timezone offset in minutes for the time"}],"argline":"const char *name, const char *email, git_time_t time, int offset","sig":"const char *::const char *::git_time_t::int","return":{"type":"git_signature *","comment":"the new sig, NULL on out of memory"},"description":"<p>Create a new action signature. The signature must be freed\nmanually or using git_signature_free</p>\n","comments":"","group":"signature","examples":{"general.c":["ex/v0.14.0/general.html#git_signature_new-65","ex/v0.14.0/general.html#git_signature_new-66"]}},"git_signature_now":{"type":"function","file":"signature.h","line":60,"lineto":60,"args":[{"name":"name","type":"const char *","comment":"name of the person"},{"name":"email","type":"const char *","comment":"email of the person"}],"argline":"const char *name, const char *email","sig":"const char *::const char *","return":{"type":"git_signature *","comment":"the new sig, NULL on out of memory"},"description":"<p>Create a new action signature with a timestamp of &#39;now&#39;. The\nsignature must be freed manually or using git_signature_free</p>\n","comments":"","group":"signature"},"git_signature_dup":{"type":"function","file":"signature.h","line":70,"lineto":70,"args":[{"name":"sig","type":"const git_signature *","comment":"signature to duplicated"}],"argline":"const git_signature *sig","sig":"const git_signature *","return":{"type":"git_signature *","comment":"a copy of sig, NULL on out of memory"},"description":"<p>Create a copy of an existing signature.</p>\n","comments":"<p>All internal strings are also duplicated.</p>\n","group":"signature"},"git_signature_free":{"type":"function","file":"signature.h","line":77,"lineto":77,"args":[{"name":"sig","type":"git_signature *","comment":"signature to free"}],"argline":"git_signature *sig","sig":"git_signature *","return":{"type":"void"},"description":"<p>Free an existing signature</p>\n","comments":"","group":"signature"},"git_status_foreach":{"type":"function","file":"status.h","line":65,"lineto":65,"args":[{"name":"repo","type":"git_repository *","comment":"a repository object"},{"name":"callback","type":"int (*)(const char *, unsigned int, void *)","comment":"the function to call on each file"},{"name":"payload","type":"void *"}],"argline":"git_repository *repo, int (*callback)(const char *, unsigned int, void *), void *payload","sig":"git_repository *::int (*)(const char *, unsigned int, void *)::void *","return":{"type":"int","comment":"GIT_SUCCESS or the return value of the callback which did not return 0;"},"description":"<p>Gather file statuses and run a callback for each one.</p>\n","comments":"<p>The callback is passed the path of the file, the status and the data pointer\npassed to this function. If the callback returns something other than\nGIT_SUCCESS, this function will return that value.</p>\n","group":"status"},"git_status_file":{"type":"function","file":"status.h","line":75,"lineto":75,"args":[{"name":"status_flags","type":"unsigned int *","comment":"the status value"},{"name":"repo","type":"git_repository *","comment":"a repository object"},{"name":"path","type":"const char *","comment":"the file to retrieve status for, rooted at the repo's workdir"}],"argline":"unsigned int *status_flags, git_repository *repo, const char *path","sig":"unsigned int *::git_repository *::const char *","return":{"type":"int","comment":"GIT_SUCCESS"},"description":"<p>Get file status for a single file</p>\n","comments":"","group":"status"},"git_tag_lookup":{"type":"function","file":"tag.h","line":50,"lineto":53,"args":[{"name":"tag","type":"git_tag **","comment":"pointer to the looked up tag"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tag."},{"name":"id","type":"const git_oid *","comment":"identity of the tag to locate."}],"argline":"git_tag **tag, git_repository *repo, const git_oid *id","sig":"git_tag **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a tag object from the repository.</p>\n","comments":"","group":"tag","examples":{"general.c":["ex/v0.14.0/general.html#git_tag_lookup-67"]}},"git_tag_lookup_prefix":{"type":"function","file":"tag.h","line":67,"lineto":70,"args":[{"name":"tag","type":"git_tag **","comment":"pointer to the looked up tag"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tag."},{"name":"id","type":"const git_oid *","comment":"identity of the tag to locate."},{"name":"len","type":"unsigned int","comment":"the length of the short identifier"}],"argline":"git_tag **tag, git_repository *repo, const git_oid *id, unsigned int len","sig":"git_tag **::git_repository *::const git_oid *::unsigned int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a tag object from the repository,\ngiven a prefix of its identifier (short id).</p>\n","comments":"<p>@see git_object_lookup_prefix</p>\n","group":"tag"},"git_tag_close":{"type":"function","file":"tag.h","line":83,"lineto":86,"args":[{"name":"tag","type":"git_tag *","comment":"the tag to close"}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"void"},"description":"<p>Close an open tag</p>\n","comments":"<p>This is a wrapper around git_object_close()</p>\n\n<p>IMPORTANT:\nIt <em>is</em> necessary to call this method when you stop\nusing a tag. Failure to do so will cause a memory leak.</p>\n","group":"tag"},"git_tag_id":{"type":"function","file":"tag.h","line":96,"lineto":96,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const git_oid *","comment":"object identity for the tag."},"description":"<p>Get the id of a tag.</p>\n","comments":"","group":"tag"},"git_tag_target":{"type":"function","file":"tag.h","line":108,"lineto":108,"args":[{"name":"target","type":"git_object **","comment":"pointer where to store the target"},{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_object **target, git_tag *tag","sig":"git_object **::git_tag *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Get the tagged object of a tag</p>\n","comments":"<p>This method performs a repository lookup for the\ngiven object and returns it</p>\n","group":"tag","examples":{"general.c":["ex/v0.14.0/general.html#git_tag_target-68"]}},"git_tag_target_oid":{"type":"function","file":"tag.h","line":116,"lineto":116,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const git_oid *","comment":"pointer to the OID"},"description":"<p>Get the OID of the tagged object of a tag</p>\n","comments":"","group":"tag"},"git_tag_type":{"type":"function","file":"tag.h","line":124,"lineto":124,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"git_otype","comment":"type of the tagged object"},"description":"<p>Get the type of a tag&#39;s tagged object</p>\n","comments":"","group":"tag","examples":{"general.c":["ex/v0.14.0/general.html#git_tag_type-69"]}},"git_tag_name":{"type":"function","file":"tag.h","line":132,"lineto":132,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const char *","comment":"name of the tag"},"description":"<p>Get the name of a tag</p>\n","comments":"","group":"tag","examples":{"general.c":["ex/v0.14.0/general.html#git_tag_name-70"]}},"git_tag_tagger":{"type":"function","file":"tag.h","line":140,"lineto":140,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const git_signature *","comment":"reference to the tag's author"},"description":"<p>Get the tagger (author) of a tag</p>\n","comments":"","group":"tag"},"git_tag_message":{"type":"function","file":"tag.h","line":148,"lineto":148,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const char *","comment":"message of the tag"},"description":"<p>Get the message of a tag</p>\n","comments":"","group":"tag","examples":{"general.c":["ex/v0.14.0/general.html#git_tag_message-71"]}},"git_tag_create":{"type":"function","file":"tag.h","line":183,"lineto":190,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the newly created tag. If the tag already exists, this parameter will be the oid of the existing tag, and the function will return a GIT_EEXISTS error code."},{"name":"repo","type":"git_repository *","comment":"Repository where to store the tag"},{"name":"tag_name","type":"const char *","comment":"Name for the tag; this name is validated for consistency. It should also not conflict with an already existing tag name"},{"name":"target","type":"const git_object *","comment":"Object to which this tag points. This object must belong to the given `repo`."},{"name":"tagger","type":"const git_signature *","comment":"Signature of the tagger for this tag, and of the tagging time"},{"name":"message","type":"const char *","comment":"Full message for this tag"},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *tag_name,\n\t\tconst git_object *target,\n\t\tconst git_signature *tagger,\n\t\tconst char *message,\n\t\tint force","sig":"git_oid *::git_repository *::const char *::const git_object *::const git_signature *::const char *::int","return":{"type":"int","comment":"0 on success; error code otherwise. A tag object is written to the ODB, and a proper reference is written in the /refs/tags folder, pointing to it"},"description":"<p>Create a new tag in the repository from an object</p>\n","comments":"<p>A new reference will also be created pointing to\nthis tag object. If <code>force</code> is true and a reference\nalready exists with the given name, it&#39;ll be replaced.</p>\n","group":"tag"},"git_tag_create_frombuffer":{"type":"function","file":"tag.h","line":201,"lineto":205,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the newly created tag"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the tag"},{"name":"buffer","type":"const char *","comment":"Raw tag data"},{"name":"force","type":"int","comment":"Overwrite existing tags"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *buffer,\n\t\tint force","sig":"git_oid *::git_repository *::const char *::int","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"description":"<p>Create a new tag in the repository from a buffer</p>\n","comments":"","group":"tag"},"git_tag_create_lightweight":{"type":"function","file":"tag.h","line":234,"lineto":239,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the provided target object. If the tag already exists, this parameter will be filled with the oid of the existing pointed object and the function will return a GIT_EEXISTS error code."},{"name":"repo","type":"git_repository *","comment":"Repository where to store the lightweight tag"},{"name":"tag_name","type":"const char *","comment":"Name for the tag; this name is validated for consistency. It should also not conflict with an already existing tag name"},{"name":"target","type":"const git_object *","comment":"Object to which this tag points. This object must belong to the given `repo`."},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *tag_name,\n\t\tconst git_object *target,\n\t\tint force","sig":"git_oid *::git_repository *::const char *::const git_object *::int","return":{"type":"int","comment":"0 on success; error code otherwise. A proper reference is written in the /refs/tags folder, pointing to the provided target object"},"description":"<p>Create a new lightweight tag pointing at a target object</p>\n","comments":"<p>A new direct reference will be created pointing to\nthis target object. If <code>force</code> is true and a reference\nalready exists with the given name, it&#39;ll be replaced.</p>\n","group":"tag"},"git_tag_delete":{"type":"function","file":"tag.h","line":251,"lineto":253,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where lives the tag"},{"name":"tag_name","type":"const char *","comment":"Name of the tag to be deleted; this name is validated for consistency."}],"argline":"git_repository *repo,\n\t\tconst char *tag_name","sig":"git_repository *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise."},"description":"<p>Delete an existing tag reference.</p>\n","comments":"","group":"tag"},"git_tag_list":{"type":"function","file":"tag.h","line":268,"lineto":270,"args":[{"name":"tag_names","type":"git_strarray *","comment":"Pointer to a git_strarray structure where the tag names will be stored"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the tags"}],"argline":"git_strarray *tag_names,\n\t\tgit_repository *repo","sig":"git_strarray *::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Fill a list with all the tags in the Repository</p>\n","comments":"<p>The string array will be filled with the names of the\nmatching tags; these values are owned by the user and\nshould be free&#39;d manually when no longer needed, using\n<code>git_strarray_free</code>.</p>\n","group":"tag"},"git_tag_list_match":{"type":"function","file":"tag.h","line":290,"lineto":293,"args":[{"name":"tag_names","type":"git_strarray *","comment":"Pointer to a git_strarray structure where the tag names will be stored"},{"name":"pattern","type":"const char *","comment":"Standard fnmatch pattern"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the tags"}],"argline":"git_strarray *tag_names,\n\t\tconst char *pattern,\n\t\tgit_repository *repo","sig":"git_strarray *::const char *::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Fill a list with all the tags in the Repository\nwhich name match a defined pattern</p>\n","comments":"<p>If an empty pattern is provided, all the tags\nwill be returned.</p>\n\n<p>The string array will be filled with the names of the\nmatching tags; these values are owned by the user and\nshould be free&#39;d manually when no longer needed, using\n<code>git_strarray_free</code>.</p>\n","group":"tag"},"git_transport_new":{"type":"function","file":"transport.h","line":46,"lineto":54,"args":[{"name":"transport","type":"git_transport **"},{"name":"url","type":"const char *","comment":"the url of the repo"}],"argline":"git_transport **transport, const char *url","sig":"git_transport **::const char *","return":{"type":"int"},"description":"<p>Get the appropriate transport for an URL.\n@param tranport the transport for the url\n@param url the url of the repo</p>\n","comments":"","group":"transport"},"git_tree_lookup":{"type":"function","file":"tree.h","line":50,"lineto":53,"args":[{"name":"tree","type":"git_tree **","comment":"pointer to the looked up tree"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tree."},{"name":"id","type":"const git_oid *","comment":"identity of the tree to locate."}],"argline":"git_tree **tree, git_repository *repo, const git_oid *id","sig":"git_tree **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a tree object from the repository.</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.14.0/general.html#git_tree_lookup-72","ex/v0.14.0/general.html#git_tree_lookup-73"]}},"git_tree_lookup_prefix":{"type":"function","file":"tree.h","line":67,"lineto":70,"args":[{"name":"tree","type":"git_tree **","comment":"pointer to the looked up tree"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tree."},{"name":"id","type":"const git_oid *","comment":"identity of the tree to locate."},{"name":"len","type":"unsigned int","comment":"the length of the short identifier"}],"argline":"git_tree **tree, git_repository *repo, const git_oid *id, unsigned int len","sig":"git_tree **::git_repository *::const git_oid *::unsigned int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Lookup a tree object from the repository,\ngiven a prefix of its identifier (short id).</p>\n","comments":"<p>@see git_object_lookup_prefix</p>\n","group":"tree"},"git_tree_close":{"type":"function","file":"tree.h","line":83,"lineto":86,"args":[{"name":"tree","type":"git_tree *","comment":"the tree to close"}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"void"},"description":"<p>Close an open tree</p>\n","comments":"<p>This is a wrapper around git_object_close()</p>\n\n<p>IMPORTANT:\nIt <em>is</em> necessary to call this method when you stop\nusing a tree. Failure to do so will cause a memory leak.</p>\n","group":"tree"},"git_tree_id":{"type":"function","file":"tree.h","line":96,"lineto":96,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"const git_oid *","comment":"object identity for the tree."},"description":"<p>Get the id of a tree.</p>\n","comments":"","group":"tree"},"git_tree_entrycount":{"type":"function","file":"tree.h","line":104,"lineto":104,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"unsigned int","comment":"the number of entries in the tree"},"description":"<p>Get the number of entries listed in a tree</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.14.0/general.html#git_tree_entrycount-74"]}},"git_tree_entry_byname":{"type":"function","file":"tree.h","line":113,"lineto":113,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."},{"name":"filename","type":"const char *","comment":"the filename of the desired entry"}],"argline":"git_tree *tree, const char *filename","sig":"git_tree *::const char *","return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"<p>Lookup a tree entry by its filename</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.14.0/general.html#git_tree_entry_byname-75"]}},"git_tree_entry_byindex":{"type":"function","file":"tree.h","line":122,"lineto":122,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."},{"name":"idx","type":"unsigned int","comment":"the position in the entry list"}],"argline":"git_tree *tree, unsigned int idx","sig":"git_tree *::unsigned int","return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"<p>Lookup a tree entry by its position in the tree</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.14.0/general.html#git_tree_entry_byindex-76"]}},"git_tree_entry_attributes":{"type":"function","file":"tree.h","line":130,"lineto":130,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"unsigned int","comment":"attributes as an integer"},"description":"<p>Get the UNIX file attributes of a tree entry</p>\n","comments":"","group":"tree"},"git_tree_entry_name":{"type":"function","file":"tree.h","line":138,"lineto":138,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"const char *","comment":"the name of the file"},"description":"<p>Get the filename of a tree entry</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.14.0/general.html#git_tree_entry_name-77","ex/v0.14.0/general.html#git_tree_entry_name-78"]}},"git_tree_entry_id":{"type":"function","file":"tree.h","line":146,"lineto":146,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"const git_oid *","comment":"the oid of the object"},"description":"<p>Get the id of the object pointed by the entry</p>\n","comments":"","group":"tree"},"git_tree_entry_type":{"type":"function","file":"tree.h","line":154,"lineto":154,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"git_otype","comment":"the type of the pointed object"},"description":"<p>Get the type of the object pointed by the entry</p>\n","comments":"","group":"tree"},"git_tree_entry_2object":{"type":"function","file":"tree.h","line":164,"lineto":164,"args":[{"name":"object_out","type":"git_object **"},{"name":"repo","type":"git_repository *","comment":"repository where to lookup the pointed object"},{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"git_object **object_out, git_repository *repo, const git_tree_entry *entry","sig":"git_object **::git_repository *::const git_tree_entry *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Convert a tree entry to the git_object it points too.</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.14.0/general.html#git_tree_entry_2object-79"]}},"git_tree_create_fromindex":{"type":"function","file":"tree.h","line":182,"lineto":182,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the written tree"},{"name":"index","type":"git_index *","comment":"Index to write"}],"argline":"git_oid *oid, git_index *index","sig":"git_oid *::git_index *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Write a tree to the ODB from the index file</p>\n","comments":"<p>This method will scan the index and write a representation\nof its current state back to disk; it recursively creates\ntree objects for each of the subtrees stored in the index,\nbut only returns the OID of the root tree. This is the OID\nthat can be used e.g. to create a commit.</p>\n\n<p>The index instance cannot be bare, and needs to be associated\nto an existing repository.</p>\n","group":"tree"},"git_treebuilder_create":{"type":"function","file":"tree.h","line":201,"lineto":201,"args":[{"name":"builder_p","type":"git_treebuilder **","comment":"Pointer where to store the tree builder"},{"name":"source","type":"const git_tree *","comment":"Source tree to initialize the builder (optional)"}],"argline":"git_treebuilder **builder_p, const git_tree *source","sig":"git_treebuilder **::const git_tree *","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"description":"<p>Create a new tree builder.</p>\n","comments":"<p>The tree builder can be used to create or modify\ntrees in memory and write them as tree objects to the\ndatabase.</p>\n\n<p>If the <code>source</code> parameter is not NULL, the tree builder\nwill be initialized with the entries of the given tree.</p>\n\n<p>If the <code>source</code> parameter is NULL, the tree builder will\nhave no entries and will have to be filled manually.</p>\n","group":"treebuilder"},"git_treebuilder_clear":{"type":"function","file":"tree.h","line":208,"lineto":208,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Builder to clear"}],"argline":"git_treebuilder *bld","sig":"git_treebuilder *","return":{"type":"void"},"description":"<p>Clear all the entires in the builder</p>\n","comments":"","group":"treebuilder"},"git_treebuilder_free":{"type":"function","file":"tree.h","line":219,"lineto":219,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Builder to free"}],"argline":"git_treebuilder *bld","sig":"git_treebuilder *","return":{"type":"void"},"description":"<p>Free a tree builder</p>\n","comments":"<p>This will clear all the entries and free to builder.\nFailing to free the builder after you&#39;re done using it\nwill result in a memory leak</p>\n","group":"treebuilder"},"git_treebuilder_get":{"type":"function","file":"tree.h","line":231,"lineto":231,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Name of the entry"}],"argline":"git_treebuilder *bld, const char *filename","sig":"git_treebuilder *::const char *","return":{"type":"const git_tree_entry *","comment":"pointer to the entry; NULL if not found"},"description":"<p>Get an entry from the builder from its filename</p>\n","comments":"<p>The returned entry is owned by the builder and should\nnot be freed manually.</p>\n","group":"treebuilder"},"git_treebuilder_insert":{"type":"function","file":"tree.h","line":252,"lineto":252,"args":[{"name":"entry_out","type":"git_tree_entry **","comment":"Pointer to store the entry (optional)"},{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Filename of the entry"},{"name":"id","type":"const git_oid *","comment":"SHA1 oid of the entry"},{"name":"attributes","type":"unsigned int","comment":"Folder attributes of the entry"}],"argline":"git_tree_entry **entry_out, git_treebuilder *bld, const char *filename, const git_oid *id, unsigned int attributes","sig":"git_tree_entry **::git_treebuilder *::const char *::const git_oid *::unsigned int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Add or update an entry to the builder</p>\n","comments":"<p>Insert a new entry for <code>filename</code> in the builder with the\ngiven attributes.</p>\n\n<p>if an entry named <code>filename</code> already exists, its attributes\nwill be updated with the given ones.</p>\n\n<p>The optional pointer <code>entry_out</code> can be used to retrieve a\npointer to the newly created/updated entry.</p>\n","group":"treebuilder"},"git_treebuilder_remove":{"type":"function","file":"tree.h","line":260,"lineto":260,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Filename of the entry to remove"}],"argline":"git_treebuilder *bld, const char *filename","sig":"git_treebuilder *::const char *","return":{"type":"int"},"description":"<p>Remove an entry from the builder by its filename</p>\n","comments":"","group":"treebuilder"},"git_treebuilder_filter":{"type":"function","file":"tree.h","line":273,"lineto":273,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filter","type":"int (*)(const git_tree_entry *, void *)","comment":"Callback to filter entries"},{"name":"payload","type":"void *"}],"argline":"git_treebuilder *bld, int (*filter)(const git_tree_entry *, void *), void *payload","sig":"git_treebuilder *::int (*)(const git_tree_entry *, void *)::void *","return":{"type":"void"},"description":"<p>Filter the entries in the tree</p>\n","comments":"<p>The <code>filter</code> callback will be called for each entry\nin the tree with a pointer to the entry and the\nprovided <code>payload</code>: if the callback returns 1, the\nentry will be filtered (removed from the builder).</p>\n","group":"treebuilder"},"git_treebuilder_write":{"type":"function","file":"tree.h","line":287,"lineto":287,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the written OID"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the object"},{"name":"bld","type":"git_treebuilder *","comment":"Tree builder to write"}],"argline":"git_oid *oid, git_repository *repo, git_treebuilder *bld","sig":"git_oid *::git_repository *::git_treebuilder *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"<p>Write the contents of the tree builder as a tree object</p>\n","comments":"<p>The tree builder will be written to the given <code>repo</code>, and\nit&#39;s identifying SHA1 hash will be stored in the <code>oid</code>\npointer.</p>\n","group":"treebuilder"},"deflateBound":{"type":"function","file":"zlib.h","line":50,"lineto":54,"args":[{"name":"stream","type":"z_streamp","comment":"the stream pointer."},{"name":"s","type":"size_t","comment":"tream the stream pointer."}],"argline":"z_streamp stream, size_t s","sig":"z_streamp::size_t","return":{"type":"size_t","comment":"maximum length of the compressed data."},"description":"<p>deflateBound returns an upper bound on the compressed size.</p>\n","comments":"<p>This is a stub function used when zlib does not supply the\ndeflateBound() implementation itself.</p>\n","group":"zlib"}},"globals":{"GIT_BEGIN_DECL":{"value":"","file":"common.h","line":37,"comments":"Start declarations in C mode"},"GIT_END_DECL":{"value":"","file":"common.h","line":39,"comments":"End declarations in C mode"},"GIT_EXTERN(type)":{"value":"extern __attribute__((visibility(\"default\"))) type","file":"common.h","line":43,"comments":"Declare a public function exported for application use."},"GIT_EXTERN_TLS(type)":{"value":"extern __attribute__((visibility(\"default\"))) GIT_TLS type","file":"common.h","line":54,"comments":"Declare a public TLS symbol exported for application use."},"GIT_INLINE(type)":{"value":"static __inline type","file":"common.h","line":66,"comments":"Declare a function as always inlined."},"GIT_FORMAT_PRINTF(a,b)":{"value":"__attribute__((format (printf, a, b)))","file":"common.h","line":73,"comments":"Declare a function's takes printf style arguments."},"GIT_PATH_LIST_SEPARATOR":{"value":"';'","file":"common.h","line":98,"comments":"The separator used in path list strings (ie like in the PATH\nenvironment variable). A semi-colon \";\" is used on Windows, and\na colon \":\" for all other systems."},"GIT_PATH_MAX":{"value":"4096","file":"common.h","line":107,"comments":"The maximum length of a git valid git path."},"GIT_OID_RAWSZ":{"value":"20","file":"oid.h","line":41,"comments":"Size (in bytes) of a raw/binary oid"},"GIT_OID_HEXSZ":{"value":"(GIT_OID_RAWSZ * 2)","file":"oid.h","line":44,"comments":"Size (in bytes) of a hex formatted oid"},"GIT_OID_MINPREFIXLEN":{"value":"4","file":"oid.h","line":48,"comments":"Minimum length (in number of hex characters,\ni.e. packets of 4 bits) of an oid prefix"},"GIT_SORT_NONE":{"value":"(0)","file":"revwalk.h","line":47,"comments":"Sort the repository contents in no particular ordering;\nthis sorting is arbitrary, implementation-specific\nand subject to change at any time.\nThis is the default sorting for new walkers."},"GIT_SORT_TOPOLOGICAL":{"value":"(1 << 0)","file":"revwalk.h","line":54,"comments":"Sort the repository contents in topological order\n(parents before children); this sorting mode\ncan be combined with time sorting."},"GIT_SORT_TIME":{"value":"(1 << 1)","file":"revwalk.h","line":61,"comments":"Sort the repository contents by commit time;\nthis sorting mode can be combined with\ntopological sorting."},"GIT_SORT_REVERSE":{"value":"(1 << 2)","file":"revwalk.h","line":68,"comments":"Iterate through the repository contents in reverse\norder; this sorting mode can be combined with\nany of the above."}},"types":[["GIT_STATUS",{"type":"enum","file":"status.h","line":47,"lineto":52,"block":"GIT_STATUS_WT_NEW\nGIT_STATUS_WT_MODIFIED\nGIT_STATUS_WT_DELETED\nGIT_STATUS_IGNORED","tdef":null,"comments":"<p>Flags for worktree status</p>\n","used":{"returns":[],"needs":[]}}],["GIT_STATUS_INDEX",{"type":"enum","file":"status.h","line":42,"lineto":44,"block":"GIT_STATUS_INDEX_NEW\nGIT_STATUS_INDEX_MODIFIED\nGIT_STATUS_INDEX_DELETED","tdef":null,"comments":"<p>Flags for index status</p>\n","used":{"returns":[],"needs":[]}}],["git_blob",{"type":"struct","value":"git_blob","file":"types.h","line":121,"lineto":121,"block":"","tdef":"typedef","comments":"In-memory representation of a blob object.","used":{"returns":[],"needs":["git_blob_close","git_blob_lookup","git_blob_lookup_prefix","git_blob_rawcontent","git_blob_rawsize"]}}],["git_commit",{"type":"struct","value":"git_commit","file":"types.h","line":124,"lineto":124,"block":"","tdef":"typedef","comments":"Parsed representation of a commit object.","used":{"returns":[],"needs":["git_commit_author","git_commit_close","git_commit_committer","git_commit_create","git_commit_id","git_commit_lookup","git_commit_lookup_prefix","git_commit_message","git_commit_message_short","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]}}],["git_config",{"type":"struct","value":"git_config","file":"types.h","line":139,"lineto":139,"block":"","tdef":"typedef","comments":"Memory representation of a set of config files","used":{"returns":[],"needs":["git_config_add_file","git_config_add_file_ondisk","git_config_delete","git_config_foreach","git_config_free","git_config_get_bool","git_config_get_int","git_config_get_long","git_config_get_string","git_config_new","git_config_open_global","git_config_open_ondisk","git_config_set_bool","git_config_set_int","git_config_set_long","git_config_set_string","git_remote_get","git_repository_config"]}}],["git_config_file",{"type":"struct","value":"git_config_file","file":"types.h","line":142,"lineto":142,"block":"","tdef":"typedef","comments":"Interface to access a configuration file","used":{"returns":[],"needs":["git_config_add_file","git_config_file__ondisk"]}}],["git_headarray",{"type":"struct","value":"git_headarray","file":"net.h","line":62,"lineto":67,"block":"unsigned int len\nstruct git_remote_head **heads","tdef":null,"comments":"Array of remote heads","used":{"returns":[],"needs":["git_remote_ls"]}}],["git_index",{"type":"struct","value":"git_index","file":"types.h","line":136,"lineto":136,"block":"","tdef":"typedef","comments":"Memory representation of an index file.","used":{"returns":[],"needs":["git_index_add","git_index_add2","git_index_append","git_index_append2","git_index_clear","git_index_entrycount","git_index_entrycount_unmerged","git_index_find","git_index_free","git_index_get","git_index_get_unmerged_byindex","git_index_get_unmerged_bypath","git_index_open","git_index_read","git_index_remove","git_index_uniq","git_index_write","git_repository_index","git_tree_create_fromindex"]}}],["git_index_entry",{"type":"struct","value":"git_index_entry","file":"index.h","line":85,"lineto":102,"block":"git_index_time ctime\ngit_index_time mtime\nunsigned int dev\nunsigned int ino\nunsigned int mode\nunsigned int uid\nunsigned int gid\ngit_off_t file_size\ngit_oid oid\nunsigned short flags\nunsigned short flags_extended\nconst char *path","tdef":"typedef","comments":"Memory representation of a file entry in the index.","used":{"returns":["git_index_get"],"needs":["git_index_add2","git_index_append2","git_index_entry_stage"]}}],["git_index_entry_unmerged",{"type":"struct","value":"git_index_entry_unmerged","file":"index.h","line":105,"lineto":109,"block":"unsigned int mode[3]\ngit_oid oid[3]\nconst char *path","tdef":"typedef","comments":"Representation of an unmerged file entry in the index.","used":{"returns":["git_index_get_unmerged_byindex","git_index_get_unmerged_bypath"],"needs":[]}}],["git_index_time",{"type":"struct","value":"git_index_time","file":"index.h","line":78,"lineto":82,"block":"git_time_t seconds\nunsigned int nanoseconds","tdef":"typedef","comments":"Time used in a git index entry","used":{"returns":[],"needs":[]}}],["git_object",{"type":"struct","value":"git_object","file":"types.h","line":112,"lineto":112,"block":"","tdef":"typedef","comments":"Representation of a generic object in a repository","used":{"returns":[],"needs":["git_object_close","git_object_id","git_object_lookup","git_object_lookup_prefix","git_object_owner","git_object_type","git_tag_create","git_tag_create_lightweight","git_tag_target","git_tree_entry_2object"]}}],["git_odb",{"type":"struct","value":"git_odb","file":"types.h","line":94,"lineto":94,"block":"","tdef":"typedef","comments":"An open object database handle.","used":{"returns":["git_repository_database"],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_close","git_odb_exists","git_odb_new","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write","git_repository_open3"]}}],["git_odb_backend",{"type":"struct","value":"git_odb_backend","file":"types.h","line":97,"lineto":97,"block":"","tdef":"typedef","comments":"A custom backend in an ODB","used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend"]}}],["git_odb_object",{"type":"struct","value":"git_odb_object","file":"types.h","line":100,"lineto":100,"block":"","tdef":"typedef","comments":"An object read from the ODB","used":{"returns":[],"needs":["git_odb_object_close","git_odb_object_data","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_read","git_odb_read_prefix"]}}],["git_odb_stream",{"type":"struct","value":"git_odb_stream","file":"types.h","line":103,"lineto":103,"block":"","tdef":"typedef","comments":"A stream to read/write from the ODB","used":{"returns":[],"needs":["git_odb_open_rstream","git_odb_open_wstream"]}}],["git_odb_streammode",{"type":"enum","file":"odb_backend.h","line":107,"lineto":118,"block":"GIT_STREAM_RDONLY\nGIT_STREAM_WRONLY\nGIT_STREAM_RW","tdef":"typedef","comments":"<p>Streaming mode</p>\n","used":{"returns":[],"needs":[]}}],["git_oid",{"type":"struct","value":"git_oid","file":"oid.h","line":51,"lineto":54,"block":"unsigned char id[GIT_OID_RAWSZ]","tdef":"typedef","comments":"Unique identity of any object (commit, tree, blob, tag).","used":{"returns":["git_commit_id","git_commit_parent_oid","git_commit_tree_oid","git_object_id","git_odb_object_id","git_reference_oid","git_tag_id","git_tag_target_oid","git_tree_entry_id","git_tree_id"],"needs":["git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_blob_lookup_prefix","git_commit_create","git_commit_create_v","git_commit_lookup","git_commit_lookup_prefix","git_object_lookup","git_object_lookup_prefix","git_odb_exists","git_odb_hash","git_odb_hashfile","git_odb_open_rstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write","git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_fromraw","git_oid_fromstr","git_oid_fromstrn","git_oid_ncmp","git_oid_pathfmt","git_oid_to_string","git_reference_create_oid","git_reference_set_oid","git_reflog_write","git_revwalk_hide","git_revwalk_next","git_revwalk_push","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_lookup","git_tag_lookup_prefix","git_tree_create_fromindex","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_insert","git_treebuilder_write"]}}],["git_oid_shorten",{"type":"struct","value":"git_oid_shorten","file":"oid.h","line":172,"lineto":172,"block":"","tdef":"typedef","comments":"OID Shortener object","used":{"returns":["git_oid_shorten_new"],"needs":["git_oid_shorten_add","git_oid_shorten_free"]}}],["git_otype",{"type":"enum","file":"types.h","line":80,"lineto":91,"block":"GIT_OBJ_ANY\nGIT_OBJ_BAD\nGIT_OBJ__EXT1\nGIT_OBJ_COMMIT\nGIT_OBJ_TREE\nGIT_OBJ_BLOB\nGIT_OBJ_TAG\nGIT_OBJ__EXT2\nGIT_OBJ_OFS_DELTA\nGIT_OBJ_REF_DELTA","tdef":"typedef","comments":"<p>Basic type (loose or packed) of any Git object.</p>\n","used":{"returns":[],"needs":["git_object__size","git_object_lookup","git_object_lookup_prefix","git_object_type2string","git_object_typeisloose","git_odb_hash","git_odb_hashfile","git_odb_open_wstream","git_odb_read_header","git_odb_write"]}}],["git_reference",{"type":"struct","value":"git_reference","file":"types.h","line":164,"lineto":164,"block":"","tdef":"typedef","comments":"In-memory representation of a reference.","used":{"returns":[],"needs":["git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type","git_reflog_read","git_reflog_write"]}}],["git_reflog",{"type":"struct","value":"git_reflog","file":"types.h","line":148,"lineto":148,"block":"","tdef":"typedef","comments":"Representation of a reference log","used":{"returns":[],"needs":["git_reflog_entry_byindex","git_reflog_entrycount","git_reflog_free","git_reflog_read"]}}],["git_reflog_entry",{"type":"struct","value":"git_reflog_entry","file":"types.h","line":145,"lineto":145,"block":"","tdef":"typedef","comments":"Representation of a reference log entry","used":{"returns":["git_reflog_entry_byindex"],"needs":["git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_entry_oidnew","git_reflog_entry_oidold"]}}],["git_remote_head",{"type":"struct","value":"git_remote_head","file":"net.h","line":54,"lineto":57,"block":"git_oid oid\nchar *name","tdef":null,"comments":"Remote head description, given out on `ls` calls.","used":{"returns":[],"needs":[]}}],["git_repository",{"type":"struct","value":"git_repository","file":"types.h","line":109,"lineto":109,"block":"","tdef":"typedef","comments":"Representation of an existing git repository,\nincluding all its object contents","used":{"returns":["git_object_owner","git_reference_owner","git_revwalk_repository"],"needs":["git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_blob_lookup_prefix","git_commit_create","git_commit_create_v","git_commit_lookup","git_commit_lookup_prefix","git_object_lookup","git_object_lookup_prefix","git_reference_create_oid","git_reference_create_symbolic","git_reference_foreach","git_reference_listall","git_reference_lookup","git_reference_packall","git_repository_config","git_repository_database","git_repository_free","git_repository_head_detached","git_repository_head_orphan","git_repository_index","git_repository_init","git_repository_is_bare","git_repository_is_empty","git_repository_open","git_repository_open2","git_repository_open3","git_repository_path","git_revwalk_new","git_status_file","git_status_foreach","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_list","git_tag_list_match","git_tag_lookup","git_tag_lookup_prefix","git_tree_entry_2object","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_write"]}}],["git_repository_pathid",{"type":"enum","file":"repository.h","line":260,"lineto":265,"block":"GIT_REPO_PATH\nGIT_REPO_PATH_INDEX\nGIT_REPO_PATH_ODB\nGIT_REPO_PATH_WORKDIR","tdef":"typedef","comments":"<p>Internal path identifiers for a repository</p>\n","used":{"returns":[],"needs":["git_repository_path"]}}],["git_revwalk",{"type":"struct","value":"git_revwalk","file":"types.h","line":115,"lineto":115,"block":"","tdef":"typedef","comments":"Representation of an in-progress walk through the commits in a repo","used":{"returns":[],"needs":["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]}}],["git_rtype",{"type":"enum","file":"types.h","line":167,"lineto":178,"block":"GIT_REF_INVALID\nGIT_REF_OID\nGIT_REF_SYMBOLIC\nGIT_REF_PACKED\nGIT_REF_HAS_PEEL\nGIT_REF_LISTALL","tdef":"typedef","comments":"<p>Basic type of any Git reference.</p>\n","used":{"returns":[],"needs":[]}}],["git_signature",{"type":"struct","value":"git_signature","file":"types.h","line":157,"lineto":161,"block":"char *name\nchar *email\ngit_time when","tdef":"typedef","comments":"An action signature (e.g. for committers, taggers, etc)","used":{"returns":["git_commit_author","git_commit_committer","git_reflog_entry_committer","git_signature_dup","git_signature_new","git_signature_now","git_tag_tagger"],"needs":["git_commit_create","git_commit_create_v","git_reflog_write","git_signature_dup","git_signature_free","git_tag_create"]}}],["git_tag",{"type":"struct","value":"git_tag","file":"types.h","line":118,"lineto":118,"block":"","tdef":"typedef","comments":"Parsed representation of a tag object.","used":{"returns":[],"needs":["git_tag_close","git_tag_id","git_tag_lookup","git_tag_lookup_prefix","git_tag_message","git_tag_name","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]}}],["git_time",{"type":"struct","value":"git_time","file":"types.h","line":151,"lineto":154,"block":"git_time_t time\nint offset","tdef":"typedef","comments":"Time in a signature","used":{"returns":[],"needs":[]}}],["git_transport",{"type":"struct","value":"git_transport","file":"types.h","line":181,"lineto":186,"block":"","tdef":"typedef","comments":"A transport to use","used":{"returns":[],"needs":["git_transport_new"]}}],["git_tree",{"type":"struct","value":"git_tree","file":"types.h","line":130,"lineto":130,"block":"","tdef":"typedef","comments":"Representation of a tree object.","used":{"returns":[],"needs":["git_commit_create","git_commit_create_v","git_commit_tree","git_tree_close","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_create"]}}],["git_tree_entry",{"type":"struct","value":"git_tree_entry","file":"types.h","line":127,"lineto":127,"block":"","tdef":"typedef","comments":"Representation of each one of the entries in a tree object.","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname","git_treebuilder_get"],"needs":["git_tree_entry_2object","git_tree_entry_attributes","git_tree_entry_id","git_tree_entry_name","git_tree_entry_type","git_treebuilder_filter","git_treebuilder_insert"]}}],["git_treebuilder",{"type":"struct","value":"git_treebuilder","file":"types.h","line":133,"lineto":133,"block":"","tdef":"typedef","comments":"Constructor for in-memory trees","used":{"returns":[],"needs":["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]}}]],"prefix":"include/git2","groups":[["blob",["git_blob_close","git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_blob_lookup_prefix","git_blob_rawcontent","git_blob_rawsize"]],["commit",["git_commit_author","git_commit_close","git_commit_committer","git_commit_create","git_commit_create_v","git_commit_id","git_commit_lookup","git_commit_lookup_prefix","git_commit_message","git_commit_message_short","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]],["config",["git_config_add_file","git_config_add_file_ondisk","git_config_delete","git_config_file__ondisk","git_config_find_global","git_config_foreach","git_config_free","git_config_get_bool","git_config_get_int","git_config_get_long","git_config_get_string","git_config_new","git_config_open_global","git_config_open_ondisk","git_config_set_bool","git_config_set_int","git_config_set_long","git_config_set_string"]],["errors",["git_clearerror","git_lasterror","git_strerror"]],["index",["git_index_add","git_index_add2","git_index_append","git_index_append2","git_index_clear","git_index_entry_stage","git_index_entrycount","git_index_entrycount_unmerged","git_index_find","git_index_free","git_index_get","git_index_get_unmerged_byindex","git_index_get_unmerged_bypath","git_index_open","git_index_read","git_index_remove","git_index_uniq","git_index_write"]],["libgit2",["git_libgit2_version"]],["object",["git_object__size","git_object_close","git_object_id","git_object_lookup","git_object_lookup_prefix","git_object_owner","git_object_string2type","git_object_type","git_object_type2string","git_object_typeisloose"]],["odb",["git_odb_add_alternate","git_odb_add_backend","git_odb_close","git_odb_exists","git_odb_hash","git_odb_hashfile","git_odb_new","git_odb_object_close","git_odb_object_data","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_fromraw","git_oid_fromstr","git_oid_fromstrn","git_oid_ncmp","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_shorten_new","git_oid_to_string"]],["reference",["git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_foreach","git_reference_listall","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_packall","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]],["reflog",["git_reflog_entry_byindex","git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_entry_oidnew","git_reflog_entry_oidold","git_reflog_entrycount","git_reflog_free","git_reflog_read","git_reflog_write"]],["refspec",["git_refspec_dst","git_refspec_src","git_refspec_src_match","git_refspec_transform"]],["remote",["git_remote_connect","git_remote_fetchspec","git_remote_free","git_remote_get","git_remote_ls","git_remote_name","git_remote_pushspec","git_remote_url"]],["repository",["git_repository_config","git_repository_database","git_repository_discover","git_repository_free","git_repository_head_detached","git_repository_head_orphan","git_repository_index","git_repository_init","git_repository_is_bare","git_repository_is_empty","git_repository_open","git_repository_open2","git_repository_open3","git_repository_path"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["signature",["git_signature_dup","git_signature_free","git_signature_new","git_signature_now"]],["status",["git_status_file","git_status_foreach"]],["tag",["git_tag_close","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_id","git_tag_list","git_tag_list_match","git_tag_lookup","git_tag_lookup_prefix","git_tag_message","git_tag_name","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]],["transport",["git_transport_new"]],["tree",["git_tree_close","git_tree_create_fromindex","git_tree_entry_2object","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entry_type","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_lookup_prefix"]],["treebuilder",["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]],["zlib",["deflateBound"]]],"examples":[["general.c","ex/v0.14.0/general.html"],["showindex.c","ex/v0.14.0/showindex.html"]]}