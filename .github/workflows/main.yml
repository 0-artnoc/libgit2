name: Containerization

on:
  push:
    branches: [ master, maint/* ]
  pull_request:
    branches: [ master, maint/* ]

jobs:
  # Build the docker container images that we will use for our Linux builds.  This will
  # identify the last commit to the repository that updated the docker images, and try
  # to download the image tagged with that sha.  If it does not exist, we'll do a docker
  # build and push the image up to GitHub Packages for the actual CI/CD runs.  We tag
  # with both the sha and "latest" so that the subsequent runs need not know the sha.
  build_containers:
    strategy:
      matrix:
        container:
        - { name: xenial, base: 'ubuntu:xenial' }
        - { name: bionic, base: 'ubuntu:bionic' }
    env:
      docker-config-path: azure-pipelines/docker
    name: Build docker image
    runs-on: ubuntu-latest    
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Calculate image label
      run: |
        echo "::set-env name=docker-container::${{ github.repository }}/${{ matrix.container.name }}"        
        echo "::set-env name=docker-container-url::docker.pkg.github.com/${{ env.docker-container }}"
        echo "::set-env name=docker-sha-tag::test3-$(git log -1 --pretty=format:"%h" -- ${{ env.docker-config-path }})"
    - name: Download existing image
      run: |
        docker login https://docker.pkg.github.com -u ${{github.actor}} -p ${{github.token}}

        echo "::set-env name=docker-container-exists::true"
        docker pull ${{ env.docker-container-url }}:${{ env.docker-sha-tag }} || echo "::set-env name=docker-container-exists::false"
    - name: Build and publish image
      run: |
        echo hi
      working-directory: ${{ env.docker-config-path }}
      if: env.docker-container-exists != 'true'
        
#        docker build -t ${{ env.docker-container-url }}:${{ env.docker-sha-tag }} --build-arg BASE=${{ matrix.container.base }} -f ${{ matrix.container.name }} .
#        docker tag ${{ env.docker-container-url }}:${{ env.docker-sha-tag }} ${{ env.docker-container-url }}:latest
#        docker push ${{ docker.container-url }}:${{ env.docker-sha-tag }}
#        docker push ${{ docker.container-url }}:latest
