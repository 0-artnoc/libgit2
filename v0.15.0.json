{"prefix":"include/git2","functions":{"git_treebuilder_insert":{"file":"tree.h","sig":"git_tree_entry **::git_treebuilder *::const char *::const git_oid *::unsigned int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Add or update an entry to the builder","group":"treebuilder","argline":"git_tree_entry **entry_out, git_treebuilder *bld, const char *filename, const git_oid *id, unsigned int attributes","comments":"Insert a new entry for `filename` in the builder with the\n given attributes.\n\n if an entry named `filename` already exists, its attributes\n will be updated with the given ones.\n\n The optional pointer `entry_out` can be used to retrieve a\n pointer to the newly created/updated entry.","lineto":234,"args":[{"type":"git_tree_entry **","name":"entry_out","comment":"Pointer to store the entry (optional)"},{"type":"git_treebuilder *","name":"bld","comment":"Tree builder"},{"type":"const char *","name":"filename","comment":"Filename of the entry"},{"type":"const git_oid *","name":"id","comment":"SHA1 oid of the entry"},{"type":"unsigned int","name":"attributes","comment":"Folder attributes of the entry"}],"rawComments":"\n Add or update an entry to the builder\n\n Insert a new entry for `filename` in the builder with the\n given attributes.\n\n if an entry named `filename` already exists, its attributes\n will be updated with the given ones.\n\n The optional pointer `entry_out` can be used to retrieve a\n pointer to the newly created/updated entry.\n\n @param entry_out Pointer to store the entry (optional)\n @param bld Tree builder\n @param filename Filename of the entry\n @param id SHA1 oid of the entry\n @param attributes Folder attributes of the entry\n @return GIT_SUCCESS or an error code\n\n","line":215},"git_reflog_free":{"file":"reflog.h","sig":"git_reflog *","return":{"type":"void","comment":""},"description":"Free the reflog","group":"reflog","argline":"git_reflog *reflog","comments":"","lineto":107,"args":[{"type":"git_reflog *","name":"reflog","comment":"reflog to free"}],"rawComments":"\n Free the reflog\n\n @param reflog reflog to free\n\n","line":102},"git_repository_config_autoload":{"file":"repository.h","sig":"git_config **::git_repository *","return":{"type":"int","comment":""},"description":"Automatically load the configuration files","group":"repository","argline":"git_config **out, git_repository *repo","comments":"A wrapper around `git_repository_config` that tries to guess where\n the global and system config files are located. No error is\n reported if either of these files are missing at the guessed\n locations.","lineto":330,"args":[{"type":"git_config **","name":"out","comment":"the repository's configuration"},{"type":"git_repository *","name":"repo","comment":"the repository for which to get the config"}],"rawComments":"\n Automatically load the configuration files\n\n A wrapper around `git_repository_config` that tries to guess where\n the global and system config files are located. No error is\n reported if either of these files are missing at the guessed\n locations.\n\n @param out the repository's configuration\n @param repo the repository for which to get the config\n\n","line":317},"git_remote_name":{"file":"remote.h","sig":"struct git_remote *","return":{"type":"const char *","comment":"a pointer to the name"},"description":"Get the remote's name","group":"remote","argline":"struct git_remote *remote","comments":"","lineto":58,"args":[{"type":"struct git_remote *","name":"remote","comment":"the remote"}],"rawComments":"\n Get the remote's name\n\n @param remote the remote\n @return a pointer to the name\n\n","line":52},"git_tag_close":{"file":"tag.h","sig":"git_tag *","return":{"type":"void","comment":""},"description":"Close an open tag","group":"tag","argline":"git_tag *tag","comments":"This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tag. Failure to do so will cause a memory leak.","lineto":69,"args":[{"type":"git_tag *","name":"tag","comment":"the tag to close"}],"rawComments":"\n Close an open tag\n\n This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tag. Failure to do so will cause a memory leak.\n\n @param tag the tag to close\n\n","line":54},"git_treebuilder_write":{"file":"tree.h","sig":"git_oid *::git_repository *::git_treebuilder *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Write the contents of the tree builder as a tree object","group":"treebuilder","argline":"git_oid *oid, git_repository *repo, git_treebuilder *bld","comments":"The tree builder will be written to the given `repo`, and\n it's identifying SHA1 hash will be stored in the `oid`\n pointer.","lineto":269,"args":[{"type":"git_oid *","name":"oid","comment":"Pointer where to store the written OID"},{"type":"git_repository *","name":"repo","comment":"Repository where to store the object"},{"type":"git_treebuilder *","name":"bld","comment":"Tree builder to write"}],"rawComments":"\n Write the contents of the tree builder as a tree object\n\n The tree builder will be written to the given `repo`, and\n it's identifying SHA1 hash will be stored in the `oid`\n pointer.\n\n @param oid Pointer where to store the written OID\n @param repo Repository where to store the object\n @param bld Tree builder to write\n @return GIT_SUCCESS or an error code\n\n","line":257},"git_tree_entry_attributes":{"file":"tree.h","sig":"const git_tree_entry *","return":{"type":"unsigned int","comment":"attributes as an integer"},"description":"Get the UNIX file attributes of a tree entry","group":"tree","argline":"const git_tree_entry *entry","comments":"","lineto":112,"args":[{"type":"const git_tree_entry *","name":"entry","comment":"a tree entry"}],"rawComments":"\n Get the UNIX file attributes of a tree entry\n\n @param entry a tree entry\n @return attributes as an integer\n\n","line":106},"git_config_foreach":{"file":"config.h","sig":"git_config *::int(*)(const char *var_name, const char *value, void *payload)::void *","return":{"type":"int","comment":"GIT_SUCCESS or the return value of the callback which didn't return 0"},"description":"Perform an operation on each config variable.","group":"config","argline":"git_config *cfg, int (*callback)(const char *var_name, const char *value, void *payload), void *payload","comments":"The callback receives the normalized name and value of each variable\n in the config backend, and the data pointer passed to this function.\n As soon as one of the callback functions returns something other than 0,\n this function returns that value.","lineto":274,"args":[{"type":"git_config *","name":"cfg","comment":"where to get the variables from"},{"type":"int(*)(const char *var_name, const char *value, void *payload)","name":"callback","comment":"the function to call on each variable"},{"type":"void *","name":"payload","comment":"the data to pass to the callback"}],"rawComments":"\n Perform an operation on each config variable.\n\n The callback receives the normalized name and value of each variable\n in the config backend, and the data pointer passed to this function.\n As soon as one of the callback functions returns something other than 0,\n this function returns that value.\n\n @param cfg where to get the variables from\n @param callback the function to call on each variable\n @param payload the data to pass to the callback\n @return GIT_SUCCESS or the return value of the callback which didn't return 0\n\n","line":258},"git_config_set_string":{"file":"config.h","sig":"git_config *::const char *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Set the value of a string config variable.","group":"config","argline":"git_config *cfg, const char *name, const char *value","comments":"A copy of the string is made and the user is free to use it\n afterwards.","lineto":248,"args":[{"type":"git_config *","name":"cfg","comment":"where to look for the variable"},{"type":"const char *","name":"name","comment":"the variable's name"},{"type":"const char *","name":"value","comment":"the string to store."}],"rawComments":"\n Set the value of a string config variable.\n\n A copy of the string is made and the user is free to use it\n afterwards.\n\n @param cfg where to look for the variable\n @param name the variable's name\n @param value the string to store.\n @return GIT_SUCCESS or an error code\n\n","line":237},"git_commit_parentcount":{"file":"commit.h","sig":"git_commit *","return":{"type":"unsigned int","comment":"integer of count of parents"},"description":"Get the number of parents of this commit","group":"commit","argline":"git_commit *commit","comments":"","lineto":158,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the number of parents of this commit\n\n @param commit a previously loaded commit.\n @return integer of count of parents\n\n","line":152,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_parentcount-1"]}},"git_tag_delete":{"file":"tag.h","sig":"git_repository *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Delete an existing tag reference.","group":"tag","argline":"git_repository *repo, const char *tag_name","comments":"","lineto":235,"args":[{"type":"git_repository *","name":"repo","comment":"Repository where lives the tag"},{"type":"const char *","name":"tag_name","comment":"Name of the tag to be deleted;  this name is validated for consistency."}],"rawComments":"\n Delete an existing tag reference.\n\n @param repo Repository where lives the tag\n\n @param tag_name Name of the tag to be deleted;\n this name is validated for consistency.\n\n @return GIT_SUCCESS or an error code\n\n","line":223},"git_reference_create_oid":{"file":"refs.h","sig":"git_reference **::git_repository *::const char *::const git_oid *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new object id reference.","group":"reference","argline":"git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id, int force","comments":"The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n If `force` is true and there already exists a reference\n with the same name, it will be overwritten.","lineto":76,"args":[{"type":"git_reference **","name":"ref_out","comment":"Pointer to the newly created reference"},{"type":"git_repository *","name":"repo","comment":"Repository where that reference will live"},{"type":"const char *","name":"name","comment":"The name of the reference"},{"type":"const git_oid *","name":"id","comment":"The object id pointed to by the reference."},{"type":"int","name":"force","comment":"Overwrite existing references"}],"rawComments":"\n Create a new object id reference.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n If `force` is true and there already exists a reference\n with the same name, it will be overwritten.\n\n @param ref_out Pointer to the newly created reference\n @param repo Repository where that reference will live\n @param name The name of the reference\n @param id The object id pointed to by the reference.\n @param force Overwrite existing references\n @return GIT_SUCCESS or an error code\n\n","line":57},"git_tree_lookup":{"file":"tree.h","sig":"git_tree **::git_repository *::const git_oid *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a tree object from the repository.","group":"tree","argline":"git_tree **tree, git_repository *repo, const git_oid *id","comments":"","lineto":35,"args":[{"type":"git_tree **","name":"tree","comment":"pointer to the looked up tree"},{"type":"git_repository *","name":"repo","comment":"the repo to use when locating the tree."},{"type":"const git_oid *","name":"id","comment":"identity of the tree to locate."}],"rawComments":"\n Lookup a tree object from the repository.\n\n @param tree pointer to the looked up tree\n @param repo the repo to use when locating the tree.\n @param id identity of the tree to locate.\n @return GIT_SUCCESS or an error code\n\n","line":24,"examples":{"general.c":["ex/v0.15.0/general.html#git_tree_lookup-2","ex/v0.15.0/general.html#git_tree_lookup-3"]}},"git_commit_message_encoding":{"file":"commit.h","sig":"git_commit *","return":{"type":"const char *","comment":"NULL, or the encoding"},"description":"Get the encoding for the message of a commit, as a string representing a standard encoding name.","group":"commit","argline":"git_commit *commit","comments":"The encoding may be NULL if the `encoding` header\n in the commit is missing; in that case UTF-8 is assumed.","lineto":91,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the encoding for the message of a commit,\n as a string representing a standard encoding name.\n\n The encoding may be NULL if the `encoding` header\n in the commit is missing; in that case UTF-8 is assumed.\n\n @param commit a previously loaded commit.\n @return NULL, or the encoding\n\n","line":81},"git_odb_open":{"file":"odb.h","sig":"git_odb **::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new object database and automatically add the two default backends:","group":"odb","argline":"git_odb **out, const char *objects_dir","comments":"- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder\n\n\t- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data","lineto":52,"args":[{"type":"git_odb **","name":"out","comment":"location to store the database pointer, if opened.    Set to NULL if the open failed."},{"type":"const char *","name":"objects_dir","comment":"path of the backends' \"objects\" directory."}],"rawComments":"\n Create a new object database and automatically add\n the two default backends:\n\n\t- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder\n\n\t- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data\n\n @param out location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed.\n @param objects_dir path of the backends' \"objects\" directory.\n @return GIT_SUCCESS or an error code\n\n","line":36},"git_reference_set_target":{"file":"refs.h","sig":"git_reference *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Set the symbolic target of a reference.","group":"reference","argline":"git_reference *ref, const char *target","comments":"The reference must be a symbolic reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.","lineto":152,"args":[{"type":"git_reference *","name":"ref","comment":"The reference"},{"type":"const char *","name":"target","comment":"The new target for the reference"}],"rawComments":"\n Set the symbolic target of a reference.\n\n The reference must be a symbolic reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.\n\n @param ref The reference\n @param target The new target for the reference\n @return GIT_SUCCESS or an error code\n\n","line":139},"git_commit_message":{"file":"commit.h","sig":"git_commit *","return":{"type":"const char *","comment":"the message of a commit"},"description":"Get the full message of a commit.","group":"commit","argline":"git_commit *commit","comments":"","lineto":99,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the full message of a commit.\n\n @param commit a previously loaded commit.\n @return the message of a commit\n\n","line":93,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_message-4","ex/v0.15.0/general.html#git_commit_message-5"]}},"git_treebuilder_create":{"file":"tree.h","sig":"git_treebuilder **::const git_tree *","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"description":"Create a new tree builder.","group":"treebuilder","argline":"git_treebuilder **builder_p, const git_tree *source","comments":"The tree builder can be used to create or modify\n trees in memory and write them as tree objects to the\n database.\n\n If the `source` parameter is not NULL, the tree builder\n will be initialized with the entries of the given tree.\n\n If the `source` parameter is NULL, the tree builder will\n have no entries and will have to be filled manually.","lineto":183,"args":[{"type":"git_treebuilder **","name":"builder_p","comment":"Pointer where to store the tree builder"},{"type":"const git_tree *","name":"source","comment":"Source tree to initialize the builder (optional)"}],"rawComments":"\n Create a new tree builder.\n\n The tree builder can be used to create or modify\n trees in memory and write them as tree objects to the\n database.\n\n If the `source` parameter is not NULL, the tree builder\n will be initialized with the entries of the given tree.\n\n If the `source` parameter is NULL, the tree builder will\n have no entries and will have to be filled manually.\n\n @param builder_p Pointer where to store the tree builder\n @param source Source tree to initialize the builder (optional)\n @return 0 on sucess; error code otherwise\n\n","line":166},"git_config_get_string":{"file":"config.h","sig":"git_config *::const char *::const char **","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Get the value of a string config variable.","group":"config","argline":"git_config *cfg, const char *name, const char **out","comments":"The string is owned by the variable and should not be freed by the\n user.","lineto":205,"args":[{"type":"git_config *","name":"cfg","comment":"where to look for the variable"},{"type":"const char *","name":"name","comment":"the variable's name"},{"type":"const char **","name":"out","comment":"pointer to the variable's value"}],"rawComments":"\n Get the value of a string config variable.\n\n The string is owned by the variable and should not be freed by the\n user.\n\n @param cfg where to look for the variable\n @param name the variable's name\n @param out pointer to the variable's value\n @return GIT_SUCCESS or an error code\n\n","line":194,"examples":{"general.c":["ex/v0.15.0/general.html#git_config_get_string-6"]}},"git_config_open_global":{"file":"config.h","sig":"git_config **","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Open the global configuration file","group":"config","argline":"git_config **out","comments":"Utility wrapper that calls `git_config_find_global`\n and opens the located file, if it exists.","lineto":75,"args":[{"type":"git_config **","name":"out","comment":"Pointer to store the config instance"}],"rawComments":"\n Open the global configuration file\n\n Utility wrapper that calls `git_config_find_global`\n and opens the located file, if it exists.\n\n @param out Pointer to store the config instance\n @return GIT_SUCCESS or an error code\n\n","line":66},"git_commit_time_offset":{"file":"commit.h","sig":"git_commit *","return":{"type":"int","comment":"positive or negative timezone offset, in minutes from UTC"},"description":"Get the commit timezone offset (i.e. committer's preferred timezone) of a commit.","group":"commit","argline":"git_commit *commit","comments":"","lineto":115,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the commit timezone offset (i.e. committer's preferred timezone) of a commit.\n\n @param commit a previously loaded commit.\n @return positive or negative timezone offset, in minutes from UTC\n\n","line":109},"git_revwalk_free":{"file":"revwalk.h","sig":"git_revwalk *","return":{"type":"void","comment":""},"description":"Free a revision walker previously allocated.","group":"revwalk","argline":"git_revwalk *walk","comments":"","lineto":156,"args":[{"type":"git_revwalk *","name":"walk","comment":"traversal handle to close. If NULL nothing occurs."}],"rawComments":"\n Free a revision walker previously allocated.\n\n @param walk traversal handle to close. If NULL nothing occurs.\n\n","line":151,"examples":{"general.c":["ex/v0.15.0/general.html#git_revwalk_free-7"]}},"git_tree_close":{"file":"tree.h","sig":"git_tree *","return":{"type":"void","comment":""},"description":"Close an open tree","group":"tree","argline":"git_tree *tree","comments":"This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tree. Failure to do so will cause a memory leak.","lineto":69,"args":[{"type":"git_tree *","name":"tree","comment":"the tree to close"}],"rawComments":"\n Close an open tree\n\n This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tree. Failure to do so will cause a memory leak.\n\n @param tree the tree to close\n\n","line":54},"git_reflog_entry_byindex":{"file":"reflog.h","sig":"git_reflog *::unsigned int","return":{"type":"const git_reflog_entry *","comment":"the entry; NULL if not found"},"description":"Lookup an entry by its index","group":"reflog","argline":"git_reflog *reflog, unsigned int idx","comments":"","lineto":68,"args":[{"type":"git_reflog *","name":"reflog","comment":"a previously loaded reflog"},{"type":"unsigned int","name":"idx","comment":"the position to lookup"}],"rawComments":"\n Lookup an entry by its index\n\n @param reflog a previously loaded reflog\n @param idx the position to lookup\n @return the entry; NULL if not found\n\n","line":61},"git_oid_cmp":{"file":"oid.h","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":"<0, 0, >0 if a < b, a == b, a > b."},"description":"Compare two oid structures.","group":"oid","argline":"const git_oid *a, const git_oid *b","comments":"","lineto":139,"args":[{"type":"const git_oid *","name":"a","comment":"first oid structure."},{"type":"const git_oid *","name":"b","comment":"second oid structure."}],"rawComments":"\n Compare two oid structures.\n\n @param a first oid structure.\n @param b second oid structure.\n @return <0, 0, >0 if a < b, a == b, a > b.\n\n","line":132},"git_revwalk_new":{"file":"revwalk.h","sig":"git_revwalk **::git_repository *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Allocate a new revision walker to iterate through a repo.","group":"revwalk","argline":"git_revwalk **walker, git_repository *repo","comments":"This revision walker uses a custom memory pool and an internal\n commit cache, so it is relatively expensive to allocate.\n\n For maximum performance, this revision walker should be\n reused for different walks.\n\n This revision walker is *not* thread safe: it may only be\n used to walk a repository on a single thread; however,\n it is possible to have several revision walkers in\n several different threads walking the same repository.","lineto":70,"args":[{"type":"git_revwalk **","name":"walker","comment":"pointer to the new revision walker"},{"type":"git_repository *","name":"repo","comment":"the repo to walk through"}],"rawComments":"\n Allocate a new revision walker to iterate through a repo.\n\n This revision walker uses a custom memory pool and an internal\n commit cache, so it is relatively expensive to allocate.\n\n For maximum performance, this revision walker should be\n reused for different walks.\n\n This revision walker is *not* thread safe: it may only be\n used to walk a repository on a single thread; however,\n it is possible to have several revision walkers in\n several different threads walking the same repository.\n\n @param walker pointer to the new revision walker\n @param repo the repo to walk through\n @return GIT_SUCCESS or an error code\n\n","line":52,"examples":{"general.c":["ex/v0.15.0/general.html#git_revwalk_new-8"]}},"git_signature_new":{"file":"signature.h","sig":"git_signature **::const char *::const char *::git_time_t::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new action signature. The signature must be freed manually or using git_signature_free","group":"signature","argline":"git_signature **sig_out, const char *name, const char *email, git_time_t time, int offset","comments":"","lineto":33,"args":[{"type":"git_signature **","name":"sig_out","comment":"new signature, in case of error NULL"},{"type":"const char *","name":"name","comment":"name of the person"},{"type":"const char *","name":"email","comment":"email of the person"},{"type":"git_time_t","name":"time","comment":"time when the action happened"},{"type":"int","name":"offset","comment":"timezone offset in minutes for the time"}],"rawComments":"\n Create a new action signature. The signature must be freed\n manually or using git_signature_free\n\n @param sig_out new signature, in case of error NULL\n @param name name of the person\n @param email email of the person\n @param time time when the action happened\n @param offset timezone offset in minutes for the time\n @return GIT_SUCCESS or an error code\n\n","line":22,"examples":{"general.c":["ex/v0.15.0/general.html#git_signature_new-9","ex/v0.15.0/general.html#git_signature_new-10"]}},"git_signature_dup":{"file":"signature.h","sig":"const git_signature *","return":{"type":"git_signature *","comment":"a copy of sig, NULL on out of memory"},"description":"Create a copy of an existing signature.","group":"signature","argline":"const git_signature *sig","comments":"All internal strings are also duplicated.","lineto":54,"args":[{"type":"const git_signature *","name":"sig","comment":"signature to duplicated"}],"rawComments":"\n Create a copy of an existing signature.\n\n All internal strings are also duplicated.\n @param sig signature to duplicated\n @return a copy of sig, NULL on out of memory\n\n","line":47},"git_remote_negotiate":{"file":"remote.h","sig":"git_remote *","return":{"type":"int","comment":""},"description":"Negotiate what data needs to be exchanged to synchroize the remtoe and local references","group":"remote","argline":"git_remote *remote","comments":"","lineto":115,"args":[{"type":"git_remote *","name":"remote","comment":"the remote you want to negotiate with"}],"rawComments":"\n Negotiate what data needs to be exchanged to synchroize the remtoe\n and local references\n\n @param remote the remote you want to negotiate with\n\n","line":109},"git_config_get_bool":{"file":"config.h","sig":"git_config *::const char *::int *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Get the value of a boolean config variable.","group":"config","argline":"git_config *cfg, const char *name, int *out","comments":"This function uses the usual C convention of 0 being false and\n anything else true.","lineto":192,"args":[{"type":"git_config *","name":"cfg","comment":"where to look for the variable"},{"type":"const char *","name":"name","comment":"the variable's name"},{"type":"int *","name":"out","comment":"pointer to the variable where the value should be stored"}],"rawComments":"\n Get the value of a boolean config variable.\n\n This function uses the usual C convention of 0 being false and\n anything else true.\n\n @param cfg where to look for the variable\n @param name the variable's name\n @param out pointer to the variable where the value should be stored\n @return GIT_SUCCESS or an error code\n\n","line":181},"git_config_open_ondisk":{"file":"config.h","sig":"git_config **::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new config instance containing a single on-disk file","group":"config","argline":"git_config **cfg, const char *path","comments":"This method is a simple utility wrapper for the following sequence\n of calls:\n\t- git_config_new\n\t- git_config_add_file_ondisk","lineto":152,"args":[{"type":"git_config **","name":"cfg","comment":"The configuration instance to create"},{"type":"const char *","name":"path","comment":"Path to the on-disk file to open"}],"rawComments":"\n Create a new config instance containing a single on-disk file\n\n This method is a simple utility wrapper for the following sequence\n of calls:\n\t- git_config_new\n\t- git_config_add_file_ondisk\n\n @param cfg The configuration instance to create\n @param path Path to the on-disk file to open\n @return GIT_SUCCESS or an error code\n\n","line":140,"examples":{"general.c":["ex/v0.15.0/general.html#git_config_open_ondisk-11"]}},"git_reflog_entry_oidold":{"file":"reflog.h","sig":"const git_reflog_entry *","return":{"type":"const git_oid *","comment":"the old oid"},"description":"Get the old oid","group":"reflog","argline":"const git_reflog_entry *entry","comments":"","lineto":76,"args":[{"type":"const git_reflog_entry *","name":"entry","comment":"a reflog entry"}],"rawComments":"\n Get the old oid\n\n @param entry a reflog entry\n @return the old oid\n\n","line":70},"git_index_get_unmerged_byindex":{"file":"index.h","sig":"git_index *::unsigned int","return":{"type":"const git_index_entry_unmerged *","comment":"a pointer to the unmerged entry; NULL if out of bounds"},"description":"Get an unmerged entry from the index.","group":"index","argline":"git_index *index, unsigned int n","comments":"The returned entry is read-only and should not be modified\n of freed by the caller.","lineto":289,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"},{"type":"unsigned int","name":"n","comment":"the position of the entry"}],"rawComments":"\n Get an unmerged entry from the index.\n\n The returned entry is read-only and should not be modified\n of freed by the caller.\n\n @param index an existing index object\n @param n the position of the entry\n @return a pointer to the unmerged entry; NULL if out of bounds\n\n","line":279},"git_repository_is_bare":{"file":"repository.h","sig":"git_repository *","return":{"type":"int","comment":"1 if the repository is empty, 0 otherwise."},"description":"Check if a repository is bare","group":"repository","argline":"git_repository *repo","comments":"","lineto":282,"args":[{"type":"git_repository *","name":"repo","comment":"Repo to test"}],"rawComments":"\n Check if a repository is bare\n\n @param repo Repo to test\n @return 1 if the repository is empty, 0 otherwise.\n\n","line":276},"git_repository_index":{"file":"repository.h","sig":"git_index **::git_repository *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Open the Index file of a Git repository","group":"repository","argline":"git_index **index, git_repository *repo","comments":"This returns a new and unique `git_index` object representing the\n active index for the repository.\n\n This method may be called more than once (e.g. on different threads).\n\n Each returned `git_index` object is independent and suffers no race\n conditions: synchronization is done at the FS level.\n\n Each returned `git_index` object must be manually freed by the user,\n using `git_index_free`.","lineto":171,"args":[{"type":"git_index **","name":"index","comment":"Pointer where to store the index"},{"type":"git_repository *","name":"repo","comment":"a repository object"}],"rawComments":"\n Open the Index file of a Git repository\n\n This returns a new and unique `git_index` object representing the\n active index for the repository.\n\n This method may be called more than once (e.g. on different threads).\n\n Each returned `git_index` object is independent and suffers no race\n conditions: synchronization is done at the FS level.\n\n Each returned `git_index` object must be manually freed by the user,\n using `git_index_free`.\n\n @param index Pointer where to store the index\n @param repo a repository object\n @return GIT_SUCCESS or an error code\n\n","line":153,"examples":{"showindex.c":["ex/v0.15.0/showindex.html#git_repository_index-1"],"general.c":["ex/v0.15.0/general.html#git_repository_index-12"]}},"git_tag_name":{"file":"tag.h","sig":"git_tag *","return":{"type":"const char *","comment":"name of the tag"},"description":"Get the name of a tag","group":"tag","argline":"git_tag *tag","comments":"","lineto":114,"args":[{"type":"git_tag *","name":"tag","comment":"a previously loaded tag."}],"rawComments":"\n Get the name of a tag\n\n @param tag a previously loaded tag.\n @return name of the tag\n\n","line":108,"examples":{"general.c":["ex/v0.15.0/general.html#git_tag_name-13"]}},"git_blob_rawcontent":{"file":"blob.h","sig":"git_blob *","return":{"type":"const void *","comment":"the pointer; NULL if the blob has no contents"},"description":"Get a read-only buffer with the raw content of a blob.","group":"blob","argline":"git_blob *blob","comments":"A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time.","lineto":83,"args":[{"type":"git_blob *","name":"blob","comment":"pointer to the blob"}],"rawComments":"\n Get a read-only buffer with the raw content of a blob.\n\n A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time.\n\n @param blob pointer to the blob\n @return the pointer; NULL if the blob has no contents\n\n","line":72,"examples":{"general.c":["ex/v0.15.0/general.html#git_blob_rawcontent-14"]}},"git_reflog_entry_msg":{"file":"reflog.h","sig":"const git_reflog_entry *","return":{"type":"char *","comment":"the log msg"},"description":"Get the log msg","group":"reflog","argline":"const git_reflog_entry *entry","comments":"","lineto":100,"args":[{"type":"const git_reflog_entry *","name":"entry","comment":"a reflog entry"}],"rawComments":"\n Get the log msg\n\n @param entry a reflog entry\n @return the log msg\n\n","line":94},"git_transport_new":{"file":"transport.h","sig":"git_transport **::const char *","return":{"type":"int","comment":""},"description":"Get the appropriate transport for an URL. @param tranport the transport for the url","group":"transport","argline":"git_transport **transport, const char *url","comments":"","lineto":28,"args":[{"type":"git_transport **","name":"transport","comment":""},{"type":"const char *","name":"url","comment":"the url of the repo"}],"rawComments":"\n Get the appropriate transport for an URL.\n @param tranport the transport for the url\n @param url the url of the repo\n\n","line":23},"git_object_typeisloose":{"file":"object.h","sig":"git_otype","return":{"type":"int","comment":"true if the type represents a valid loose object type,  false otherwise."},"description":"Determine if the given git_otype is a valid loose object type.","group":"object","argline":"git_otype type","comments":"","lineto":154,"args":[{"type":"git_otype","name":"type","comment":"object type to test."}],"rawComments":"\n Determine if the given git_otype is a valid loose object type.\n\n @param type object type to test.\n @return true if the type represents a valid loose object type,\n false otherwise.\n\n","line":147},"git_revwalk_repository":{"file":"revwalk.h","sig":"git_revwalk *","return":{"type":"git_repository *","comment":"the repository being walked"},"description":"Return the repository on which this walker is operating.","group":"revwalk","argline":"git_revwalk *walk","comments":"","lineto":165,"args":[{"type":"git_revwalk *","name":"walk","comment":"the revision walker"}],"rawComments":"\n Return the repository on which this walker\n is operating.\n\n @param walk the revision walker\n @return the repository being walked\n\n","line":158},"git_index_uniq":{"file":"index.h","sig":"git_index *","return":{"type":"void","comment":""},"description":"Remove all entries with equal path except last added","group":"index","argline":"git_index *index","comments":"","lineto":162,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"}],"rawComments":"\n Remove all entries with equal path except last added\n\n @param index an existing index object\n\n","line":157},"git_reference_type":{"file":"refs.h","sig":"git_reference *","return":{"type":"git_rtype","comment":"the type"},"description":"Get the type of a reference","group":"reference","argline":"git_reference *ref","comments":"Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)","lineto":106,"args":[{"type":"git_reference *","name":"ref","comment":"The reference"}],"rawComments":"\n Get the type of a reference\n\n Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)\n\n @param ref The reference\n @return the type\n\n","line":98,"examples":{"general.c":["ex/v0.15.0/general.html#git_reference_type-15"]}},"git_odb_add_alternate":{"file":"odb.h","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"description":"Add a custom backend to an existing Object DB; this backend will work as an alternate.","group":"odb","argline":"git_odb *odb, git_odb_backend *backend, int priority","comments":"Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.\n\n The backends are checked in relative ordering, based on the\n value of the `priority` parameter.\n\n Writing is disabled on alternate backends.\n\n Read <odb_backends.h> for more information.","lineto":88,"args":[{"type":"git_odb *","name":"odb","comment":"database to add the backend to"},{"type":"git_odb_backend *","name":"backend","comment":"pointer to a git_odb_backend instance"},{"type":"int","name":"priority","comment":"Value for ordering the backends queue"}],"rawComments":"\n Add a custom backend to an existing Object DB; this\n backend will work as an alternate.\n\n Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.\n\n The backends are checked in relative ordering, based on the\n value of the `priority` parameter.\n\n Writing is disabled on alternate backends.\n\n Read <odb_backends.h> for more information.\n\n @param odb database to add the backend to\n @param backend pointer to a git_odb_backend instance\n @param priority Value for ordering the backends queue\n @return 0 on sucess; error code otherwise\n\n","line":69},"git_strarray_free":{"file":"common.h","sig":"git_strarray *","return":{"type":"void","comment":""},"description":"The maximum length of a git valid git path.","group":"strarray","argline":"git_strarray *array","comments":"","lineto":102,"args":[{"type":"git_strarray *","name":"array","comment":""}],"rawComments":"\n The maximum length of a git valid git path.\n\n","line":92,"examples":{"general.c":["ex/v0.15.0/general.html#git_strarray_free-16"]}},"git_index_append":{"file":"index.h","sig":"git_index *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Add (append) an index entry from a file in disk","group":"index","argline":"git_index *index, const char *path, int stage","comments":"A new entry will always be inserted into the index;\n if the index already contains an entry for such\n path, the old entry will **not** be replaced.\n\n The file `path` must be relative to the repository's\n working folder and must be readable.\n\n This method will fail in bare index instances.","lineto":208,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"},{"type":"const char *","name":"path","comment":"filename to add"},{"type":"int","name":"stage","comment":"stage for the entry"}],"rawComments":"\n Add (append) an index entry from a file in disk\n\n A new entry will always be inserted into the index;\n if the index already contains an entry for such\n path, the old entry will **not** be replaced.\n\n The file `path` must be relative to the repository's\n working folder and must be readable.\n\n This method will fail in bare index instances.\n\n @param index an existing index object\n @param path filename to add\n @param stage stage for the entry\n @return GIT_SUCCESS or an error code\n\n","line":191},"git_revwalk_hide":{"file":"revwalk.h","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Mark a commit (and its ancestors) uninteresting for the output.","group":"revwalk","argline":"git_revwalk *walk, const git_oid *oid","comments":"The given OID must belong to a commit on the walked\n repository.\n\n The resolved commit and all its parents will be hidden from the\n output on the revision walk.","lineto":118,"args":[{"type":"git_revwalk *","name":"walk","comment":"the walker being used for the traversal."},{"type":"const git_oid *","name":"oid","comment":"the oid of commit that will be ignored during the traversal"}],"rawComments":"\n Mark a commit (and its ancestors) uninteresting for the output.\n\n The given OID must belong to a commit on the walked\n repository.\n\n The resolved commit and all its parents will be hidden from the\n output on the revision walk.\n\n @param walk the walker being used for the traversal.\n @param oid the oid of commit that will be ignored during the traversal\n @return GIT_SUCCESS or an error code\n\n","line":105},"git_reference_create_symbolic":{"file":"refs.h","sig":"git_reference **::git_repository *::const char *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new symbolic reference.","group":"reference","argline":"git_reference **ref_out, git_repository *repo, const char *name, const char *target, int force","comments":"The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n If `force` is true and there already exists a reference\n with the same name, it will be overwritten.","lineto":55,"args":[{"type":"git_reference **","name":"ref_out","comment":"Pointer to the newly created reference"},{"type":"git_repository *","name":"repo","comment":"Repository where that reference will live"},{"type":"const char *","name":"name","comment":"The name of the reference"},{"type":"const char *","name":"target","comment":"The target of the reference"},{"type":"int","name":"force","comment":"Overwrite existing references"}],"rawComments":"\n Create a new symbolic reference.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n If `force` is true and there already exists a reference\n with the same name, it will be overwritten.\n\n @param ref_out Pointer to the newly created reference\n @param repo Repository where that reference will live\n @param name The name of the reference\n @param target The target of the reference\n @param force Overwrite existing references\n @return GIT_SUCCESS or an error code\n\n","line":36},"git_object_id":{"file":"object.h","sig":"const git_object *","return":{"type":"const git_oid *","comment":"the SHA1 id"},"description":"Get the id (SHA1) of a repository object","group":"object","argline":"const git_object *obj","comments":"","lineto":87,"args":[{"type":"const git_object *","name":"obj","comment":"the repository object"}],"rawComments":"\n Get the id (SHA1) of a repository object\n\n @param obj the repository object\n @return the SHA1 id\n\n","line":81},"git_indexer_free":{"file":"indexer.h","sig":"git_indexer *","return":{"type":"void","comment":""},"description":"Free the indexer and its resources","group":"indexer","argline":"git_indexer *idx","comments":"","lineto":72,"args":[{"type":"git_indexer *","name":"idx","comment":"the indexer to free"}],"rawComments":"\n Free the indexer and its resources\n\n @param idx the indexer to free\n\n","line":67},"git_oid_shorten_free":{"file":"oid.h","sig":"git_oid_shorten *","return":{"type":"void","comment":""},"description":"Free an OID shortener instance","group":"oid","argline":"git_oid_shorten *os","comments":"","lineto":204,"args":[{"type":"git_oid_shorten *","name":"os","comment":"a `git_oid_shorten` instance"}],"rawComments":"\n Free an OID shortener instance\n\n @param os a `git_oid_shorten` instance\n\n","line":199},"git_status_file":{"file":"status.h","sig":"unsigned int *::git_repository *::const char *","return":{"type":"int","comment":"GIT_EINVALIDPATH when `path` points at a folder, GIT_ENOTFOUND when   the file doesn't exist in any of HEAD, the index or the worktree,   GIT_SUCCESS otherwise"},"description":"Get file status for a single file","group":"status","argline":"unsigned int *status_flags, git_repository *repo, const char *path","comments":"","lineto":59,"args":[{"type":"unsigned int *","name":"status_flags","comment":"the status value"},{"type":"git_repository *","name":"repo","comment":"a repository object"},{"type":"const char *","name":"path","comment":"the file to retrieve status for, rooted at the repo's workdir"}],"rawComments":"\n Get file status for a single file\n\n @param status_flags the status value\n @param repo a repository object\n @param path the file to retrieve status for, rooted at the repo's workdir\n @return GIT_EINVALIDPATH when `path` points at a folder, GIT_ENOTFOUND when\n\t\tthe file doesn't exist in any of HEAD, the index or the worktree,\n\t\tGIT_SUCCESS otherwise\n\n","line":49},"git_odb_hash":{"file":"odb.h","sig":"git_oid *::const void *::size_t::git_otype","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Determine the object-ID (sha1 hash) of a data buffer","group":"odb","argline":"git_oid *id, const void *data, size_t len, git_otype type","comments":"The resulting SHA-1 OID will the itentifier for the data\n buffer as if the data buffer it were to written to the ODB.","lineto":262,"args":[{"type":"git_oid *","name":"id","comment":"the resulting object-ID."},{"type":"const void *","name":"data","comment":"data to hash"},{"type":"size_t","name":"len","comment":"size of the data"},{"type":"git_otype","name":"type","comment":"of the data to hash"}],"rawComments":"\n Determine the object-ID (sha1 hash) of a data buffer\n\n The resulting SHA-1 OID will the itentifier for the data\n buffer as if the data buffer it were to written to the ODB.\n\n @param id the resulting object-ID.\n @param data data to hash\n @param len size of the data\n @param type of the data to hash\n @return GIT_SUCCESS or an error code\n\n","line":250},"git_tag_create_frombuffer":{"file":"tag.h","sig":"git_oid *::git_repository *::const char *::int","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"description":"Create a new tag in the repository from a buffer","group":"tag","argline":"git_oid *oid, git_repository *repo, const char *buffer, int force","comments":"","lineto":187,"args":[{"type":"git_oid *","name":"oid","comment":"Pointer where to store the OID of the newly created tag"},{"type":"git_repository *","name":"repo","comment":"Repository where to store the tag"},{"type":"const char *","name":"buffer","comment":"Raw tag data"},{"type":"int","name":"force","comment":"Overwrite existing tags"}],"rawComments":"\n Create a new tag in the repository from a buffer\n\n @param oid Pointer where to store the OID of the newly created tag\n @param repo Repository where to store the tag\n @param buffer Raw tag data\n @param force Overwrite existing tags\n @return 0 on sucess; error code otherwise\n\n","line":174},"git_object_lookup":{"file":"object.h","sig":"git_object **::git_repository *::const git_oid *::git_otype","return":{"type":"int","comment":"a reference to the object"},"description":"Lookup a reference to one of the objects in a repostory.","group":"object","argline":"git_object **object, git_repository *repo, const git_oid *id, git_otype type","comments":"The generated reference is owned by the repository and\n should be closed with the `git_object_close` method\n instead of free'd manually.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.","lineto":45,"args":[{"type":"git_object **","name":"object","comment":"pointer to the looked-up object"},{"type":"git_repository *","name":"repo","comment":"the repository to look up the object"},{"type":"const git_oid *","name":"id","comment":"the unique identifier for the object"},{"type":"git_otype","name":"type","comment":"the type of the object"}],"rawComments":"\n Lookup a reference to one of the objects in a repostory.\n\n The generated reference is owned by the repository and\n should be closed with the `git_object_close` method\n instead of free'd manually.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.\n\n @param object pointer to the looked-up object\n @param repo the repository to look up the object\n @param id the unique identifier for the object\n @param type the type of the object\n @return a reference to the object\n\n","line":23},"git_reference_oid":{"file":"refs.h","sig":"git_reference *","return":{"type":"const git_oid *","comment":"a pointer to the oid if available, NULL otherwise"},"description":"Get the OID pointed to by a reference.","group":"reference","argline":"git_reference *ref","comments":"Only available if the reference is direct (i.e. not symbolic)","lineto":86,"args":[{"type":"git_reference *","name":"ref","comment":"The reference"}],"rawComments":"\n Get the OID pointed to by a reference.\n\n Only available if the reference is direct (i.e. not symbolic)\n\n @param ref The reference\n @return a pointer to the oid if available, NULL otherwise\n\n","line":78,"examples":{"general.c":["ex/v0.15.0/general.html#git_reference_oid-17"]}},"git_odb_object_data":{"file":"odb.h","sig":"git_odb_object *","return":{"type":"const void *","comment":"a pointer to the data"},"description":"Return the data of an ODB object","group":"odb","argline":"git_odb_object *object","comments":"This is the uncompressed, raw data as read from the ODB,\n without the leading header.\n\n This pointer is owned by the object and shall not be free'd.","lineto":308,"args":[{"type":"git_odb_object *","name":"object","comment":"the object"}],"rawComments":"\n Return the data of an ODB object\n\n This is the uncompressed, raw data as read from the ODB,\n without the leading header.\n\n This pointer is owned by the object and shall not be free'd.\n\n @param object the object\n @return a pointer to the data\n\n","line":297,"examples":{"general.c":["ex/v0.15.0/general.html#git_odb_object_data-18"]}},"__attribute__":{"file":"common.h","sig":"","return":{"type":"","comment":""},"description":"Declare a public TLS symbol exported for application use.","argline":"(visibility(\"default\"))","comments":"","lineto":46,"args":[{"type":"","name":"(visibility(\"default\"))","comment":""}],"rawComments":" Declare a public TLS symbol exported for application use. ","line":41},"git_treebuilder_filter":{"file":"tree.h","sig":"git_treebuilder *::int(*)(const git_tree_entry *, void *)::void *","return":{"type":"void","comment":""},"description":"Filter the entries in the tree","group":"treebuilder","argline":"git_treebuilder *bld, int (*filter)(const git_tree_entry *, void *), void *payload","comments":"The `filter` callback will be called for each entry\n in the tree with a pointer to the entry and the\n provided `payload`: if the callback returns 1, the\n entry will be filtered (removed from the builder).","lineto":255,"args":[{"type":"git_treebuilder *","name":"bld","comment":"Tree builder"},{"type":"int(*)(const git_tree_entry *, void *)","name":"filter","comment":"Callback to filter entries"},{"type":"void *","name":"payload","comment":""}],"rawComments":"\n Filter the entries in the tree\n\n The `filter` callback will be called for each entry\n in the tree with a pointer to the entry and the\n provided `payload`: if the callback returns 1, the\n entry will be filtered (removed from the builder).\n\n @param bld Tree builder\n @param filter Callback to filter entries\n\n","line":244},"git_config_find_system":{"file":"config.h","sig":"char *","return":{"type":"int","comment":"GIT_SUCCESS if a system configuration file has been  found. Its path will be stored in `buffer`."},"description":"Locate the path to the system configuration file","group":"config","argline":"char *system_config_path","comments":"If /etc/gitconfig doesn't exist, it will look for\n %PROGRAMFILES%\\Git\\etc\\gitconfig.","lineto":64,"args":[{"type":"char *","name":"system_config_path","comment":"Buffer of GIT_PATH_MAX length to store the path"}],"rawComments":"\n Locate the path to the system configuration file\n\n If /etc/gitconfig doesn't exist, it will look for\n %PROGRAMFILES%\\Git\\etc\\gitconfig.\n @param system_config_path Buffer of GIT_PATH_MAX length to store the path\n @return GIT_SUCCESS if a system configuration file has been\n\tfound. Its path will be stored in `buffer`.\n\n","line":54},"git_repository_database":{"file":"repository.h","sig":"git_repository *","return":{"type":"git_odb *","comment":"a pointer to the object db"},"description":"Get the object database behind a Git repository","group":"repository","argline":"git_repository *repo","comments":"","lineto":151,"args":[{"type":"git_repository *","name":"repo","comment":"a repository object"}],"rawComments":"\n Get the object database behind a Git repository\n\n @param repo a repository object\n @return a pointer to the object db\n\n","line":145,"examples":{"general.c":["ex/v0.15.0/general.html#git_repository_database-19"]}},"git_refspec_transform":{"file":"refspec.h","sig":"char *::size_t::const git_refspec *::const char *","return":{"type":"int","comment":"GIT_SUCCESS, GIT_ESHORTBUFFER or another error"},"description":"Transform a reference to its target following the refspec's rules","group":"refspec","argline":"char *out, size_t outlen, const git_refspec *spec, const char *name","comments":"","lineto":58,"args":[{"type":"char *","name":"out","comment":"where to store the target name"},{"type":"size_t","name":"outlen","comment":"the size ouf the `out` buffer"},{"type":"const git_refspec *","name":"spec","comment":"the refspec"},{"type":"const char *","name":"name","comment":"the name of the reference to transform"}],"rawComments":"\n Transform a reference to its target following the refspec's rules\n\n @param out where to store the target name\n @param outlen the size ouf the `out` buffer\n @param spec the refspec\n @param name the name of the reference to transform\n @return GIT_SUCCESS, GIT_ESHORTBUFFER or another error\n\n","line":47},"git_tree_entry_id":{"file":"tree.h","sig":"const git_tree_entry *","return":{"type":"const git_oid *","comment":"the oid of the object"},"description":"Get the id of the object pointed by the entry","group":"tree","argline":"const git_tree_entry *entry","comments":"","lineto":128,"args":[{"type":"const git_tree_entry *","name":"entry","comment":"a tree entry"}],"rawComments":"\n Get the id of the object pointed by the entry\n\n @param entry a tree entry\n @return the oid of the object\n\n","line":122},"git_tag_list":{"file":"tag.h","sig":"git_strarray *::git_repository *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Fill a list with all the tags in the Repository","group":"tag","argline":"git_strarray *tag_names, git_repository *repo","comments":"The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.","lineto":252,"args":[{"type":"git_strarray *","name":"tag_names","comment":"Pointer to a git_strarray structure where   the tag names will be stored"},{"type":"git_repository *","name":"repo","comment":"Repository where to find the tags"}],"rawComments":"\n Fill a list with all the tags in the Repository\n\n The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.\n\n @param tag_names Pointer to a git_strarray structure where\n\t\tthe tag names will be stored\n @param repo Repository where to find the tags\n @return GIT_SUCCESS or an error code\n\n","line":237},"git_blob_create_fromfile":{"file":"blob.h","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Read a file from the working folder of a repository and write it to the Object Database as a loose blob","group":"blob","argline":"git_oid *oid, git_repository *repo, const char *path","comments":"","lineto":104,"args":[{"type":"git_oid *","name":"oid","comment":"return the id of the written blob"},{"type":"git_repository *","name":"repo","comment":"repository where the blob will be written.  this repository cannot be bare"},{"type":"const char *","name":"path","comment":"file from which the blob will be created,  relative to the repository's working dir"}],"rawComments":"\n Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob\n\n @param oid return the id of the written blob\n @param repo repository where the blob will be written.\n\tthis repository cannot be bare\n @param path file from which the blob will be created,\n\trelative to the repository's working dir\n @return GIT_SUCCESS or an error code\n\n","line":93},"git_tag_create_lightweight":{"file":"tag.h","sig":"git_oid *::git_repository *::const char *::const git_object *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code  A proper reference is written in the /refs/tags folder,  pointing to the provided target object"},"description":"Create a new lightweight tag pointing at a target object","group":"tag","argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, int force","comments":"A new direct reference will be created pointing to\n this target object. If `force` is true and a reference\n already exists with the given name, it'll be replaced.","lineto":221,"args":[{"type":"git_oid *","name":"oid","comment":"Pointer where to store the OID of the provided  target object. If the tag already exists, this parameter  will be filled with the oid of the existing pointed object  and the function will return a GIT_EEXISTS error code."},{"type":"git_repository *","name":"repo","comment":"Repository where to store the lightweight tag"},{"type":"const char *","name":"tag_name","comment":"Name for the tag; this name is validated  for consistency. It should also not conflict with an  already existing tag name"},{"type":"const git_object *","name":"target","comment":"Object to which this tag points. This object  must belong to the given `repo`."},{"type":"int","name":"force","comment":"Overwrite existing references"}],"rawComments":"\n Create a new lightweight tag pointing at a target object\n\n A new direct reference will be created pointing to\n this target object. If `force` is true and a reference\n already exists with the given name, it'll be replaced.\n\n @param oid Pointer where to store the OID of the provided\n target object. If the tag already exists, this parameter\n will be filled with the oid of the existing pointed object\n and the function will return a GIT_EEXISTS error code.\n\n @param repo Repository where to store the lightweight tag\n\n @param tag_name Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name\n\n @param target Object to which this tag points. This object\n must belong to the given `repo`.\n\n @param force Overwrite existing references\n\n @return GIT_SUCCESS or an error code\n\tA proper reference is written in the /refs/tags folder,\n pointing to the provided target object\n\n","line":189},"git_tree_entry_byname":{"file":"tree.h","sig":"git_tree *::const char *","return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"Lookup a tree entry by its filename","group":"tree","argline":"git_tree *tree, const char *filename","comments":"","lineto":95,"args":[{"type":"git_tree *","name":"tree","comment":"a previously loaded tree."},{"type":"const char *","name":"filename","comment":"the filename of the desired entry"}],"rawComments":"\n Lookup a tree entry by its filename\n\n @param tree a previously loaded tree.\n @param filename the filename of the desired entry\n @return the tree entry; NULL if not found\n\n","line":88,"examples":{"general.c":["ex/v0.15.0/general.html#git_tree_entry_byname-20"]}},"git_config_delete":{"file":"config.h","sig":"git_config *::const char *","return":{"type":"int","comment":""},"description":"Delete a config variable","group":"config","argline":"git_config *cfg, const char *name","comments":"","lineto":256,"args":[{"type":"git_config *","name":"cfg","comment":"the configuration"},{"type":"const char *","name":"name","comment":"the variable to delete"}],"rawComments":"\n Delete a config variable\n\n @param cfg the configuration\n @param name the variable to delete\n\n","line":250},"git_config_new":{"file":"config.h","sig":"git_config **","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Allocate a new configuration object","group":"config","argline":"git_config **out","comments":"This object is empty, so you have to add a file to it before you\n can do anything with it.","lineto":99,"args":[{"type":"git_config **","name":"out","comment":"pointer to the new configuration"}],"rawComments":"\n Allocate a new configuration object\n\n This object is empty, so you have to add a file to it before you\n can do anything with it.\n\n @param out pointer to the new configuration\n @return GIT_SUCCESS or an error code\n\n","line":90},"git_remote_download":{"file":"remote.h","sig":"char **::git_remote *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Download the packfile","group":"remote","argline":"char **filename, git_remote *remote","comments":"The packfile is downloaded with a temporary filename, as it's final\n name is not known yet. If there was no packfile needed (all the\n objects were available locally), filename will be NULL and the\n function will return success.","lineto":129,"args":[{"type":"char **","name":"filename","comment":"where to store the temproray filename"},{"type":"git_remote *","name":"remote","comment":"the remote to download from"}],"rawComments":"\n Download the packfile\n\n The packfile is downloaded with a temporary filename, as it's final\n name is not known yet. If there was no packfile needed (all the\n objects were available locally), filename will be NULL and the\n function will return success.\n\n @param remote the remote to download from\n @param filename where to store the temproray filename\n @return GIT_SUCCESS or an error code\n\n","line":117},"git_odb_close":{"file":"odb.h","sig":"git_odb *","return":{"type":"void","comment":""},"description":"Close an open object database.","group":"odb","argline":"git_odb *db","comments":"","lineto":95,"args":[{"type":"git_odb *","name":"db","comment":"database pointer to close. If NULL no action is taken."}],"rawComments":"\n Close an open object database.\n\n @param db database pointer to close. If NULL no action is taken.\n\n","line":90},"git_indexer_new":{"file":"indexer.h","sig":"git_indexer **::const char *","return":{"type":"int","comment":""},"description":"Create a new indexer instance","group":"indexer","argline":"git_indexer **out, const char *packname","comments":"","lineto":33,"args":[{"type":"git_indexer **","name":"out","comment":"where to store the indexer instance"},{"type":"const char *","name":"packname","comment":"the absolute filename of the packfile to index"}],"rawComments":"\n Create a new indexer instance\n\n @param out where to store the indexer instance\n @param packname the absolute filename of the packfile to index\n\n","line":27},"git_tag_id":{"file":"tag.h","sig":"git_tag *","return":{"type":"const git_oid *","comment":"object identity for the tag."},"description":"Get the id of a tag.","group":"tag","argline":"git_tag *tag","comments":"","lineto":78,"args":[{"type":"git_tag *","name":"tag","comment":"a previously loaded tag."}],"rawComments":"\n Get the id of a tag.\n\n @param tag a previously loaded tag.\n @return object identity for the tag.\n\n","line":72},"git_reference_target":{"file":"refs.h","sig":"git_reference *","return":{"type":"const char *","comment":"a pointer to the name if available, NULL otherwise"},"description":"Get full name to the reference pointed by this reference","group":"reference","argline":"git_reference *ref","comments":"Only available if the reference is symbolic","lineto":96,"args":[{"type":"git_reference *","name":"ref","comment":"The reference"}],"rawComments":"\n Get full name to the reference pointed by this reference\n\n Only available if the reference is symbolic\n\n @param ref The reference\n @return a pointer to the name if available, NULL otherwise\n\n","line":88,"examples":{"general.c":["ex/v0.15.0/general.html#git_reference_target-21"]}},"git_odb_add_backend":{"file":"odb.h","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"description":"Add a custom backend to an existing Object DB","group":"odb","argline":"git_odb *odb, git_odb_backend *backend, int priority","comments":"The backends are checked in relative ordering, based on the\n value of the `priority` parameter.\n\n Read <odb_backends.h> for more information.","lineto":67,"args":[{"type":"git_odb *","name":"odb","comment":"database to add the backend to"},{"type":"git_odb_backend *","name":"backend","comment":"pointer to a git_odb_backend instance"},{"type":"int","name":"priority","comment":"Value for ordering the backends queue"}],"rawComments":"\n Add a custom backend to an existing Object DB\n\n The backends are checked in relative ordering, based on the\n value of the `priority` parameter.\n\n Read <odb_backends.h> for more information.\n\n @param odb database to add the backend to\n @param backend pointer to a git_odb_backend instance\n @param priority Value for ordering the backends queue\n @return 0 on sucess; error code otherwise\n\n","line":54},"git_object_type":{"file":"object.h","sig":"const git_object *","return":{"type":"git_otype","comment":"the object's type"},"description":"Get the object type of an object","group":"object","argline":"const git_object *obj","comments":"","lineto":95,"args":[{"type":"const git_object *","name":"obj","comment":"the repository object"}],"rawComments":"\n Get the object type of an object\n\n @param obj the repository object\n @return the object's type\n\n","line":89},"git_remote_pushspec":{"file":"remote.h","sig":"struct git_remote *","return":{"type":"const git_refspec *","comment":"a pointer to the push refspec or NULL if it doesn't exist"},"description":"Get the push refspec","group":"remote","argline":"struct git_remote *remote","comments":"","lineto":83,"args":[{"type":"struct git_remote *","name":"remote","comment":"the remote"}],"rawComments":"\n Get the push refspec\n\n @param remote the remote\n @return a pointer to the push refspec or NULL if it doesn't exist\n\n","line":76},"git_config_add_file_ondisk":{"file":"config.h","sig":"git_config *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Add an on-disk config file instance to an existing config","group":"config","argline":"git_config *cfg, const char *path, int priority","comments":"The on-disk file pointed at by `path` will be opened and\n parsed; it's expected to be a native Git config file following\n the default Git config syntax (see man git-config).\n\n Note that the configuration object will free the file\n automatically.\n\n Further queries on this config object will access each\n of the config file instances in order (instances with\n a higher priority will be accessed first).","lineto":137,"args":[{"type":"git_config *","name":"cfg","comment":"the configuration to add the file to"},{"type":"const char *","name":"path","comment":"path to the configuration file (backend) to add"},{"type":"int","name":"priority","comment":"the priority the backend should have"}],"rawComments":"\n Add an on-disk config file instance to an existing config\n\n The on-disk file pointed at by `path` will be opened and\n parsed; it's expected to be a native Git config file following\n the default Git config syntax (see man git-config).\n\n Note that the configuration object will free the file\n automatically.\n\n Further queries on this config object will access each\n of the config file instances in order (instances with\n a higher priority will be accessed first).\n\n @param cfg the configuration to add the file to\n @param path path to the configuration file (backend) to add\n @param priority the priority the backend should have\n @return GIT_SUCCESS or an error code\n\n","line":118},"git_index_add":{"file":"index.h","sig":"git_index *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Add or update an index entry from a file in disk","group":"index","argline":"git_index *index, const char *path, int stage","comments":"The file `path` must be relative to the repository's\n working folder and must be readable.\n\n This method will fail in bare index instances.","lineto":177,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"},{"type":"const char *","name":"path","comment":"filename to add"},{"type":"int","name":"stage","comment":"stage for the entry"}],"rawComments":"\n Add or update an index entry from a file in disk\n\n The file `path` must be relative to the repository's\n working folder and must be readable.\n\n This method will fail in bare index instances.\n\n @param index an existing index object\n @param path filename to add\n @param stage stage for the entry\n @return GIT_SUCCESS or an error code\n\n","line":164},"git_refspec_src_match":{"file":"refspec.h","sig":"const git_refspec *::const char *","return":{"type":"int","comment":"GIT_SUCCESS on successful match; GIT_ENOMACH on match  failure or an error code on other failure"},"description":"Match a refspec's source descriptor with a reference name","group":"refspec","argline":"const git_refspec *refspec, const char *refname","comments":"","lineto":45,"args":[{"type":"const git_refspec *","name":"refspec","comment":"the refspec"},{"type":"const char *","name":"refname","comment":"the name of the reference to check"}],"rawComments":"\n Match a refspec's source descriptor with a reference name\n\n @param refspec the refspec\n @param refname the name of the reference to check\n @return GIT_SUCCESS on successful match; GIT_ENOMACH on match\n failure or an error code on other failure\n\n","line":37},"git_blob_lookup_prefix":{"file":"blob.h","sig":"git_blob **::git_repository *::const git_oid *::unsigned int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a blob object from a repository, given a prefix of its identifier (short id).","group":"blob","argline":"git_blob **blob, git_repository *repo, const git_oid *id, unsigned int len","comments":"@see git_object_lookup_prefix","lineto":52,"args":[{"type":"git_blob **","name":"blob","comment":"pointer to the looked up blob"},{"type":"git_repository *","name":"repo","comment":"the repo to use when locating the blob."},{"type":"const git_oid *","name":"id","comment":"identity of the blob to locate."},{"type":"unsigned int","name":"len","comment":"the length of the short identifier"}],"rawComments":"\n Lookup a blob object from a repository,\n given a prefix of its identifier (short id).\n\n @see git_object_lookup_prefix\n\n @param blob pointer to the looked up blob\n @param repo the repo to use when locating the blob.\n @param id identity of the blob to locate.\n @param len the length of the short identifier\n @return GIT_SUCCESS or an error code\n\n","line":37},"git_treebuilder_clear":{"file":"tree.h","sig":"git_treebuilder *","return":{"type":"void","comment":""},"description":"Clear all the entires in the builder","group":"treebuilder","argline":"git_treebuilder *bld","comments":"","lineto":190,"args":[{"type":"git_treebuilder *","name":"bld","comment":"Builder to clear"}],"rawComments":"\n Clear all the entires in the builder\n\n @param bld Builder to clear\n\n","line":185},"git_index_entry_stage":{"file":"index.h","sig":"const git_index_entry *","return":{"type":"int","comment":""},"description":"Return the stage number from a git index entry","group":"index","argline":"const git_index_entry *entry","comments":"This entry is calculated from the entrie's flag\n attribute like this:\n\n\t(entry->flags & GIT_IDXENTRY_STAGEMASK) >> GIT_IDXENTRY_STAGESHIFT\n\n @returns the stage number","lineto":302,"args":[{"type":"const git_index_entry *","name":"entry","comment":"The entry"}],"rawComments":"\n Return the stage number from a git index entry\n\n This entry is calculated from the entrie's flag\n attribute like this:\n\n\t(entry->flags & GIT_IDXENTRY_STAGEMASK) >> GIT_IDXENTRY_STAGESHIFT\n\n @param entry The entry\n @returns the stage number\n\n","line":291},"git_index_get":{"file":"index.h","sig":"git_index *::unsigned int","return":{"type":"git_index_entry *","comment":"a pointer to the entry; NULL if out of bounds"},"description":"Get a pointer to one of the entries in the index","group":"index","argline":"git_index *index, unsigned int n","comments":"This entry can be modified, and the changes will be written\n back to disk on the next write() call.\n\n The entry should not be freed by the caller.","lineto":249,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"},{"type":"unsigned int","name":"n","comment":"the position of the entry"}],"rawComments":"\n Get a pointer to one of the entries in the index\n\n This entry can be modified, and the changes will be written\n back to disk on the next write() call.\n\n The entry should not be freed by the caller.\n\n @param index an existing index object\n @param n the position of the entry\n @return a pointer to the entry; NULL if out of bounds\n\n","line":237,"examples":{"showindex.c":["ex/v0.15.0/showindex.html#git_index_get-2"],"general.c":["ex/v0.15.0/general.html#git_index_get-22"]}},"git_repository_config":{"file":"repository.h","sig":"git_config **::git_repository *::const char *::const char *","return":{"type":"int","comment":""},"description":"Retrieve the relevant configuration for a repository","group":"repository","argline":"git_config **out, git_repository *repo, const char *global_config_path, const char *system_config_path","comments":"If either the `global_config_path` or `system_config_path`\n variables are not NULL, the given config files will be also\n included in the configuration set. The global configuration file is\n located in $HOME/.gitconfig. On most UNIX systems, the system\n config file file may be found on `$sysconfdir/gitconfig`.\n\n The resulting `git_config` instance will query the files in the following\n order:\n\n\t- Repository configuration file\n\t- Global configuration file\n\t- System configuration file\n\n The method will fail if any of the given config files can't be\n found or accessed.\n\n The returned `git_config` instance is owned by the caller and must\n be manually free'd once it's no longer on use.","lineto":315,"args":[{"type":"git_config **","name":"out","comment":"the repository's configuration"},{"type":"git_repository *","name":"repo","comment":"the repository for which to get the config"},{"type":"const char *","name":"global_config_path","comment":""},{"type":"const char *","name":"system_config_path","comment":"Path to the system-wide config file"}],"rawComments":"\n Retrieve the relevant configuration for a repository\n\n If either the `global_config_path` or `system_config_path`\n variables are not NULL, the given config files will be also\n included in the configuration set. The global configuration file is\n located in $HOME/.gitconfig. On most UNIX systems, the system\n config file file may be found on `$sysconfdir/gitconfig`.\n\n The resulting `git_config` instance will query the files in the following\n order:\n\n\t- Repository configuration file\n\t- Global configuration file\n\t- System configuration file\n\n The method will fail if any of the given config files can't be\n found or accessed.\n\n The returned `git_config` instance is owned by the caller and must\n be manually free'd once it's no longer on use.\n\n @param out the repository's configuration\n @param repo the repository for which to get the config\n @param system_config_path Path to the global config file\n @param system_config_path Path to the system-wide config file\n\n","line":284},"git_repository_free":{"file":"repository.h","sig":"git_repository *","return":{"type":"void","comment":""},"description":"Free a previously allocated repository","group":"repository","argline":"git_repository *repo","comments":"Note that after a repository is free'd, all the objects it has spawned\n will still exist until they are manually closed by the user\n with `git_object_close`, but accessing any of the attributes of\n an object without a backing repository will result in undefined\n behavior","lineto":184,"args":[{"type":"git_repository *","name":"repo","comment":"repository handle to close. If NULL nothing occurs."}],"rawComments":"\n Free a previously allocated repository\n\n Note that after a repository is free'd, all the objects it has spawned\n will still exist until they are manually closed by the user\n with `git_object_close`, but accessing any of the attributes of\n an object without a backing repository will result in undefined\n behavior\n\n @param repo repository handle to close. If NULL nothing occurs.\n\n","line":173,"examples":{"showindex.c":["ex/v0.15.0/showindex.html#git_repository_free-3"],"general.c":["ex/v0.15.0/general.html#git_repository_free-23"]}},"git_oid_cpy":{"file":"oid.h","sig":"git_oid *::const git_oid *","return":{"type":"void","comment":""},"description":"Copy an oid from one structure to another.","group":"oid","argline":"git_oid *out, const git_oid *src","comments":"","lineto":130,"args":[{"type":"git_oid *","name":"out","comment":"oid structure the result is written into."},{"type":"const git_oid *","name":"src","comment":"oid structure to copy from."}],"rawComments":"\n Copy an oid from one structure to another.\n\n @param out oid structure the result is written into.\n @param src oid structure to copy from.\n\n","line":124},"git_tag_create":{"file":"tag.h","sig":"git_oid *::git_repository *::const char *::const git_object *::const git_signature *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code  A tag object is written to the ODB, and a proper reference  is written in the /refs/tags folder, pointing to it"},"description":"Create a new tag in the repository from an object","group":"tag","argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message, int force","comments":"A new reference will also be created pointing to\n this tag object. If `force` is true and a reference\n already exists with the given name, it'll be replaced.","lineto":172,"args":[{"type":"git_oid *","name":"oid","comment":"Pointer where to store the OID of the  newly created tag. If the tag already exists, this parameter  will be the oid of the existing tag, and the function will  return a GIT_EEXISTS error code."},{"type":"git_repository *","name":"repo","comment":"Repository where to store the tag"},{"type":"const char *","name":"tag_name","comment":"Name for the tag; this name is validated  for consistency. It should also not conflict with an  already existing tag name"},{"type":"const git_object *","name":"target","comment":"Object to which this tag points. This object  must belong to the given `repo`."},{"type":"const git_signature *","name":"tagger","comment":"Signature of the tagger for this tag, and  of the tagging time"},{"type":"const char *","name":"message","comment":"Full message for this tag"},{"type":"int","name":"force","comment":"Overwrite existing references"}],"rawComments":"\n Create a new tag in the repository from an object\n\n A new reference will also be created pointing to\n this tag object. If `force` is true and a reference\n already exists with the given name, it'll be replaced.\n\n @param oid Pointer where to store the OID of the\n newly created tag. If the tag already exists, this parameter\n will be the oid of the existing tag, and the function will\n return a GIT_EEXISTS error code.\n\n @param repo Repository where to store the tag\n\n @param tag_name Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name\n\n @param target Object to which this tag points. This object\n must belong to the given `repo`.\n\n @param tagger Signature of the tagger for this tag, and\n of the tagging time\n\n @param message Full message for this tag\n\n @param force Overwrite existing references\n\n @return GIT_SUCCESS or an error code\n\tA tag object is written to the ODB, and a proper reference\n\tis written in the /refs/tags folder, pointing to it\n\n","line":133},"git_treebuilder_get":{"file":"tree.h","sig":"git_treebuilder *::const char *","return":{"type":"const git_tree_entry *","comment":"pointer to the entry; NULL if not found"},"description":"Get an entry from the builder from its filename","group":"treebuilder","argline":"git_treebuilder *bld, const char *filename","comments":"The returned entry is owned by the builder and should\n not be freed manually.","lineto":213,"args":[{"type":"git_treebuilder *","name":"bld","comment":"Tree builder"},{"type":"const char *","name":"filename","comment":"Name of the entry"}],"rawComments":"\n Get an entry from the builder from its filename\n\n The returned entry is owned by the builder and should\n not be freed manually.\n\n @param bld Tree builder\n @param filename Name of the entry\n @return pointer to the entry; NULL if not found\n\n","line":203},"git_oid_shorten_add":{"file":"oid.h","sig":"git_oid_shorten *::const char *","return":{"type":"int","comment":"the minimal length to uniquely identify all OIDs   added so far to the set; or an error code (<0) if an   error occurs."},"description":"Add a new OID to set of shortened OIDs and calculate the minimal length to uniquely identify all the OIDs in the set.","group":"oid","argline":"git_oid_shorten *os, const char *text_oid","comments":"The OID is expected to be a 40-char hexadecimal string.\n The OID is owned by the user and will not be modified\n or freed.\n\n For performance reasons, there is a hard-limit of how many\n OIDs can be added to a single set (around ~22000, assuming\n a mostly randomized distribution), which should be enough\n for any kind of program, and keeps the algorithm fast and\n memory-efficient.\n\n Attempting to add more than those OIDs will result in a\n GIT_ENOMEM error","lineto":197,"args":[{"type":"git_oid_shorten *","name":"os","comment":"a `git_oid_shorten` instance"},{"type":"const char *","name":"text_oid","comment":"an OID in text form"}],"rawComments":"\n Add a new OID to set of shortened OIDs and calculate\n the minimal length to uniquely identify all the OIDs in\n the set.\n\n The OID is expected to be a 40-char hexadecimal string.\n The OID is owned by the user and will not be modified\n or freed.\n\n For performance reasons, there is a hard-limit of how many\n OIDs can be added to a single set (around ~22000, assuming\n a mostly randomized distribution), which should be enough\n for any kind of program, and keeps the algorithm fast and\n memory-efficient.\n\n Attempting to add more than those OIDs will result in a\n GIT_ENOMEM error\n\n @param os a `git_oid_shorten` instance\n @param text_oid an OID in text form\n @return the minimal length to uniquely identify all OIDs\n\t\tadded so far to the set; or an error code (<0) if an\n\t\terror occurs.\n\n","line":173},"git_blob_close":{"file":"blob.h","sig":"git_blob *","return":{"type":"void","comment":""},"description":"Close an open blob","group":"blob","argline":"git_blob *blob","comments":"This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a blob. Failure to do so will cause a memory leak.","lineto":69,"args":[{"type":"git_blob *","name":"blob","comment":"the blob to close"}],"rawComments":"\n Close an open blob\n\n This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a blob. Failure to do so will cause a memory leak.\n\n @param blob the blob to close\n\n","line":54},"git_revwalk_next":{"file":"revwalk.h","sig":"git_oid *::git_revwalk *","return":{"type":"int","comment":"GIT_SUCCESS if the next commit was found;  GIT_EREVWALKOVER if there are no commits left to iterate"},"description":"Get the next commit from the revision walk.","group":"revwalk","argline":"git_oid *oid, git_revwalk *walk","comments":"The initial call to this method is *not* blocking when\n iterating through a repo with a time-sorting mode.\n\n Iterating with Topological or inverted modes makes the initial\n call blocking to preprocess the commit list, but this block should be\n mostly unnoticeable on most repositories (topological preprocessing\n times at 0.3s on the git.git repo).\n\n The revision walker is reset when the walk is over.","lineto":138,"args":[{"type":"git_oid *","name":"oid","comment":"Pointer where to store the oid of the next commit"},{"type":"git_revwalk *","name":"walk","comment":"the walker to pop the commit from."}],"rawComments":"\n Get the next commit from the revision walk.\n\n The initial call to this method is *not* blocking when\n iterating through a repo with a time-sorting mode.\n\n Iterating with Topological or inverted modes makes the initial\n call blocking to preprocess the commit list, but this block should be\n mostly unnoticeable on most repositories (topological preprocessing\n times at 0.3s on the git.git repo).\n\n The revision walker is reset when the walk is over.\n\n @param oid Pointer where to store the oid of the next commit\n @param walk the walker to pop the commit from.\n @return GIT_SUCCESS if the next commit was found;\n\tGIT_EREVWALKOVER if there are no commits left to iterate\n\n","line":120,"examples":{"general.c":["ex/v0.15.0/general.html#git_revwalk_next-24"]}},"git_reflog_read":{"file":"reflog.h","sig":"git_reflog **::git_reference *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Read the reflog for the given reference","group":"reflog","argline":"git_reflog **reflog, git_reference *ref","comments":"The reflog must be freed manually by using\n git_reflog_free().","lineto":33,"args":[{"type":"git_reflog **","name":"reflog","comment":"pointer to reflog"},{"type":"git_reference *","name":"ref","comment":"reference to read the reflog for"}],"rawComments":"\n Read the reflog for the given reference\n\n The reflog must be freed manually by using\n git_reflog_free().\n\n @param reflog pointer to reflog\n @param ref reference to read the reflog for\n @return GIT_SUCCESS or an error code\n\n","line":23},"git_index_clear":{"file":"index.h","sig":"git_index *","return":{"type":"void","comment":""},"description":"Clear the contents (all the entries) of an index object. This clears the index object in memory; changes must be manually written to disk for them to take effect.","group":"index","argline":"git_index *index","comments":"","lineto":120,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"}],"rawComments":"\n Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect.\n\n @param index an existing index object\n\n","line":113},"git_repository_init":{"file":"repository.h","sig":"git_repository **::const char *::unsigned","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Creates a new Git repository in the given folder.","group":"repository","argline":"git_repository **repo_out, const char *path, unsigned is_bare","comments":"TODO:\n\t- Reinit the repository\n\t- Create config files","lineto":201,"args":[{"type":"git_repository **","name":"repo_out","comment":"pointer to the repo which will be created or reinitialized"},{"type":"const char *","name":"path","comment":"the path to the repository"},{"type":"unsigned","name":"is_bare","comment":"if true, a Git repository without a working directory is created   at the pointed path. If false, provided path will be considered as the working   directory into which the .git directory will be created."}],"rawComments":"\n Creates a new Git repository in the given folder.\n\n TODO:\n\t- Reinit the repository\n\t- Create config files\n\n @param repo_out pointer to the repo which will be created or reinitialized\n @param path the path to the repository\n @param is_bare if true, a Git repository without a working directory is created\n\t\tat the pointed path. If false, provided path will be considered as the working\n\t\tdirectory into which the .git directory will be created.\n\n @return GIT_SUCCESS or an error code\n\n","line":186},"git_clearerror":{"file":"errors.h","sig":"","return":{"type":"void","comment":""},"description":"Clear the latest library error","group":"errors","argline":"void","comments":"","lineto":140,"args":[{"type":"","name":"void","comment":""}],"rawComments":"\n Clear the latest library error\n\n","line":137},"git_treebuilder_remove":{"file":"tree.h","sig":"git_treebuilder *::const char *","return":{"type":"int","comment":""},"description":"Remove an entry from the builder by its filename","group":"treebuilder","argline":"git_treebuilder *bld, const char *filename","comments":"","lineto":242,"args":[{"type":"git_treebuilder *","name":"bld","comment":"Tree builder"},{"type":"const char *","name":"filename","comment":"Filename of the entry to remove"}],"rawComments":"\n Remove an entry from the builder by its filename\n\n @param bld Tree builder\n @param filename Filename of the entry to remove\n\n","line":236},"git_tree_entry_type":{"file":"tree.h","sig":"const git_tree_entry *","return":{"type":"git_otype","comment":"the type of the pointed object"},"description":"Get the type of the object pointed by the entry","group":"tree","argline":"const git_tree_entry *entry","comments":"","lineto":136,"args":[{"type":"const git_tree_entry *","name":"entry","comment":"a tree entry"}],"rawComments":"\n Get the type of the object pointed by the entry\n\n @param entry a tree entry\n @return the type of the pointed object\n\n","line":130},"git_tree_entrycount":{"file":"tree.h","sig":"git_tree *","return":{"type":"unsigned int","comment":"the number of entries in the tree"},"description":"Get the number of entries listed in a tree","group":"tree","argline":"git_tree *tree","comments":"","lineto":86,"args":[{"type":"git_tree *","name":"tree","comment":"a previously loaded tree."}],"rawComments":"\n Get the number of entries listed in a tree\n\n @param tree a previously loaded tree.\n @return the number of entries in the tree\n\n","line":80,"examples":{"general.c":["ex/v0.15.0/general.html#git_tree_entrycount-25"]}},"git_index_write":{"file":"index.h","sig":"git_index *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Write an existing index object from memory back to disk using an atomic file lock.","group":"index","argline":"git_index *index","comments":"","lineto":145,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"}],"rawComments":"\n Write an existing index object from memory back to disk\n using an atomic file lock.\n\n @param index an existing index object\n @return GIT_SUCCESS or an error code\n\n","line":138},"git_index_free":{"file":"index.h","sig":"git_index *","return":{"type":"void","comment":""},"description":"Free an existing index object.","group":"index","argline":"git_index *index","comments":"","lineto":127,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"}],"rawComments":"\n Free an existing index object.\n\n @param index an existing index object\n\n","line":122,"examples":{"showindex.c":["ex/v0.15.0/showindex.html#git_index_free-4"],"general.c":["ex/v0.15.0/general.html#git_index_free-26"]}},"git_commit_time":{"file":"commit.h","sig":"git_commit *","return":{"type":"git_time_t","comment":"the time of a commit"},"description":"Get the commit time (i.e. committer time) of a commit.","group":"commit","argline":"git_commit *commit","comments":"","lineto":107,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the commit time (i.e. committer time) of a commit.\n\n @param commit a previously loaded commit.\n @return the time of a commit\n\n","line":101,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_time-27","ex/v0.15.0/general.html#git_commit_time-28"]}},"git_status_foreach":{"file":"status.h","sig":"git_repository *::int(*)(const char *, unsigned int, void *)::void *","return":{"type":"int","comment":"GIT_SUCCESS or the return value of the callback which did not return GIT_SUCCESS"},"description":"Gather file statuses and run a callback for each one.","group":"status","argline":"git_repository *repo, int (*callback)(const char *, unsigned int, void *), void *payload","comments":"The callback is passed the path of the file, the status and the data pointer\n passed to this function. If the callback returns something other than\n GIT_SUCCESS, this function will return that value.","lineto":47,"args":[{"type":"git_repository *","name":"repo","comment":"a repository object"},{"type":"int(*)(const char *, unsigned int, void *)","name":"callback","comment":"the function to call on each file"},{"type":"void *","name":"payload","comment":""}],"rawComments":"\n Gather file statuses and run a callback for each one.\n\n The callback is passed the path of the file, the status and the data pointer\n passed to this function. If the callback returns something other than\n GIT_SUCCESS, this function will return that value.\n\n @param repo a repository object\n @param callback the function to call on each file\n @return GIT_SUCCESS or the return value of the callback which did not return GIT_SUCCESS\n\n","line":36},"git_tag_target":{"file":"tag.h","sig":"git_object **::git_tag *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Get the tagged object of a tag","group":"tag","argline":"git_object **target, git_tag *tag","comments":"This method performs a repository lookup for the\n given object and returns it","lineto":90,"args":[{"type":"git_object **","name":"target","comment":"pointer where to store the target"},{"type":"git_tag *","name":"tag","comment":"a previously loaded tag."}],"rawComments":"\n Get the tagged object of a tag\n\n This method performs a repository lookup for the\n given object and returns it\n\n @param target pointer where to store the target\n @param tag a previously loaded tag.\n @return GIT_SUCCESS or an error code\n\n","line":80,"examples":{"general.c":["ex/v0.15.0/general.html#git_tag_target-29"]}},"git_odb_object_id":{"file":"odb.h","sig":"git_odb_object *","return":{"type":"const git_oid *","comment":"a pointer to the OID"},"description":"Return the OID of an ODB object","group":"odb","argline":"git_odb_object *object","comments":"This is the OID from which the object was read from","lineto":295,"args":[{"type":"git_odb_object *","name":"object","comment":"the object"}],"rawComments":"\n Return the OID of an ODB object\n\n This is the OID from which the object was read from\n\n @param object the object\n @return a pointer to the OID\n\n","line":287},"git_reflog_entry_committer":{"file":"reflog.h","sig":"const git_reflog_entry *","return":{"type":"git_signature *","comment":"the committer"},"description":"Get the committer of this entry","group":"reflog","argline":"const git_reflog_entry *entry","comments":"","lineto":92,"args":[{"type":"const git_reflog_entry *","name":"entry","comment":"a reflog entry"}],"rawComments":"\n Get the committer of this entry\n\n @param entry a reflog entry\n @return the committer\n\n","line":86},"git_commit_create":{"file":"commit.h","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const char *::const git_tree *::int::const git_commit *","return":{"type":"int","comment":"GIT_SUCCESS or an error code  The created commit will be written to the Object Database and  the given reference will be updated to point to it"},"description":"Create a new commit in the repository using `git_object` instances as parameters.","group":"commit","argline":"git_oid *oid, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, int parent_count, const git_commit *parents[]","comments":"","lineto":234,"args":[{"type":"git_oid *","name":"oid","comment":"Pointer where to store the OID of the  newly created commit"},{"type":"git_repository *","name":"repo","comment":"Repository where to store the commit"},{"type":"const char *","name":"update_ref","comment":"If not NULL, name of the reference that  will be updated to point to this commit. If the reference  is not direct, it will be resolved to a direct reference.  Use \"HEAD\" to update the HEAD of the current branch and  make it point to this commit"},{"type":"const git_signature *","name":"author","comment":"Signature representing the author and the authory  time of this commit"},{"type":"const git_signature *","name":"committer","comment":"Signature representing the committer and the  commit time of this commit"},{"type":"const char *","name":"message_encoding","comment":"The encoding for the message in the  commit, represented with a standard encoding name.  E.g. \"UTF-8\". If NULL, no encoding header is written and  UTF-8 is assumed."},{"type":"const char *","name":"message","comment":"Full message for this commit"},{"type":"const git_tree *","name":"tree","comment":"An instance of a `git_tree` object that will  be used as the tree for the commit. This tree object must  also be owned by the given `repo`."},{"type":"int","name":"parent_count","comment":"Number of parents for this commit"},{"type":"const git_commit *","name":"parents[]","comment":"Array of `parent_count` pointers to `git_commit`  objects that will be used as the parents for this commit. This  array may be NULL if `parent_count` is 0 (root commit). All the  given commits must be owned by the `repo`."}],"rawComments":"\n Create a new commit in the repository using `git_object`\n instances as parameters.\n\n @param oid Pointer where to store the OID of the\n\tnewly created commit\n\n @param repo Repository where to store the commit\n\n @param update_ref If not NULL, name of the reference that\n\twill be updated to point to this commit. If the reference\n\tis not direct, it will be resolved to a direct reference.\n\tUse \"HEAD\" to update the HEAD of the current branch and\n\tmake it point to this commit\n\n @param author Signature representing the author and the authory\n\ttime of this commit\n\n @param committer Signature representing the committer and the\n commit time of this commit\n\n @param message_encoding The encoding for the message in the\n commit, represented with a standard encoding name.\n E.g. \"UTF-8\". If NULL, no encoding header is written and\n UTF-8 is assumed.\n\n @param message Full message for this commit\n\n @param tree An instance of a `git_tree` object that will\n be used as the tree for the commit. This tree object must\n also be owned by the given `repo`.\n\n @param parent_count Number of parents for this commit\n\n @param parents[] Array of `parent_count` pointers to `git_commit`\n objects that will be used as the parents for this commit. This\n array may be NULL if `parent_count` is 0 (root commit). All the\n given commits must be owned by the `repo`.\n\n @return GIT_SUCCESS or an error code\n\tThe created commit will be written to the Object Database and\n\tthe given reference will be updated to point to it\n\n","line":181},"git_revwalk_push":{"file":"revwalk.h","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Mark a commit to start traversal from.","group":"revwalk","argline":"git_revwalk *walk, const git_oid *oid","comments":"The given OID must belong to a commit on the walked\n repository.\n\n The given commit will be used as one of the roots\n when starting the revision walk. At least one commit\n must be pushed the repository before a walk can\n be started.","lineto":102,"args":[{"type":"git_revwalk *","name":"walk","comment":"the walker being used for the traversal."},{"type":"const git_oid *","name":"oid","comment":"the oid of the commit to start from."}],"rawComments":"\n Mark a commit to start traversal from.\n\n The given OID must belong to a commit on the walked\n repository.\n\n The given commit will be used as one of the roots\n when starting the revision walk. At least one commit\n must be pushed the repository before a walk can\n be started.\n\n @param walk the walker being used for the traversal.\n @param oid the oid of the commit to start from.\n @return GIT_SUCCESS or an error code\n\n","line":87,"examples":{"general.c":["ex/v0.15.0/general.html#git_revwalk_push-30"]}},"git_indexer_hash":{"file":"indexer.h","sig":"git_indexer *","return":{"type":"const git_oid *","comment":""},"description":"Get the packfile's hash","group":"indexer","argline":"git_indexer *idx","comments":"A packfile's name is derived from the sorted hashing of all object\n names. This is only correct after the index has been written to disk.","lineto":65,"args":[{"type":"git_indexer *","name":"idx","comment":"the indexer instance"}],"rawComments":"\n Get the packfile's hash\n\n A packfile's name is derived from the sorted hashing of all object\n names. This is only correct after the index has been written to disk.\n\n @param idx the indexer instance\n\n","line":57},"git_blob_lookup":{"file":"blob.h","sig":"git_blob **::git_repository *::const git_oid *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a blob object from a repository.","group":"blob","argline":"git_blob **blob, git_repository *repo, const git_oid *id","comments":"","lineto":35,"args":[{"type":"git_blob **","name":"blob","comment":"pointer to the looked up blob"},{"type":"git_repository *","name":"repo","comment":"the repo to use when locating the blob."},{"type":"const git_oid *","name":"id","comment":"identity of the blob to locate."}],"rawComments":"\n Lookup a blob object from a repository.\n\n @param blob pointer to the looked up blob\n @param repo the repo to use when locating the blob.\n @param id identity of the blob to locate.\n @return GIT_SUCCESS or an error code\n\n","line":24,"examples":{"general.c":["ex/v0.15.0/general.html#git_blob_lookup-31"]}},"git_oid_allocfmt":{"file":"oid.h","sig":"const git_oid *","return":{"type":"char *","comment":"the c-string; NULL if memory is exhausted. Caller must    deallocate the string with free()."},"description":"Format a git_oid into a newly allocated c-string.","group":"oid","argline":"const git_oid *oid","comments":"","lineto":105,"args":[{"type":"const git_oid *","name":"oid","comment":"the oid structure to format"}],"rawComments":"\n Format a git_oid into a newly allocated c-string.\n\n @param oid the oid structure to format\n @return the c-string; NULL if memory is exhausted. Caller must\n\t\t\tdeallocate the string with free().\n\n","line":98},"git_commit_tree":{"file":"commit.h","sig":"git_tree **::git_commit *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Get the tree pointed to by a commit.","group":"commit","argline":"git_tree **tree_out, git_commit *commit","comments":"","lineto":140,"args":[{"type":"git_tree **","name":"tree_out","comment":"pointer where to store the tree object"},{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the tree pointed to by a commit.\n\n @param tree_out pointer where to store the tree object\n @param commit a previously loaded commit.\n @return GIT_SUCCESS or an error code\n\n","line":133},"git_odb_new":{"file":"odb.h","sig":"git_odb **","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new object database with no backends.","group":"odb","argline":"git_odb **out","comments":"Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`","lineto":34,"args":[{"type":"git_odb **","name":"out","comment":"location to store the database pointer, if opened.    Set to NULL if the open failed."}],"rawComments":"\n Create a new object database with no backends.\n\n Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`\n\n @param out location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed.\n @return GIT_SUCCESS or an error code\n\n","line":24},"git_tag_tagger":{"file":"tag.h","sig":"git_tag *","return":{"type":"const git_signature *","comment":"reference to the tag's author"},"description":"Get the tagger (author) of a tag","group":"tag","argline":"git_tag *tag","comments":"","lineto":122,"args":[{"type":"git_tag *","name":"tag","comment":"a previously loaded tag."}],"rawComments":"\n Get the tagger (author) of a tag\n\n @param tag a previously loaded tag.\n @return reference to the tag's author\n\n","line":116},"git_treebuilder_free":{"file":"tree.h","sig":"git_treebuilder *","return":{"type":"void","comment":""},"description":"Free a tree builder","group":"treebuilder","argline":"git_treebuilder *bld","comments":"This will clear all the entries and free to builder.\n Failing to free the builder after you're done using it\n will result in a memory leak","lineto":201,"args":[{"type":"git_treebuilder *","name":"bld","comment":"Builder to free"}],"rawComments":"\n Free a tree builder\n\n This will clear all the entries and free to builder.\n Failing to free the builder after you're done using it\n will result in a memory leak\n\n @param bld Builder to free\n\n","line":192},"git_tree_create_fromindex":{"file":"tree.h","sig":"git_oid *::git_index *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Write a tree to the ODB from the index file","group":"tree","argline":"git_oid *oid, git_index *index","comments":"This method will scan the index and write a representation\n of its current state back to disk; it recursively creates\n tree objects for each of the subtrees stored in the index,\n but only returns the OID of the root tree. This is the OID\n that can be used e.g. to create a commit.\n\n The index instance cannot be bare, and needs to be associated\n to an existing repository.","lineto":164,"args":[{"type":"git_oid *","name":"oid","comment":"Pointer where to store the written tree"},{"type":"git_index *","name":"index","comment":"Index to write"}],"rawComments":"\n Write a tree to the ODB from the index file\n\n This method will scan the index and write a representation\n of its current state back to disk; it recursively creates\n tree objects for each of the subtrees stored in the index,\n but only returns the OID of the root tree. This is the OID\n that can be used e.g. to create a commit.\n\n The index instance cannot be bare, and needs to be associated\n to an existing repository.\n\n @param oid Pointer where to store the written tree\n @param index Index to write\n @return GIT_SUCCESS or an error code\n\n","line":148},"git_reflog_write":{"file":"reflog.h","sig":"git_reference *::const git_oid *::const git_signature *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Write a new reflog for the given reference","group":"reflog","argline":"git_reference *ref, const git_oid *oid_old, const git_signature *committer, const char *msg","comments":"If there is no reflog file for the given\n reference yet, it will be created.\n\n `oid_old` may be NULL in case it's a new reference.\n\n `msg` is optional and can be NULL.","lineto":51,"args":[{"type":"git_reference *","name":"ref","comment":"the changed reference"},{"type":"const git_oid *","name":"oid_old","comment":"the OID the reference was pointing to"},{"type":"const git_signature *","name":"committer","comment":"the signature of the committer"},{"type":"const char *","name":"msg","comment":"the reflog message"}],"rawComments":"\n Write a new reflog for the given reference\n\n If there is no reflog file for the given\n reference yet, it will be created.\n\n `oid_old` may be NULL in case it's a new reference.\n\n `msg` is optional and can be NULL.\n\n @param ref the changed reference\n @param oid_old the OID the reference was pointing to\n @param committer the signature of the committer\n @param msg the reflog message\n @return GIT_SUCCESS or an error code\n\n","line":35},"git_commit_create_v":{"file":"commit.h","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const char *::const git_tree *::int::","return":{"type":"int","comment":""},"description":"Create a new commit in the repository using a variable argument list.","group":"commit","argline":"git_oid *oid, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, int parent_count, ...","comments":"The parents for the commit are specified as a variable\n list of pointers to `const git_commit *`. Note that this\n is a convenience method which may not be safe to export\n for certain languages or compilers\n\n All other parameters remain the same\n\n @see git_commit_create","lineto":259,"args":[{"type":"git_oid *","name":"oid","comment":""},{"type":"git_repository *","name":"repo","comment":""},{"type":"const char *","name":"update_ref","comment":""},{"type":"const git_signature *","name":"author","comment":""},{"type":"const git_signature *","name":"committer","comment":""},{"type":"const char *","name":"message_encoding","comment":""},{"type":"const char *","name":"message","comment":""},{"type":"const git_tree *","name":"tree","comment":""},{"type":"int","name":"parent_count","comment":""},{"type":"","name":"...","comment":""}],"rawComments":"\n Create a new commit in the repository using a variable\n argument list.\n\n The parents for the commit are specified as a variable\n list of pointers to `const git_commit *`. Note that this\n is a convenience method which may not be safe to export\n for certain languages or compilers\n\n All other parameters remain the same\n\n @see git_commit_create\n\n","line":236,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_create_v-32"]}},"git_reference_lookup":{"file":"refs.h","sig":"git_reference **::git_repository *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a reference by its name in a repository.","group":"reference","argline":"git_reference **reference_out, git_repository *repo, const char *name","comments":"The generated reference is owned by the repository and\n should not be freed by the user.","lineto":34,"args":[{"type":"git_reference **","name":"reference_out","comment":"pointer to the looked-up reference"},{"type":"git_repository *","name":"repo","comment":"the repository to look up the reference"},{"type":"const char *","name":"name","comment":"the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)"}],"rawComments":"\n Lookup a reference by its name in a repository.\n\n The generated reference is owned by the repository and\n should not be freed by the user.\n\n @param reference_out pointer to the looked-up reference\n @param repo the repository to look up the reference\n @param name the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)\n @return GIT_SUCCESS or an error code\n\n","line":23,"examples":{"general.c":["ex/v0.15.0/general.html#git_reference_lookup-33"]}},"git_odb_open_rstream":{"file":"odb.h","sig":"git_odb_stream **::git_odb *::const git_oid *","return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"description":"Open a stream to read an object from the ODB","group":"odb","argline":"git_odb_stream **stream, git_odb *db, const git_oid *oid","comments":"Note that most backends do *not* support streaming reads\n because they store their objects as compressed/delta'ed blobs.\n\n It's recommended to use `git_odb_read` instead, which is\n assured to work on all backends.\n\n The returned stream will be of type `GIT_STREAM_RDONLY` and\n will have the following methods:\n\n\t\t- stream->read: read `n` bytes from the stream\n\t\t- stream->free: free the stream\n\n The stream must always be free'd or will leak memory.\n\n @see git_odb_stream","lineto":248,"args":[{"type":"git_odb_stream **","name":"stream","comment":"pointer where to store the stream"},{"type":"git_odb *","name":"db","comment":"object database where the stream will read from"},{"type":"const git_oid *","name":"oid","comment":"oid of the object the stream will read from"}],"rawComments":"\n Open a stream to read an object from the ODB\n\n Note that most backends do *not* support streaming reads\n because they store their objects as compressed/delta'ed blobs.\n\n It's recommended to use `git_odb_read` instead, which is\n assured to work on all backends.\n\n The returned stream will be of type `GIT_STREAM_RDONLY` and\n will have the following methods:\n\n\t\t- stream->read: read `n` bytes from the stream\n\t\t- stream->free: free the stream\n\n The stream must always be free'd or will leak memory.\n\n @see git_odb_stream\n\n @param stream pointer where to store the stream\n @param db object database where the stream will read from\n @param oid oid of the object the stream will read from\n @return 0 if the stream was created; error code otherwise\n\n","line":224},"git_config_file__ondisk":{"file":"config.h","sig":"struct git_config_file **::const char *","return":{"type":"int","comment":""},"description":"Create a configuration file backend for ondisk files","group":"config","argline":"struct git_config_file **out, const char *path","comments":"These are the normal `.gitconfig` files that Core Git\n processes. Note that you first have to add this file to a\n configuration object before you can query it for configuration\n variables.","lineto":88,"args":[{"type":"struct git_config_file **","name":"out","comment":"the new backend"},{"type":"const char *","name":"path","comment":"where the config file is located"}],"rawComments":"\n Create a configuration file backend for ondisk files\n\n These are the normal `.gitconfig` files that Core Git\n processes. Note that you first have to add this file to a\n configuration object before you can query it for configuration\n variables.\n\n @param out the new backend\n @param path where the config file is located\n\n","line":77},"git_repository_discover":{"file":"repository.h","sig":"char *::size_t::const char *::int::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Look for a git repository and copy its path in the given buffer. The lookup start from base_path and walk across parent directories if nothing has been found. The lookup ends when the first repository is found, or when reaching a directory referenced in ceiling_dirs or when the filesystem changes (in case across_fs is true).","group":"repository","argline":"char *repository_path, size_t size, const char *start_path, int across_fs, const char *ceiling_dirs","comments":"The method will automatically detect if the repository is bare (if there is\n a repository).","lineto":143,"args":[{"type":"char *","name":"repository_path","comment":"The user allocated buffer which will contain the found path."},{"type":"size_t","name":"size","comment":"repository_path size"},{"type":"const char *","name":"start_path","comment":"The base path where the lookup starts."},{"type":"int","name":"across_fs","comment":"If true, then the lookup will not stop when a filesystem device change  is detected while exploring parent directories."},{"type":"const char *","name":"ceiling_dirs","comment":"A GIT_PATH_LIST_SEPARATOR separated list of absolute symbolic link  free paths. The lookup will stop when any of this paths is reached. Note that the  lookup always performs on start_path no matter start_path appears in ceiling_dirs  ceiling_dirs might be NULL (which is equivalent to an empty string)"}],"rawComments":"\n Look for a git repository and copy its path in the given buffer. The lookup start\n from base_path and walk across parent directories if nothing has been found. The\n lookup ends when the first repository is found, or when reaching a directory\n referenced in ceiling_dirs or when the filesystem changes (in case across_fs\n is true).\n\n The method will automatically detect if the repository is bare (if there is\n a repository).\n\n @param repository_path The user allocated buffer which will contain the found path.\n\n @param size repository_path size\n\n @param start_path The base path where the lookup starts.\n\n @param across_fs If true, then the lookup will not stop when a filesystem device change\n is detected while exploring parent directories.\n\n @param ceiling_dirs A GIT_PATH_LIST_SEPARATOR separated list of absolute symbolic link\n free paths. The lookup will stop when any of this paths is reached. Note that the\n lookup always performs on start_path no matter start_path appears in ceiling_dirs\n ceiling_dirs might be NULL (which is equivalent to an empty string)\n\n @return GIT_SUCCESS or an error code\n\n","line":117},"git_commit_committer":{"file":"commit.h","sig":"git_commit *","return":{"type":"const git_signature *","comment":"the committer of a commit"},"description":"Get the committer of a commit.","group":"commit","argline":"git_commit *commit","comments":"","lineto":123,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the committer of a commit.\n\n @param commit a previously loaded commit.\n @return the committer of a commit\n\n","line":117,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_committer-34"]}},"git_reference_resolve":{"file":"refs.h","sig":"git_reference **::git_reference *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Resolve a symbolic reference","group":"reference","argline":"git_reference **resolved_ref, git_reference *ref","comments":"Thie method iteratively peels a symbolic reference\n until it resolves to a direct reference to an OID.\n\n If a direct reference is passed as an argument,\n that reference is returned immediately","lineto":129,"args":[{"type":"git_reference **","name":"resolved_ref","comment":"Pointer to the peeled reference"},{"type":"git_reference *","name":"ref","comment":"The reference"}],"rawComments":"\n Resolve a symbolic reference\n\n Thie method iteratively peels a symbolic reference\n until it resolves to a direct reference to an OID.\n\n If a direct reference is passed as an argument,\n that reference is returned immediately\n\n @param resolved_ref Pointer to the peeled reference\n @param ref The reference\n @return GIT_SUCCESS or an error code\n\n","line":116},"git_reference_name":{"file":"refs.h","sig":"git_reference *","return":{"type":"const char *","comment":"the full name for the ref"},"description":"Get the full name of a reference","group":"reference","argline":"git_reference *ref","comments":"","lineto":114,"args":[{"type":"git_reference *","name":"ref","comment":"The reference"}],"rawComments":"\n Get the full name of a reference\n\n @param ref The reference\n @return the full name for the ref\n\n","line":108},"git_tag_lookup_prefix":{"file":"tag.h","sig":"git_tag **::git_repository *::const git_oid *::unsigned int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a tag object from the repository, given a prefix of its identifier (short id).","group":"tag","argline":"git_tag **tag, git_repository *repo, const git_oid *id, unsigned int len","comments":"@see git_object_lookup_prefix","lineto":52,"args":[{"type":"git_tag **","name":"tag","comment":"pointer to the looked up tag"},{"type":"git_repository *","name":"repo","comment":"the repo to use when locating the tag."},{"type":"const git_oid *","name":"id","comment":"identity of the tag to locate."},{"type":"unsigned int","name":"len","comment":"the length of the short identifier"}],"rawComments":"\n Lookup a tag object from the repository,\n given a prefix of its identifier (short id).\n\n @see git_object_lookup_prefix\n\n @param tag pointer to the looked up tag\n @param repo the repo to use when locating the tag.\n @param id identity of the tag to locate.\n @param len the length of the short identifier\n @return GIT_SUCCESS or an error code\n\n","line":37},"git_odb_exists":{"file":"odb.h","sig":"git_odb *::const git_oid *","return":{"type":"int","comment":""},"description":"Determine if the given object can be found in the object database.","group":"odb","argline":"git_odb *db, const git_oid *id","comments":"@return\n - 1, if the object was found\n - 0, otherwise","lineto":173,"args":[{"type":"git_odb *","name":"db","comment":"database to be searched for the given object."},{"type":"const git_oid *","name":"id","comment":"the object to search for."}],"rawComments":"\n Determine if the given object can be found in the object database.\n\n @param db database to be searched for the given object.\n @param id the object to search for.\n @return\n - 1, if the object was found\n - 0, otherwise\n\n","line":164},"git_config_set_bool":{"file":"config.h","sig":"git_config *::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Set the value of a boolean config variable.","group":"config","argline":"git_config *cfg, const char *name, int value","comments":"","lineto":235,"args":[{"type":"git_config *","name":"cfg","comment":"where to look for the variable"},{"type":"const char *","name":"name","comment":"the variable's name"},{"type":"int","name":"value","comment":"the value to store"}],"rawComments":"\n Set the value of a boolean config variable.\n\n @param cfg where to look for the variable\n @param name the variable's name\n @param value the value to store\n @return GIT_SUCCESS or an error code\n\n","line":227},"git_tag_message":{"file":"tag.h","sig":"git_tag *","return":{"type":"const char *","comment":"message of the tag"},"description":"Get the message of a tag","group":"tag","argline":"git_tag *tag","comments":"","lineto":130,"args":[{"type":"git_tag *","name":"tag","comment":"a previously loaded tag."}],"rawComments":"\n Get the message of a tag\n\n @param tag a previously loaded tag.\n @return message of the tag\n\n","line":124,"examples":{"general.c":["ex/v0.15.0/general.html#git_tag_message-35"]}},"git_signature_now":{"file":"signature.h","sig":"git_signature **::const char *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new action signature with a timestamp of 'now'. The signature must be freed manually or using git_signature_free","group":"signature","argline":"git_signature **sig_out, const char *name, const char *email","comments":"","lineto":44,"args":[{"type":"git_signature **","name":"sig_out","comment":"new signature, in case of error NULL"},{"type":"const char *","name":"name","comment":"name of the person"},{"type":"const char *","name":"email","comment":"email of the person"}],"rawComments":"\n Create a new action signature with a timestamp of 'now'. The\n signature must be freed manually or using git_signature_free\n\n @param sig_out new signature, in case of error NULL\n @param name name of the person\n @param email email of the person\n @return GIT_SUCCESS or an error code\n\n","line":35},"git_reference_owner":{"file":"refs.h","sig":"git_reference *","return":{"type":"git_repository *","comment":"a pointer to the repo"},"description":"Get the repository where a reference resides","group":"reference","argline":"git_reference *ref","comments":"","lineto":137,"args":[{"type":"git_reference *","name":"ref","comment":"The reference"}],"rawComments":"\n Get the repository where a reference resides\n\n @param ref The reference\n @return a pointer to the repo\n\n","line":131},"git_reference_packall":{"file":"refs.h","sig":"git_repository *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Pack all the loose references in the repository","group":"reference","argline":"git_repository *repo","comments":"This method will load into the cache all the loose\n references on the repository and update the\n `packed-refs` file with them.\n\n Once the `packed-refs` file has been written properly,\n the loose references will be removed from disk.\n\n WARNING: calling this method may invalidate any existing\n references previously loaded on the cache.","lineto":209,"args":[{"type":"git_repository *","name":"repo","comment":"Repository where the loose refs will be packed"}],"rawComments":"\n Pack all the loose references in the repository\n\n This method will load into the cache all the loose\n references on the repository and update the\n `packed-refs` file with them.\n\n Once the `packed-refs` file has been written properly,\n the loose references will be removed from disk.\n\n WARNING: calling this method may invalidate any existing\n references previously loaded on the cache.\n\n @param repo Repository where the loose refs will be packed\n @return GIT_SUCCESS or an error code\n\n","line":193},"git_strerror":{"file":"errors.h","sig":"int","return":{"type":"const char *","comment":"a string explaining the error code"},"description":"strerror() for the Git library","group":"errors","argline":"int num","comments":"Get a string description for a given error code.\n NOTE: This method will be eventually deprecated in favor\n of the new `git_lasterror`.","lineto":135,"args":[{"type":"int","name":"num","comment":"The error code to explain"}],"rawComments":"\n strerror() for the Git library\n\n Get a string description for a given error code.\n NOTE: This method will be eventually deprecated in favor\n of the new `git_lasterror`.\n\n @param num The error code to explain\n @return a string explaining the error code\n\n","line":125},"git_reflog_entry_oidnew":{"file":"reflog.h","sig":"const git_reflog_entry *","return":{"type":"const git_oid *","comment":"the new oid at this time"},"description":"Get the new oid","group":"reflog","argline":"const git_reflog_entry *entry","comments":"","lineto":84,"args":[{"type":"const git_reflog_entry *","name":"entry","comment":"a reflog entry"}],"rawComments":"\n Get the new oid\n\n @param entry a reflog entry\n @return the new oid at this time\n\n","line":78},"git_index_remove":{"file":"index.h","sig":"git_index *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Remove an entry from the index","group":"index","argline":"git_index *index, int position","comments":"","lineto":234,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"},{"type":"int","name":"position","comment":"position of the entry to remove"}],"rawComments":"\n Remove an entry from the index\n\n @param index an existing index object\n @param position position of the entry to remove\n @return GIT_SUCCESS or an error code\n\n","line":227},"git_oid_pathfmt":{"file":"oid.h","sig":"char *::const git_oid *","return":{"type":"void","comment":""},"description":"Format a git_oid into a loose-object path string.","group":"oid","argline":"char *str, const git_oid *oid","comments":"The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digitis of the oid and \"...\" is the remaining 38 digits.","lineto":96,"args":[{"type":"char *","name":"str","comment":"output hex string; must be pointing at the start of   the hex sequence and have at least the number of bytes   needed for an oid encoded in hex (41 bytes). Only the   oid digits are written; a '\\\\0' terminator must be added   by the caller if it is required."},{"type":"const git_oid *","name":"oid","comment":"oid structure to format."}],"rawComments":"\n Format a git_oid into a loose-object path string.\n\n The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digitis of the oid and \"...\" is the remaining 38 digits.\n\n @param str output hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (41 bytes). Only the\n\t\toid digits are written; a '\\\\0' terminator must be added\n\t\tby the caller if it is required.\n @param oid oid structure to format.\n\n","line":83},"git_oid_fromstrn":{"file":"oid.h","sig":"git_oid *::const char *::size_t","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Parse N characters of a hex formatted object id into a git_oid","group":"oid","argline":"git_oid *out, const char *str, size_t length","comments":"If N is odd, N-1 characters will be parsed instead.\n The remaining space in the git_oid will be set to zero.","lineto":61,"args":[{"type":"git_oid *","name":"out","comment":"oid structure the result is written into."},{"type":"const char *","name":"str","comment":"input hex string of at least size `length`"},{"type":"size_t","name":"length","comment":"length of the input string"}],"rawComments":"\n Parse N characters of a hex formatted object id into a git_oid\n\n If N is odd, N-1 characters will be parsed instead.\n The remaining space in the git_oid will be set to zero.\n\n @param out oid structure the result is written into.\n @param str input hex string of at least size `length`\n @param length length of the input string\n @return GIT_SUCCESS or an error code\n\n","line":50},"git_blob_rawsize":{"file":"blob.h","sig":"git_blob *","return":{"type":"size_t","comment":"size on bytes"},"description":"Get the size in bytes of the contents of a blob","group":"blob","argline":"git_blob *blob","comments":"","lineto":91,"args":[{"type":"git_blob *","name":"blob","comment":"pointer to the blob"}],"rawComments":"\n Get the size in bytes of the contents of a blob\n\n @param blob pointer to the blob\n @return size on bytes\n\n","line":85,"examples":{"general.c":["ex/v0.15.0/general.html#git_blob_rawsize-36","ex/v0.15.0/general.html#git_blob_rawsize-37"]}},"git_revwalk_sorting":{"file":"revwalk.h","sig":"git_revwalk *::unsigned int","return":{"type":"void","comment":""},"description":"Change the sorting mode when iterating through the repository's contents.","group":"revwalk","argline":"git_revwalk *walk, unsigned int sort_mode","comments":"Changing the sorting mode resets the walker.","lineto":149,"args":[{"type":"git_revwalk *","name":"walk","comment":"the walker being used for the traversal."},{"type":"unsigned int","name":"sort_mode","comment":"combination of GIT_SORT_XXX flags"}],"rawComments":"\n Change the sorting mode when iterating through the\n repository's contents.\n\n Changing the sorting mode resets the walker.\n\n @param walk the walker being used for the traversal.\n @param sort_mode combination of GIT_SORT_XXX flags\n\n","line":140,"examples":{"general.c":["ex/v0.15.0/general.html#git_revwalk_sorting-38"]}},"git_odb_backend_pack":{"file":"odb_backend.h","sig":"git_odb_backend **::const char *","return":{"type":"int","comment":""},"description":"Streaming mode","group":"odb","argline":"git_odb_backend **backend_out, const char *objects_dir","comments":"","lineto":95,"args":[{"type":"git_odb_backend **","name":"backend_out","comment":""},{"type":"const char *","name":"objects_dir","comment":""}],"rawComments":" Streaming mode ","line":88},"git_commit_close":{"file":"commit.h","sig":"git_commit *","return":{"type":"void","comment":""},"description":"Close an open commit","group":"commit","argline":"git_commit *commit","comments":"This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a commit. Failure to do so will cause a memory leak.","lineto":71,"args":[{"type":"git_commit *","name":"commit","comment":"the commit to close"}],"rawComments":"\n Close an open commit\n\n This is a wrapper around git_object_close()\n\n IMPORTANT:\n It *is* necessary to call this method when you stop\n using a commit. Failure to do so will cause a memory leak.\n\n @param commit the commit to close\n\n","line":56,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_close-39","ex/v0.15.0/general.html#git_commit_close-40","ex/v0.15.0/general.html#git_commit_close-41","ex/v0.15.0/general.html#git_commit_close-42"]}},"git_config_free":{"file":"config.h","sig":"git_config *","return":{"type":"void","comment":""},"description":"Free the configuration and its associated memory and files","group":"config","argline":"git_config *cfg","comments":"","lineto":159,"args":[{"type":"git_config *","name":"cfg","comment":"the configuration to free"}],"rawComments":"\n Free the configuration and its associated memory and files\n\n @param cfg the configuration to free\n\n","line":154},"git_config_add_file":{"file":"config.h","sig":"git_config *::git_config_file *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Add a generic config file instance to an existing config","group":"config","argline":"git_config *cfg, git_config_file *file, int priority","comments":"Note that the configuration object will free the file\n automatically.\n\n Further queries on this config object will access each\n of the config file instances in order (instances with\n a higher priority will be accessed first).","lineto":116,"args":[{"type":"git_config *","name":"cfg","comment":"the configuration to add the file to"},{"type":"git_config_file *","name":"file","comment":"the configuration file (backend) to add"},{"type":"int","name":"priority","comment":"the priority the backend should have"}],"rawComments":"\n Add a generic config file instance to an existing config\n\n Note that the configuration object will free the file\n automatically.\n\n Further queries on this config object will access each\n of the config file instances in order (instances with\n a higher priority will be accessed first).\n\n @param cfg the configuration to add the file to\n @param file the configuration file (backend) to add\n @param priority the priority the backend should have\n @return GIT_SUCCESS or an error code\n\n","line":101},"imaxdiv":{"file":"inttypes.h","sig":"intmax_t::intmax_t denom) { imaxdiv_t result; result.quot = numer / denom; result.rem = numer % denom; if (numer < 0 && result.rem >","return":{"type":"static _inline imaxdiv_t __cdecl","comment":""},"description":"","group":"inttypes","argline":"intmax_t numer, intmax_t denom) { imaxdiv_t result; result.quot = numer / denom; result.rem = numer % denom; if (numer < 0 && result.rem > 0","comments":"","lineto":287,"args":[{"type":"intmax_t","name":"numer","comment":""},{"type":"intmax_t denom) { imaxdiv_t result; result.quot = numer / denom; result.rem = numer % denom; if (numer < 0 && result.rem >","name":"0","comment":""}],"rawComments":"","line":274},"git_repository_head":{"file":"repository.h","sig":"git_reference **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Retrieve and resolve the reference pointed at by HEAD.","group":"repository","argline":"git_reference **head_out, git_repository *repo","comments":"","lineto":211,"args":[{"type":"git_reference **","name":"head_out","comment":"pointer to the reference which will be retrieved"},{"type":"git_repository *","name":"repo","comment":"a repository object"}],"rawComments":"\n Retrieve and resolve the reference pointed at by HEAD.\n\n @param head_out pointer to the reference which will be retrieved\n @param repo a repository object\n\n @return 0 on success; error code otherwise\n\n","line":203},"git_tree_entry_byindex":{"file":"tree.h","sig":"git_tree *::unsigned int","return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"Lookup a tree entry by its position in the tree","group":"tree","argline":"git_tree *tree, unsigned int idx","comments":"","lineto":104,"args":[{"type":"git_tree *","name":"tree","comment":"a previously loaded tree."},{"type":"unsigned int","name":"idx","comment":"the position in the entry list"}],"rawComments":"\n Lookup a tree entry by its position in the tree\n\n @param tree a previously loaded tree.\n @param idx the position in the entry list\n @return the tree entry; NULL if not found\n\n","line":97,"examples":{"general.c":["ex/v0.15.0/general.html#git_tree_entry_byindex-43"]}},"git_tree_id":{"file":"tree.h","sig":"git_tree *","return":{"type":"const git_oid *","comment":"object identity for the tree."},"description":"Get the id of a tree.","group":"tree","argline":"git_tree *tree","comments":"","lineto":78,"args":[{"type":"git_tree *","name":"tree","comment":"a previously loaded tree."}],"rawComments":"\n Get the id of a tree.\n\n @param tree a previously loaded tree.\n @return object identity for the tree.\n\n","line":72},"git_index_get_unmerged_bypath":{"file":"index.h","sig":"git_index *::const char *","return":{"type":"const git_index_entry_unmerged *","comment":"the unmerged entry; NULL if not found"},"description":"Get an unmerged entry from the index.","group":"index","argline":"git_index *index, const char *path","comments":"The returned entry is read-only and should not be modified\n of freed by the caller.","lineto":277,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"},{"type":"const char *","name":"path","comment":"path to search"}],"rawComments":"\n Get an unmerged entry from the index.\n\n The returned entry is read-only and should not be modified\n of freed by the caller.\n\n @param index an existing index object\n @param path path to search\n @return the unmerged entry; NULL if not found\n\n","line":267},"git_index_find":{"file":"index.h","sig":"git_index *::const char *","return":{"type":"int","comment":"an index >= 0 if found, -1 otherwise"},"description":"Find the first index of any entries which point to given path in the Git index.","group":"index","argline":"git_index *index, const char *path","comments":"","lineto":155,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"},{"type":"const char *","name":"path","comment":"path to search"}],"rawComments":"\n Find the first index of any entries which point to given\n path in the Git index.\n\n @param index an existing index object\n @param path path to search\n @return an index >= 0 if found, -1 otherwise\n\n","line":147},"git_commit_parent_oid":{"file":"commit.h","sig":"git_commit *::unsigned int","return":{"type":"const git_oid *","comment":"the id of the parent, NULL on error."},"description":"Get the oid of a specified parent for a commit. This is different from `git_commit_parent`, which will attempt to load the parent commit from the ODB.","group":"commit","argline":"git_commit *commit, unsigned int n","comments":"","lineto":179,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."},{"type":"unsigned int","name":"n","comment":"the position of the parent (from 0 to `parentcount`)"}],"rawComments":"\n Get the oid of a specified parent for a commit. This is different from\n `git_commit_parent`, which will attempt to load the parent commit from\n the ODB.\n\n @param commit a previously loaded commit.\n @param n the position of the parent (from 0 to `parentcount`)\n @return the id of the parent, NULL on error.\n\n","line":170},"git_commit_parent":{"file":"commit.h","sig":"git_commit **::git_commit *::unsigned int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Get the specified parent of the commit.","group":"commit","argline":"git_commit **parent, git_commit *commit, unsigned int n","comments":"","lineto":168,"args":[{"type":"git_commit **","name":"parent","comment":"Pointer where to store the parent commit"},{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."},{"type":"unsigned int","name":"n","comment":"the position of the parent (from 0 to `parentcount`)"}],"rawComments":"\n Get the specified parent of the commit.\n\n @param parent Pointer where to store the parent commit\n @param commit a previously loaded commit.\n @param n the position of the parent (from 0 to `parentcount`)\n @return GIT_SUCCESS or an error code\n\n","line":160,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_parent-44"]}},"git_tag_lookup":{"file":"tag.h","sig":"git_tag **::git_repository *::const git_oid *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a tag object from the repository.","group":"tag","argline":"git_tag **tag, git_repository *repo, const git_oid *id","comments":"","lineto":35,"args":[{"type":"git_tag **","name":"tag","comment":"pointer to the looked up tag"},{"type":"git_repository *","name":"repo","comment":"the repo to use when locating the tag."},{"type":"const git_oid *","name":"id","comment":"identity of the tag to locate."}],"rawComments":"\n Lookup a tag object from the repository.\n\n @param tag pointer to the looked up tag\n @param repo the repo to use when locating the tag.\n @param id identity of the tag to locate.\n @return GIT_SUCCESS or an error code\n\n","line":24,"examples":{"general.c":["ex/v0.15.0/general.html#git_tag_lookup-45"]}},"git_commit_id":{"file":"commit.h","sig":"git_commit *","return":{"type":"const git_oid *","comment":"object identity for the commit."},"description":"Get the id of a commit.","group":"commit","argline":"git_commit *commit","comments":"","lineto":79,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the id of a commit.\n\n @param commit a previously loaded commit.\n @return object identity for the commit.\n\n","line":73,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_id-46"]}},"git_commit_lookup_prefix":{"file":"commit.h","sig":"git_commit **::git_repository *::const git_oid *::unsigned","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a commit object from a repository, given a prefix of its identifier (short id).","group":"commit","argline":"git_commit **commit, git_repository *repo, const git_oid *id, unsigned len","comments":"@see git_object_lookup_prefix","lineto":54,"args":[{"type":"git_commit **","name":"commit","comment":"pointer to the looked up commit"},{"type":"git_repository *","name":"repo","comment":"the repo to use when locating the commit."},{"type":"const git_oid *","name":"id","comment":"identity of the commit to locate. If the object is   an annotated tag it will be peeled back to the commit."},{"type":"unsigned","name":"len","comment":"the length of the short identifier"}],"rawComments":"\n Lookup a commit object from a repository,\n given a prefix of its identifier (short id).\n\n @see git_object_lookup_prefix\n\n @param commit pointer to the looked up commit\n @param repo the repo to use when locating the commit.\n @param id identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit.\n @param len the length of the short identifier\n @return GIT_SUCCESS or an error code\n\n","line":38},"git_odb_backend_loose":{"file":"odb_backend.h","sig":"git_odb_backend **::const char *::int::int","return":{"type":"int","comment":""},"description":"","group":"odb","argline":"git_odb_backend **backend_out, const char *objects_dir, int compression_level, int do_fsync","comments":"","lineto":96,"args":[{"type":"git_odb_backend **","name":"backend_out","comment":""},{"type":"const char *","name":"objects_dir","comment":""},{"type":"int","name":"compression_level","comment":""},{"type":"int","name":"do_fsync","comment":""}],"rawComments":"","line":96},"git_lasterror":{"file":"errors.h","sig":"","return":{"type":"const char *","comment":"a string explaining the error"},"description":"Return a detailed error string with the latest error that occurred in the library.","group":"errors","argline":"void","comments":"","lineto":123,"args":[{"type":"","name":"void","comment":""}],"rawComments":"\n Return a detailed error string with the latest error\n that occurred in the library.\n @return a string explaining the error\n\n","line":118},"git_remote_free":{"file":"remote.h","sig":"struct git_remote *","return":{"type":"void","comment":""},"description":"Free the memory associated with a remote","group":"remote","argline":"struct git_remote *remote","comments":"","lineto":136,"args":[{"type":"struct git_remote *","name":"remote","comment":"the remote to free"}],"rawComments":"\n Free the memory associated with a remote\n\n @param remote the remote to free\n\n","line":131},"git_remote_fetchspec":{"file":"remote.h","sig":"struct git_remote *","return":{"type":"const git_refspec *","comment":"a pointer to the fetch refspec or NULL if it doesn't exist"},"description":"Get the fetch refspec","group":"remote","argline":"struct git_remote *remote","comments":"","lineto":74,"args":[{"type":"struct git_remote *","name":"remote","comment":"the remote"}],"rawComments":"\n Get the fetch refspec\n\n @param remote the remote\n @return a pointer to the fetch refspec or NULL if it doesn't exist\n\n","line":68},"git_index_read":{"file":"index.h","sig":"git_index *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Update the contents of an existing index object in memory by reading from the hard disk.","group":"index","argline":"git_index *index","comments":"","lineto":136,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"}],"rawComments":"\n Update the contents of an existing index object in memory\n by reading from the hard disk.\n\n @param index an existing index object\n @return GIT_SUCCESS or an error code\n\n","line":129,"examples":{"showindex.c":["ex/v0.15.0/showindex.html#git_index_read-5"]}},"git_repository_head_detached":{"file":"repository.h","sig":"git_repository *","return":{"type":"int","comment":"1 if HEAD is detached, 0 if i'ts not; error code if there  was an error."},"description":"Check if a repository's HEAD is detached","group":"repository","argline":"git_repository *repo","comments":"A repository's HEAD is detached when it points directly to a commit\n instead of a branch.","lineto":223,"args":[{"type":"git_repository *","name":"repo","comment":"Repo to test"}],"rawComments":"\n Check if a repository's HEAD is detached\n\n A repository's HEAD is detached when it points directly to a commit\n instead of a branch.\n\n @param repo Repo to test\n @return 1 if HEAD is detached, 0 if i'ts not; error code if there\n was an error.\n\n","line":213},"git_repository_open":{"file":"repository.h","sig":"git_repository **::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Open a git repository.","group":"repository","argline":"git_repository **repository, const char *path","comments":"The 'path' argument must point to an existing git repository\n folder, e.g.\n\n\t\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD\n\n\t\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\tThe method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither.","lineto":46,"args":[{"type":"git_repository **","name":"repository","comment":"pointer to the repo which will be opened"},{"type":"const char *","name":"path","comment":"the path to the repository"}],"rawComments":"\n Open a git repository.\n\n The 'path' argument must point to an existing git repository\n folder, e.g.\n\n\t\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD\n\n\t\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\tThe method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither.\n\n @param repository pointer to the repo which will be opened\n @param path the path to the repository\n @return GIT_SUCCESS or an error code\n\n","line":23,"examples":{"showindex.c":["ex/v0.15.0/showindex.html#git_repository_open-6"],"general.c":["ex/v0.15.0/general.html#git_repository_open-47","ex/v0.15.0/general.html#git_repository_open-48"]}},"git_odb_read_header":{"file":"odb.h","sig":"size_t *::git_otype *::git_odb *::const git_oid *","return":{"type":"int","comment":""},"description":"Read the header of an object from the database, without reading its full contents.","group":"odb","argline":"size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id","comments":"The header includes the length and the type of an object.\n\n Note that most backends do not support reading only the header\n of an object, so the whole object will be read and then the\n header will be returned.\n\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.","lineto":162,"args":[{"type":"size_t *","name":"len_p","comment":"pointer where to store the length"},{"type":"git_otype *","name":"type_p","comment":"pointer where to store the type"},{"type":"git_odb *","name":"db","comment":"database to search for the object in."},{"type":"const git_oid *","name":"id","comment":"identity of the object to read."}],"rawComments":"\n Read the header of an object from the database, without\n reading its full contents.\n\n The header includes the length and the type of an object.\n\n Note that most backends do not support reading only the header\n of an object, so the whole object will be read and then the\n header will be returned.\n\n @param len_p pointer where to store the length\n @param type_p pointer where to store the type\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n\n","line":144},"git_object_lookup_prefix":{"file":"object.h","sig":"git_object **::git_repository *::const git_oid *::unsigned int::git_otype","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a reference to one of the objects in a repostory, given a prefix of its identifier (short id).","group":"object","argline":"git_object **object_out, git_repository *repo, const git_oid *id, unsigned int len, git_otype type","comments":"The object obtained will be so that its identifier\n matches the first 'len' hexadecimal characters\n (packets of 4 bits) of the given 'id'.\n 'len' must be at least GIT_OID_MINPREFIXLEN, and\n long enough to identify a unique object matching\n the prefix; otherwise the method will fail.\n\n The generated reference is owned by the repository and\n should be closed with the `git_object_close` method\n instead of free'd manually.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.","lineto":79,"args":[{"type":"git_object **","name":"object_out","comment":"pointer where to store the looked-up object"},{"type":"git_repository *","name":"repo","comment":"the repository to look up the object"},{"type":"const git_oid *","name":"id","comment":"a short identifier for the object"},{"type":"unsigned int","name":"len","comment":"the length of the short identifier"},{"type":"git_otype","name":"type","comment":"the type of the object"}],"rawComments":"\n Lookup a reference to one of the objects in a repostory,\n given a prefix of its identifier (short id).\n\n The object obtained will be so that its identifier\n matches the first 'len' hexadecimal characters\n (packets of 4 bits) of the given 'id'.\n 'len' must be at least GIT_OID_MINPREFIXLEN, and\n long enough to identify a unique object matching\n the prefix; otherwise the method will fail.\n\n The generated reference is owned by the repository and\n should be closed with the `git_object_close` method\n instead of free'd manually.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.\n\n @param object_out pointer where to store the looked-up object\n @param repo the repository to look up the object\n @param id a short identifier for the object\n @param len the length of the short identifier\n @param type the type of the object\n @return GIT_SUCCESS or an error code\n\n","line":47},"git_tag_target_oid":{"file":"tag.h","sig":"git_tag *","return":{"type":"const git_oid *","comment":"pointer to the OID"},"description":"Get the OID of the tagged object of a tag","group":"tag","argline":"git_tag *tag","comments":"","lineto":98,"args":[{"type":"git_tag *","name":"tag","comment":"a previously loaded tag."}],"rawComments":"\n Get the OID of the tagged object of a tag\n\n @param tag a previously loaded tag.\n @return pointer to the OID\n\n","line":92},"git_signature_free":{"file":"signature.h","sig":"git_signature *","return":{"type":"void","comment":""},"description":"Free an existing signature","group":"signature","argline":"git_signature *sig","comments":"","lineto":61,"args":[{"type":"git_signature *","name":"sig","comment":"signature to free"}],"rawComments":"\n Free an existing signature\n\n @param sig signature to free\n\n","line":56},"git_repository_path":{"file":"repository.h","sig":"git_repository *::git_repository_pathid","return":{"type":"const char *","comment":"absolute path of the requested id"},"description":"Get one of the paths to the repository","group":"repository","argline":"git_repository *repo, git_repository_pathid id","comments":"Possible values for `id`:\n\n\tGIT_REPO_PATH: return the path to the repository\n\tGIT_REPO_PATH_INDEX: return the path to the index\n\tGIT_REPO_PATH_ODB: return the path to the ODB\n\tGIT_REPO_PATH_WORKDIR: return the path to the working\n\t\tdirectory","lineto":274,"args":[{"type":"git_repository *","name":"repo","comment":"a repository object"},{"type":"git_repository_pathid","name":"id","comment":"The ID of the path to return"}],"rawComments":"\n Get one of the paths to the repository\n\n Possible values for `id`:\n\n\tGIT_REPO_PATH: return the path to the repository\n\tGIT_REPO_PATH_INDEX: return the path to the index\n\tGIT_REPO_PATH_ODB: return the path to the ODB\n\tGIT_REPO_PATH_WORKDIR: return the path to the working\n\t\tdirectory\n\n @param repo a repository object\n @param id The ID of the path to return\n @return absolute path of the requested id\n\n","line":259},"git_commit_author":{"file":"commit.h","sig":"git_commit *","return":{"type":"const git_signature *","comment":"the author of a commit"},"description":"Get the author of a commit.","group":"commit","argline":"git_commit *commit","comments":"","lineto":131,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the author of a commit.\n\n @param commit a previously loaded commit.\n @return the author of a commit\n\n","line":125,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_author-49","ex/v0.15.0/general.html#git_commit_author-50"]}},"git_reference_listall":{"file":"refs.h","sig":"git_strarray *::git_repository *::unsigned int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Fill a list with all the references that can be found in a repository.","group":"reference","argline":"git_strarray *array, git_repository *repo, unsigned int list_flags","comments":"The listed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.\n\n The string array will be filled with the names of all\n references; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.","lineto":232,"args":[{"type":"git_strarray *","name":"array","comment":"Pointer to a git_strarray structure where   the reference names will be stored"},{"type":"git_repository *","name":"repo","comment":"Repository where to find the refs"},{"type":"unsigned int","name":"list_flags","comment":"Filtering flags for the reference   listing."}],"rawComments":"\n Fill a list with all the references that can be found\n in a repository.\n\n The listed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.\n\n The string array will be filled with the names of all\n references; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.\n\n @param array Pointer to a git_strarray structure where\n\t\tthe reference names will be stored\n @param repo Repository where to find the refs\n @param list_flags Filtering flags for the reference\n\t\tlisting.\n @return GIT_SUCCESS or an error code\n\n","line":211,"examples":{"general.c":["ex/v0.15.0/general.html#git_reference_listall-51"]}},"git_odb_write":{"file":"odb.h","sig":"git_oid *::git_odb *::const void *::size_t::git_otype","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Write an object directly into the ODB","group":"odb","argline":"git_oid *oid, git_odb *odb, const void *data, size_t len, git_otype type","comments":"This method writes a full object straight into the ODB.\n For most cases, it is preferred to write objects through a write\n stream, which is both faster and less memory intensive, specially\n for big objects.\n\n This method is provided for compatibility with custom backends\n which are not able to support streaming writes","lineto":193,"args":[{"type":"git_oid *","name":"oid","comment":"pointer to store the OID result of the write"},{"type":"git_odb *","name":"odb","comment":"object database where to store the object"},{"type":"const void *","name":"data","comment":"buffer with the data to storr"},{"type":"size_t","name":"len","comment":"size of the buffer"},{"type":"git_otype","name":"type","comment":"type of the data to store"}],"rawComments":"\n Write an object directly into the ODB\n\n This method writes a full object straight into the ODB.\n For most cases, it is preferred to write objects through a write\n stream, which is both faster and less memory intensive, specially\n for big objects.\n\n This method is provided for compatibility with custom backends\n which are not able to support streaming writes\n\n @param oid pointer to store the OID result of the write\n @param odb object database where to store the object\n @param data buffer with the data to storr\n @param len size of the buffer\n @param type type of the data to store\n @return GIT_SUCCESS or an error code\n\n","line":175,"examples":{"general.c":["ex/v0.15.0/general.html#git_odb_write-52"]}},"git_odb_open_wstream":{"file":"odb.h","sig":"git_odb_stream **::git_odb *::size_t::git_otype","return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"description":"Open a stream to write an object into the ODB","group":"odb","argline":"git_odb_stream **stream, git_odb *db, size_t size, git_otype type","comments":"The type and final length of the object must be specified\n when opening the stream.\n\n The returned stream will be of type `GIT_STREAM_WRONLY` and\n will have the following methods:\n\n\t\t- stream->write: write `n` bytes into the stream\n\t\t- stream->finalize_write: close the stream and store the object in\n\t\t\tthe odb\n\t\t- stream->free: free the stream\n\n The streaming write won't be effective until `stream->finalize_write`\n is called and returns without an error\n\n The stream must always be free'd or will leak memory.\n\n @see git_odb_stream","lineto":222,"args":[{"type":"git_odb_stream **","name":"stream","comment":"pointer where to store the stream"},{"type":"git_odb *","name":"db","comment":"object database where the stream will write"},{"type":"size_t","name":"size","comment":"final size of the object that will be written"},{"type":"git_otype","name":"type","comment":"type of the object that will be written"}],"rawComments":"\n Open a stream to write an object into the ODB\n\n The type and final length of the object must be specified\n when opening the stream.\n\n The returned stream will be of type `GIT_STREAM_WRONLY` and\n will have the following methods:\n\n\t\t- stream->write: write `n` bytes into the stream\n\t\t- stream->finalize_write: close the stream and store the object in\n\t\t\tthe odb\n\t\t- stream->free: free the stream\n\n The streaming write won't be effective until `stream->finalize_write`\n is called and returns without an error\n\n The stream must always be free'd or will leak memory.\n\n @see git_odb_stream\n\n @param stream pointer where to store the stream\n @param db object database where the stream will write\n @param size final size of the object that will be written\n @param type type of the object that will be written\n @return 0 if the stream was created; error code otherwise\n\n","line":195},"git_oid_ncmp":{"file":"oid.h","sig":"const git_oid *::const git_oid *::unsigned int","return":{"type":"int","comment":"0 in case of a match"},"description":"Compare the first 'len' hexadecimal characters (packets of 4 bits) of two oid structures.","group":"oid","argline":"const git_oid *a, const git_oid *b, unsigned int len","comments":"","lineto":150,"args":[{"type":"const git_oid *","name":"a","comment":"first oid structure."},{"type":"const git_oid *","name":"b","comment":"second oid structure."},{"type":"unsigned int","name":"len","comment":"the number of hex chars to compare"}],"rawComments":"\n Compare the first 'len' hexadecimal characters (packets of 4 bits)\n of two oid structures.\n\n @param a first oid structure.\n @param b second oid structure.\n @param len the number of hex chars to compare\n @return 0 in case of a match\n\n","line":141},"git_odb_read":{"file":"odb.h","sig":"git_odb_object **::git_odb *::const git_oid *","return":{"type":"int","comment":""},"description":"Read an object from the database.","group":"odb","argline":"git_odb_object **out, git_odb *db, const git_oid *id","comments":"This method queries all available ODB backends\n trying to read the given OID.\n\n The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use.\n\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.","lineto":114,"args":[{"type":"git_odb_object **","name":"out","comment":"pointer where to store the read object"},{"type":"git_odb *","name":"db","comment":"database to search for the object in."},{"type":"const git_oid *","name":"id","comment":"identity of the object to read."}],"rawComments":"\n Read an object from the database.\n\n This method queries all available ODB backends\n trying to read the given OID.\n\n The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use.\n\n @param out pointer where to store the read object\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n\n","line":97,"examples":{"general.c":["ex/v0.15.0/general.html#git_odb_read-53"]}},"git_tag_type":{"file":"tag.h","sig":"git_tag *","return":{"type":"git_otype","comment":"type of the tagged object"},"description":"Get the type of a tag's tagged object","group":"tag","argline":"git_tag *tag","comments":"","lineto":106,"args":[{"type":"git_tag *","name":"tag","comment":"a previously loaded tag."}],"rawComments":"\n Get the type of a tag's tagged object\n\n @param tag a previously loaded tag.\n @return type of the tagged object\n\n","line":100,"examples":{"general.c":["ex/v0.15.0/general.html#git_tag_type-54"]}},"git_reference_set_oid":{"file":"refs.h","sig":"git_reference *::const git_oid *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Set the OID target of a reference.","group":"reference","argline":"git_reference *ref, const git_oid *id","comments":"The reference must be a direct reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.","lineto":167,"args":[{"type":"git_reference *","name":"ref","comment":"The reference"},{"type":"const git_oid *","name":"id","comment":"The new target OID for the reference"}],"rawComments":"\n Set the OID target of a reference.\n\n The reference must be a direct reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.\n\n @param ref The reference\n @param id The new target OID for the reference\n @return GIT_SUCCESS or an error code\n\n","line":154},"git_remote_ls":{"file":"remote.h","sig":"git_remote *::git_headarray *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Get a list of refs at the remote","group":"remote","argline":"git_remote *remote, git_headarray *refs","comments":"The remote (or more exactly its transport) must be connected.","lineto":107,"args":[{"type":"git_remote *","name":"remote","comment":"the remote"},{"type":"git_headarray *","name":"refs","comment":"where to store the refs"}],"rawComments":"\n Get a list of refs at the remote\n\n The remote (or more exactly its transport) must be connected.\n\n @param refs where to store the refs\n @param remote the remote\n @return GIT_SUCCESS or an error code\n\n","line":98},"git_tree_entry_name":{"file":"tree.h","sig":"const git_tree_entry *","return":{"type":"const char *","comment":"the name of the file"},"description":"Get the filename of a tree entry","group":"tree","argline":"const git_tree_entry *entry","comments":"","lineto":120,"args":[{"type":"const git_tree_entry *","name":"entry","comment":"a tree entry"}],"rawComments":"\n Get the filename of a tree entry\n\n @param entry a tree entry\n @return the name of the file\n\n","line":114,"examples":{"general.c":["ex/v0.15.0/general.html#git_tree_entry_name-55","ex/v0.15.0/general.html#git_tree_entry_name-56"]}},"git_config_find_global":{"file":"config.h","sig":"char *","return":{"type":"int","comment":"GIT_SUCCESS if a global configuration file has been  found. Its path will be stored in `buffer`."},"description":"Locate the path to the global configuration file","group":"config","argline":"char *global_config_path","comments":"The user or global configuration file is usually\n located in `$HOME/.gitconfig`.\n\n This method will try to guess the full path to that\n file, if the file exists. The returned path\n may be used on any `git_config` call to load the\n global configuration file.","lineto":52,"args":[{"type":"char *","name":"global_config_path","comment":"Buffer of GIT_PATH_MAX length to store the path"}],"rawComments":"\n Locate the path to the global configuration file\n\n The user or global configuration file is usually\n located in `$HOME/.gitconfig`.\n\n This method will try to guess the full path to that\n file, if the file exists. The returned path\n may be used on any `git_config` call to load the\n global configuration file.\n\n @param global_config_path Buffer of GIT_PATH_MAX length to store the path\n @return GIT_SUCCESS if a global configuration file has been\n\tfound. Its path will be stored in `buffer`.\n\n","line":37},"git_index_entrycount_unmerged":{"file":"index.h","sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current unmerged entries"},"description":"Get the count of unmerged entries currently in the index","group":"index","argline":"git_index *index","comments":"","lineto":265,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"}],"rawComments":"\n Get the count of unmerged entries currently in the index\n\n @param index an existing index object\n @return integer of count of current unmerged entries\n\n","line":259},"git_index_open":{"file":"index.h","sig":"git_index **::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new bare Git index object as a memory representation of the Git index file in 'index_path', without a repository to back it.","group":"index","argline":"git_index **index, const char *index_path","comments":"Since there is no ODB or working directory behind this index,\n any Index methods which rely on these (e.g. index_add) will\n fail with the GIT_EBAREINDEX error code.\n\n If you need to access the index of an actual repository,\n use the `git_repository_index` wrapper.\n\n The index must be freed once it's no longer in use.","lineto":111,"args":[{"type":"git_index **","name":"index","comment":"the pointer for the new index"},{"type":"const char *","name":"index_path","comment":"the path to the index file in disk"}],"rawComments":"\n Create a new bare Git index object as a memory representation\n of the Git index file in 'index_path', without a repository\n to back it.\n\n Since there is no ODB or working directory behind this index,\n any Index methods which rely on these (e.g. index_add) will\n fail with the GIT_EBAREINDEX error code.\n\n If you need to access the index of an actual repository,\n use the `git_repository_index` wrapper.\n\n The index must be freed once it's no longer in use.\n\n @param index the pointer for the new index\n @param index_path the path to the index file in disk\n @return GIT_SUCCESS or an error code\n\n","line":93},"git_oid_fmt":{"file":"oid.h","sig":"char *::const git_oid *","return":{"type":"void","comment":""},"description":"Format a git_oid into a hex string.","group":"oid","argline":"char *str, const git_oid *oid","comments":"","lineto":81,"args":[{"type":"char *","name":"str","comment":"output hex string; must be pointing at the start of   the hex sequence and have at least the number of bytes   needed for an oid encoded in hex (40 bytes). Only the   oid digits are written; a '\\\\0' terminator must be added   by the caller if it is required."},{"type":"const git_oid *","name":"oid","comment":"oid structure to format."}],"rawComments":"\n Format a git_oid into a hex string.\n\n @param str output hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes). Only the\n\t\toid digits are written; a '\\\\0' terminator must be added\n\t\tby the caller if it is required.\n @param oid oid structure to format.\n\n","line":71,"examples":{"showindex.c":["ex/v0.15.0/showindex.html#git_oid_fmt-7"],"general.c":["ex/v0.15.0/general.html#git_oid_fmt-57","ex/v0.15.0/general.html#git_oid_fmt-58","ex/v0.15.0/general.html#git_oid_fmt-59","ex/v0.15.0/general.html#git_oid_fmt-60","ex/v0.15.0/general.html#git_oid_fmt-61"]}},"git_indexer_run":{"file":"indexer.h","sig":"git_indexer *::git_indexer_stats *","return":{"type":"int","comment":""},"description":"Iterate over the objects in the packfile and extract the information","group":"indexer","argline":"git_indexer *idx, git_indexer_stats *stats","comments":"Indexing a packfile can be very expensive so this function is\n expected to be run in a worker thread and the stats used to provide\n feedback the user.","lineto":45,"args":[{"type":"git_indexer *","name":"idx","comment":"the indexer instance"},{"type":"git_indexer_stats *","name":"stats","comment":"storage for the running state"}],"rawComments":"\n Iterate over the objects in the packfile and extract the information\n\n Indexing a packfile can be very expensive so this function is\n expected to be run in a worker thread and the stats used to provide\n feedback the user.\n\n @param idx the indexer instance\n @param stats storage for the running state\n\n","line":35},"git_object__size":{"file":"object.h","sig":"git_otype","return":{"type":"size_t","comment":"size in bytes of the object"},"description":"Get the size in bytes for the structure which acts as an in-memory representation of any given object type.","group":"object","argline":"git_otype type","comments":"For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API.","lineto":168,"args":[{"type":"git_otype","name":"type","comment":"object type to get its size"}],"rawComments":"\n Get the size in bytes for the structure which\n acts as an in-memory representation of any given\n object type.\n\n For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API.\n\n @param type object type to get its size\n @return size in bytes of the object\n\n","line":156},"git_remote_new":{"file":"remote.h","sig":"git_remote **::git_repository *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Create a new unnamed remote","group":"remote","argline":"git_remote **out, git_repository *repo, const char *url","comments":"Useful when you don't want to store the remote","lineto":40,"args":[{"type":"git_remote **","name":"out","comment":"pointer to the new remote object"},{"type":"git_repository *","name":"repo","comment":"the associtated repository"},{"type":"const char *","name":"url","comment":"the remote repository's URL"}],"rawComments":"\n Create a new unnamed remote\n\n Useful when you don't want to store the remote\n\n @param out pointer to the new remote object\n @param repo the associtated repository\n @param url the remote repository's URL\n @return GIT_SUCCESS or an error code\n\n","line":30},"git_commit_lookup":{"file":"commit.h","sig":"git_commit **::git_repository *::const git_oid *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a commit object from a repository.","group":"commit","argline":"git_commit **commit, git_repository *repo, const git_oid *id","comments":"","lineto":36,"args":[{"type":"git_commit **","name":"commit","comment":"pointer to the looked up commit"},{"type":"git_repository *","name":"repo","comment":"the repo to use when locating the commit."},{"type":"const git_oid *","name":"id","comment":"identity of the commit to locate. If the object is   an annotated tag it will be peeled back to the commit."}],"rawComments":"\n Lookup a commit object from a repository.\n\n @param commit pointer to the looked up commit\n @param repo the repo to use when locating the commit.\n @param id identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit.\n @return GIT_SUCCESS or an error code\n\n","line":24,"examples":{"general.c":["ex/v0.15.0/general.html#git_commit_lookup-62","ex/v0.15.0/general.html#git_commit_lookup-63","ex/v0.15.0/general.html#git_commit_lookup-64"]}},"git_indexer_write":{"file":"indexer.h","sig":"git_indexer *","return":{"type":"int","comment":""},"description":"Write the index file to disk.","group":"indexer","argline":"git_indexer *idx","comments":"The file will be stored as pack-$hash.idx in the same directory as\n the packfile.","lineto":55,"args":[{"type":"git_indexer *","name":"idx","comment":"the indexer instance"}],"rawComments":"\n Write the index file to disk.\n\n The file will be stored as pack-$hash.idx in the same directory as\n the packfile.\n\n @param idx the indexer instance\n\n","line":47},"git_object_owner":{"file":"object.h","sig":"const git_object *","return":{"type":"git_repository *","comment":"the repository who owns this object"},"description":"Get the repository that owns this object","group":"object","argline":"const git_object *obj","comments":"Freeing or calling `git_repository_close` on the\n returned pointer will invalidate the actual object.\n\n Any other operation may be run on the repository without\n affecting the object.","lineto":109,"args":[{"type":"const git_object *","name":"obj","comment":"the object"}],"rawComments":"\n Get the repository that owns this object\n\n Freeing or calling `git_repository_close` on the\n returned pointer will invalidate the actual object.\n\n Any other operation may be run on the repository without\n affecting the object.\n\n @param obj the object\n @return the repository who owns this object\n\n","line":97},"git_repository_is_empty":{"file":"repository.h","sig":"git_repository *","return":{"type":"int","comment":"1 if the repository is empty, 0 if it isn't, error code  if the repository is corrupted"},"description":"Check if a repository is empty","group":"repository","argline":"git_repository *repo","comments":"An empty repository has just been initialized and contains\n no commits.","lineto":247,"args":[{"type":"git_repository *","name":"repo","comment":"Repo to test"}],"rawComments":"\n Check if a repository is empty\n\n An empty repository has just been initialized and contains\n no commits.\n\n @param repo Repo to test\n @return 1 if the repository is empty, 0 if it isn't, error code\n if the repository is corrupted\n\n","line":237},"git_repository_head_orphan":{"file":"repository.h","sig":"git_repository *","return":{"type":"int","comment":"1 if the current branch is an orphan, 0 if it's not; error  code if therewas an error"},"description":"Check if the current branch is an orphan","group":"repository","argline":"git_repository *repo","comments":"An orphan branch is one named from HEAD but which doesn't exist in\n the refs namespace, because it doesn't have any commit to point to.","lineto":235,"args":[{"type":"git_repository *","name":"repo","comment":"Repo to test"}],"rawComments":"\n Check if the current branch is an orphan\n\n An orphan branch is one named from HEAD but which doesn't exist in\n the refs namespace, because it doesn't have any commit to point to.\n\n @param repo Repo to test\n @return 1 if the current branch is an orphan, 0 if it's not; error\n code if therewas an error\n\n","line":225},"git_oid_fromraw":{"file":"oid.h","sig":"git_oid *::const unsigned char *","return":{"type":"void","comment":""},"description":"Copy an already raw oid into a git_oid structure.","group":"oid","argline":"git_oid *out, const unsigned char *raw","comments":"","lineto":69,"args":[{"type":"git_oid *","name":"out","comment":"oid structure the result is written into."},{"type":"const unsigned char *","name":"raw","comment":"the raw input bytes to be copied."}],"rawComments":"\n Copy an already raw oid into a git_oid structure.\n\n @param out oid structure the result is written into.\n @param raw the raw input bytes to be copied.\n\n","line":63},"git_commit_tree_oid":{"file":"commit.h","sig":"git_commit *","return":{"type":"const git_oid *","comment":"the id of tree pointed to by commit."},"description":"Get the id of the tree pointed to by a commit. This differs from `git_commit_tree` in that no attempts are made to fetch an object from the ODB.","group":"commit","argline":"git_commit *commit","comments":"","lineto":150,"args":[{"type":"git_commit *","name":"commit","comment":"a previously loaded commit."}],"rawComments":"\n Get the id of the tree pointed to by a commit. This differs from\n `git_commit_tree` in that no attempts are made to fetch an object\n from the ODB.\n\n @param commit a previously loaded commit.\n @return the id of tree pointed to by commit.\n\n","line":142},"git_remote_connect":{"file":"remote.h","sig":"struct git_remote *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Open a connection to a remote","group":"remote","argline":"struct git_remote *remote, int direction","comments":"The transport is selected based on the URL. The direction argument\n is due to a limitation of the git protocol (over TCP or SSH) which\n starts up a specific binary which can only do the one or the other.","lineto":96,"args":[{"type":"struct git_remote *","name":"remote","comment":"the remote to connect to"},{"type":"int","name":"direction","comment":"whether you want to receive or send data"}],"rawComments":"\n Open a connection to a remote\n\n The transport is selected based on the URL. The direction argument\n is due to a limitation of the git protocol (over TCP or SSH) which\n starts up a specific binary which can only do the one or the other.\n\n @param remote the remote to connect to\n @param direction whether you want to receive or send data\n @return GIT_SUCCESS or an error code\n\n","line":85},"git_remote_update_tips":{"file":"remote.h","sig":"struct git_remote *","return":{"type":"int","comment":""},"description":"Update the tips to the new state","group":"remote","argline":"struct git_remote *remote","comments":"Make sure that you only call this once you've successfully indexed\n or expanded the packfile.","lineto":146,"args":[{"type":"struct git_remote *","name":"remote","comment":"the remote to update"}],"rawComments":"\n Update the tips to the new state\n\n Make sure that you only call this once you've successfully indexed\n or expanded the packfile.\n\n @param remote the remote to update\n\n","line":138},"git_odb_hashfile":{"file":"odb.h","sig":"git_oid *::const char *::git_otype","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Read a file from disk and fill a git_oid with the object id that the file would have if it were written to the Object Database as an object of the given type. Similar functionality to git.git's `git hash-object` without the `-w` flag.","group":"odb","argline":"git_oid *out, const char *path, git_otype type","comments":"","lineto":275,"args":[{"type":"git_oid *","name":"out","comment":"oid structure the result is written into."},{"type":"const char *","name":"path","comment":"file to read and determine object id for"},{"type":"git_otype","name":"type","comment":"the type of the object that will be hashed"}],"rawComments":"\n Read a file from disk and fill a git_oid with the object id\n that the file would have if it were written to the Object\n Database as an object of the given type. Similar functionality\n to git.git's `git hash-object` without the `-w` flag.\n\n @param out oid structure the result is written into.\n @param path file to read and determine object id for\n @param type the type of the object that will be hashed\n @return GIT_SUCCESS or an error code\n\n","line":264},"git_oid_to_string":{"file":"oid.h","sig":"char *::size_t::const git_oid *","return":{"type":"char *","comment":"the out buffer pointer, assuming no input parameter    errors, otherwise a pointer to an empty string."},"description":"Format a git_oid into a buffer as a hex format c-string.","group":"oid","argline":"char *out, size_t n, const git_oid *oid","comments":"If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed.","lineto":122,"args":[{"type":"char *","name":"out","comment":"the buffer into which the oid string is output."},{"type":"size_t","name":"n","comment":"the size of the out buffer."},{"type":"const git_oid *","name":"oid","comment":"the oid structure to format."}],"rawComments":"\n Format a git_oid into a buffer as a hex format c-string.\n\n If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed.\n\n @param out the buffer into which the oid string is output.\n @param n the size of the out buffer.\n @param oid the oid structure to format.\n @return the out buffer pointer, assuming no input parameter\n\t\t\terrors, otherwise a pointer to an empty string.\n\n","line":107},"git_reference_delete":{"file":"refs.h","sig":"git_reference *","return":{"type":"int","comment":""},"description":"Delete an existing reference","group":"reference","argline":"git_reference *ref","comments":"This method works for both direct and symbolic references.\n\n The reference will be immediately removed on disk and from\n memory. The given reference pointer will no longer be valid.","lineto":191,"args":[{"type":"git_reference *","name":"ref","comment":""}],"rawComments":"\n Delete an existing reference\n\n This method works for both direct and symbolic references.\n\n The reference will be immediately removed on disk and from\n memory. The given reference pointer will no longer be valid.\n\n\n","line":182},"git_odb_object_type":{"file":"odb.h","sig":"git_odb_object *","return":{"type":"git_otype","comment":"the type"},"description":"Return the type of an ODB object","group":"odb","argline":"git_odb_object *object","comments":"","lineto":327,"args":[{"type":"git_odb_object *","name":"object","comment":"the object"}],"rawComments":"\n Return the type of an ODB object\n\n @param object the object\n @return the type\n\n","line":321,"examples":{"general.c":["ex/v0.15.0/general.html#git_odb_object_type-65"]}},"git_remote_url":{"file":"remote.h","sig":"struct git_remote *","return":{"type":"const char *","comment":"a pointer to the url"},"description":"Get the remote's url","group":"remote","argline":"struct git_remote *remote","comments":"","lineto":66,"args":[{"type":"struct git_remote *","name":"remote","comment":"the remote"}],"rawComments":"\n Get the remote's url\n\n @param remote the remote\n @return a pointer to the url\n\n","line":60},"git_odb_object_size":{"file":"odb.h","sig":"git_odb_object *","return":{"type":"size_t","comment":"the size"},"description":"Return the size of an ODB object","group":"odb","argline":"git_odb_object *object","comments":"This is the real size of the `data` buffer, not the\n actual size of the object.","lineto":319,"args":[{"type":"git_odb_object *","name":"object","comment":"the object"}],"rawComments":"\n Return the size of an ODB object\n\n This is the real size of the `data` buffer, not the\n actual size of the object.\n\n @param object the object\n @return the size\n\n","line":310,"examples":{"general.c":["ex/v0.15.0/general.html#git_odb_object_size-66"]}},"git_odb_object_close":{"file":"odb.h","sig":"git_odb_object *","return":{"type":"void","comment":""},"description":"Close an ODB object","group":"odb","argline":"git_odb_object *object","comments":"This method must always be called once a `git_odb_object` is no\n longer needed, otherwise memory will leak.","lineto":285,"args":[{"type":"git_odb_object *","name":"object","comment":"object to close"}],"rawComments":"\n Close an ODB object\n\n This method must always be called once a `git_odb_object` is no\n longer needed, otherwise memory will leak.\n\n @param object object to close\n\n","line":277,"examples":{"general.c":["ex/v0.15.0/general.html#git_odb_object_close-67"]}},"git_blob_create_frombuffer":{"file":"blob.h","sig":"git_oid *::git_repository *::const void *::size_t","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Write an in-memory buffer to the ODB as a blob","group":"blob","argline":"git_oid *oid, git_repository *repo, const void *buffer, size_t len","comments":"","lineto":116,"args":[{"type":"git_oid *","name":"oid","comment":"return the oid of the written blob"},{"type":"git_repository *","name":"repo","comment":"repository where to blob will be written"},{"type":"const void *","name":"buffer","comment":"data to be written into the blob"},{"type":"size_t","name":"len","comment":"length of the data"}],"rawComments":"\n Write an in-memory buffer to the ODB as a blob\n\n @param oid return the oid of the written blob\n @param repo repository where to blob will be written\n @param buffer data to be written into the blob\n @param len length of the data\n @return GIT_SUCCESS or an error code\n\n","line":107},"git_odb_read_prefix":{"file":"odb.h","sig":"git_odb_object **::git_odb *::const git_oid *::unsigned int","return":{"type":"int","comment":"GIT_SUCCESS if the object was read;  GIT_ENOTFOUND if the object is not in the database.  GIT_EAMBIGUOUS if the prefix is ambiguous (several objects match the prefix)"},"description":"Read an object from the database, given a prefix of its identifier.","group":"odb","argline":"git_odb_object **out, git_odb *db, const git_oid *short_id, unsigned int len","comments":"This method queries all available ODB backends\n trying to match the 'len' first hexadecimal\n characters of the 'short_id'.\n The remaining (GIT_OID_HEXSZ-len)*4 bits of\n 'short_id' must be 0s.\n 'len' must be at least GIT_OID_MINPREFIXLEN,\n and the prefix must be long enough to identify\n a unique object in all the backends; the\n method will fail otherwise.\n\n The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use.","lineto":142,"args":[{"type":"git_odb_object **","name":"out","comment":"pointer where to store the read object"},{"type":"git_odb *","name":"db","comment":"database to search for the object in."},{"type":"const git_oid *","name":"short_id","comment":"a prefix of the id of the object to read."},{"type":"unsigned int","name":"len","comment":"the length of the prefix"}],"rawComments":"\n Read an object from the database, given a prefix\n of its identifier.\n\n This method queries all available ODB backends\n trying to match the 'len' first hexadecimal\n characters of the 'short_id'.\n The remaining (GIT_OID_HEXSZ-len)*4 bits of\n 'short_id' must be 0s.\n 'len' must be at least GIT_OID_MINPREFIXLEN,\n and the prefix must be long enough to identify\n a unique object in all the backends; the\n method will fail otherwise.\n\n The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use.\n\n @param out pointer where to store the read object\n @param db database to search for the object in.\n @param short_id a prefix of the id of the object to read.\n @param len the length of the prefix\n @return GIT_SUCCESS if the object was read;\n\tGIT_ENOTFOUND if the object is not in the database.\n\tGIT_EAMBIGUOUS if the prefix is ambiguous (several objects match the prefix)\n\n","line":116},"git_index_entrycount":{"file":"index.h","sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current entries"},"description":"Get the count of entries currently in the index","group":"index","argline":"git_index *index","comments":"","lineto":257,"args":[{"type":"git_index *","name":"index","comment":"an existing index object"}],"rawComments":"\n Get the count of entries currently in the index\n\n @param index an existing index object\n @return integer of count of current entries\n\n","line":251,"examples":{"showindex.c":["ex/v0.15.0/showindex.html#git_index_entrycount-8"],"general.c":["ex/v0.15.0/general.html#git_index_entrycount-68"]}},"git_oid_fromstr":{"file":"oid.h","sig":"git_oid *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Parse a hex formatted object id into a git_oid.","group":"oid","argline":"git_oid *out, const char *str","comments":"","lineto":48,"args":[{"type":"git_oid *","name":"out","comment":"oid structure the result is written into."},{"type":"const char *","name":"str","comment":"input hex string; must be pointing at the start of   the hex sequence and have at least the number of bytes   needed for an oid encoded in hex (40 bytes)."}],"rawComments":"\n Parse a hex formatted object id into a git_oid.\n\n @param out oid structure the result is written into.\n @param str input hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes).\n @return GIT_SUCCESS or an error code\n\n","line":39,"examples":{"general.c":["ex/v0.15.0/general.html#git_oid_fromstr-69","ex/v0.15.0/general.html#git_oid_fromstr-70","ex/v0.15.0/general.html#git_oid_fromstr-71","ex/v0.15.0/general.html#git_oid_fromstr-72","ex/v0.15.0/general.html#git_oid_fromstr-73","ex/v0.15.0/general.html#git_oid_fromstr-74","ex/v0.15.0/general.html#git_oid_fromstr-75","ex/v0.15.0/general.html#git_oid_fromstr-76"]}},"git_reference_foreach":{"file":"refs.h","sig":"git_repository *::unsigned int::int(*)(const char *, void *)::void *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Perform an operation on each reference in the repository","group":"reference","argline":"git_repository *repo, unsigned int list_flags, int (*callback)(const char *, void *), void *payload","comments":"The processed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.\n\n The `callback` function will be called for each of the references\n in the repository, and will receive the name of the reference and\n the `payload` value passed to this method.","lineto":254,"args":[{"type":"git_repository *","name":"repo","comment":"Repository where to find the refs"},{"type":"unsigned int","name":"list_flags","comment":"Filtering flags for the reference   listing."},{"type":"int(*)(const char *, void *)","name":"callback","comment":"Function which will be called for every listed ref"},{"type":"void *","name":"payload","comment":"Additional data to pass to the callback"}],"rawComments":"\n Perform an operation on each reference in the repository\n\n The processed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.\n\n The `callback` function will be called for each of the references\n in the repository, and will receive the name of the reference and\n the `payload` value passed to this method.\n\n @param repo Repository where to find the refs\n @param list_flags Filtering flags for the reference\n\t\tlisting.\n @param callback Function which will be called for every listed ref\n @param payload Additional data to pass to the callback\n @return GIT_SUCCESS or an error code\n\n","line":235},"git_tree_lookup_prefix":{"file":"tree.h","sig":"git_tree **::git_repository *::const git_oid *::unsigned int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Lookup a tree object from the repository, given a prefix of its identifier (short id).","group":"tree","argline":"git_tree **tree, git_repository *repo, const git_oid *id, unsigned int len","comments":"@see git_object_lookup_prefix","lineto":52,"args":[{"type":"git_tree **","name":"tree","comment":"pointer to the looked up tree"},{"type":"git_repository *","name":"repo","comment":"the repo to use when locating the tree."},{"type":"const git_oid *","name":"id","comment":"identity of the tree to locate."},{"type":"unsigned int","name":"len","comment":"the length of the short identifier"}],"rawComments":"\n Lookup a tree object from the repository,\n given a prefix of its identifier (short id).\n\n @see git_object_lookup_prefix\n\n @param tree pointer to the looked up tree\n @param repo the repo to use when locating the tree.\n @param id identity of the tree to locate.\n @param len the length of the short identifier\n @return GIT_SUCCESS or an error code\n\n","line":37},"git_reflog_entrycount":{"file":"reflog.h","sig":"git_reflog *","return":{"type":"unsigned int","comment":"the number of log entries"},"description":"Get the number of log entries in a reflog","group":"reflog","argline":"git_reflog *reflog","comments":"","lineto":59,"args":[{"type":"git_reflog *","name":"reflog","comment":"the previously loaded reflog"}],"rawComments":"\n Get the number of log entries in a reflog\n\n @param reflog the previously loaded reflog\n @return the number of log entries\n\n","line":53},"git_reference_rename":{"file":"refs.h","sig":"git_reference *::const char *::int","return":{"type":"int","comment":""},"description":"Rename an existing reference","group":"reference","argline":"git_reference *ref, const char *new_name, int force","comments":"This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.\n\n The refernece will be immediately renamed in-memory\n and on disk.","lineto":180,"args":[{"type":"git_reference *","name":"ref","comment":""},{"type":"const char *","name":"new_name","comment":""},{"type":"int","name":"force","comment":""}],"rawComments":"\n Rename an existing reference\n\n This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.\n\n The refernece will be immediately renamed in-memory\n and on disk.\n\n\n","line":169},"git_revwalk_reset":{"file":"revwalk.h","sig":"git_revwalk *","return":{"type":"void","comment":""},"description":"Reset the revision walker for reuse.","group":"revwalk","argline":"git_revwalk *walker","comments":"This will clear all the pushed and hidden commits, and\n leave the walker in a blank state (just like at\n creation) ready to receive new commit pushes and\n start a new walk.\n\n The revision walk is automatically reset when a walk\n is over.","lineto":85,"args":[{"type":"git_revwalk *","name":"walker","comment":"handle to reset."}],"rawComments":"\n Reset the revision walker for reuse.\n\n This will clear all the pushed and hidden commits, and\n leave the walker in a blank state (just like at\n creation) ready to receive new commit pushes and\n start a new walk.\n\n The revision walk is automatically reset when a walk\n is over.\n\n @param walker handle to reset.\n\n","line":72},"git_object_close":{"file":"object.h","sig":"git_object *","return":{"type":"void","comment":""},"description":"Close an open object","group":"object","argline":"git_object *object","comments":"This method instructs the library to close an existing\n object; note that git_objects are owned and cached by the repository\n so the object may or may not be freed after this library call,\n depending on how agressive is the caching mechanism used\n by the repository.\n\n IMPORTANT:\n It *is* necessary to call this method when you stop using\n an object. Failure to do so will cause a memory leak.","lineto":126,"args":[{"type":"git_object *","name":"object","comment":"the object to close"}],"rawComments":"\n Close an open object\n\n This method instructs the library to close an existing\n object; note that git_objects are owned and cached by the repository\n so the object may or may not be freed after this library call,\n depending on how agressive is the caching mechanism used\n by the repository.\n\n IMPORTANT:\n It *is* necessary to call this method when you stop using\n an object. Failure to do so will cause a memory leak.\n\n @param object the object to close\n\n","line":111,"examples":{"general.c":["ex/v0.15.0/general.html#git_object_close-77"]}},"git_remote_get":{"file":"remote.h","sig":"struct git_remote **::struct git_config *::const char *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Get the information for a particular remote","group":"remote","argline":"struct git_remote **out, struct git_config *cfg, const char *name","comments":"","lineto":50,"args":[{"type":"struct git_remote **","name":"out","comment":"pointer to the new remote object"},{"type":"struct git_config *","name":"cfg","comment":"the repository's configuration"},{"type":"const char *","name":"name","comment":"the remote's name"}],"rawComments":"\n Get the information for a particular remote\n\n @param out pointer to the new remote object\n @param cfg the repository's configuration\n @param name the remote's name\n @return GIT_SUCCESS or an error code\n\n","line":42},"git_tag_list_match":{"file":"tag.h","sig":"git_strarray *::const char *::git_repository *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Fill a list with all the tags in the Repository which name match a defined pattern","group":"tag","argline":"git_strarray *tag_names, const char *pattern, git_repository *repo","comments":"If an empty pattern is provided, all the tags\n will be returned.\n\n The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.","lineto":275,"args":[{"type":"git_strarray *","name":"tag_names","comment":"Pointer to a git_strarray structure where   the tag names will be stored"},{"type":"const char *","name":"pattern","comment":"Standard fnmatch pattern"},{"type":"git_repository *","name":"repo","comment":"Repository where to find the tags"}],"rawComments":"\n Fill a list with all the tags in the Repository\n which name match a defined pattern\n\n If an empty pattern is provided, all the tags\n will be returned.\n\n The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`.\n\n @param tag_names Pointer to a git_strarray structure where\n\t\tthe tag names will be stored\n @param pattern Standard fnmatch pattern\n @param repo Repository where to find the tags\n @return GIT_SUCCESS or an error code\n\n","line":254}},"groups":[["blob",["git_blob_close","git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_blob_lookup_prefix","git_blob_rawcontent","git_blob_rawsize"]],["commit",["git_commit_author","git_commit_close","git_commit_committer","git_commit_create","git_commit_create_v","git_commit_id","git_commit_lookup","git_commit_lookup_prefix","git_commit_message","git_commit_message_encoding","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]],["config",["git_config_add_file","git_config_add_file_ondisk","git_config_delete","git_config_file__ondisk","git_config_find_global","git_config_find_system","git_config_foreach","git_config_free","git_config_get_bool","git_config_get_string","git_config_new","git_config_open_global","git_config_open_ondisk","git_config_set_bool","git_config_set_string"]],["errors",["git_clearerror","git_lasterror","git_strerror"]],["index",["git_index_add","git_index_append","git_index_clear","git_index_entry_stage","git_index_entrycount","git_index_entrycount_unmerged","git_index_find","git_index_free","git_index_get","git_index_get_unmerged_byindex","git_index_get_unmerged_bypath","git_index_open","git_index_read","git_index_remove","git_index_uniq","git_index_write"]],["indexer",["git_indexer_free","git_indexer_hash","git_indexer_new","git_indexer_run","git_indexer_write"]],["inttypes",["imaxdiv"]],["object",["git_object__size","git_object_close","git_object_id","git_object_lookup","git_object_lookup_prefix","git_object_owner","git_object_type","git_object_typeisloose"]],["odb",["git_odb_add_alternate","git_odb_add_backend","git_odb_backend_loose","git_odb_backend_pack","git_odb_close","git_odb_exists","git_odb_hash","git_odb_hashfile","git_odb_new","git_odb_object_close","git_odb_object_data","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_fromraw","git_oid_fromstr","git_oid_fromstrn","git_oid_ncmp","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_to_string"]],["reference",["git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_foreach","git_reference_listall","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_packall","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]],["reflog",["git_reflog_entry_byindex","git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_entry_oidnew","git_reflog_entry_oidold","git_reflog_entrycount","git_reflog_free","git_reflog_read","git_reflog_write"]],["refspec",["git_refspec_src_match","git_refspec_transform"]],["remote",["git_remote_connect","git_remote_download","git_remote_fetchspec","git_remote_free","git_remote_get","git_remote_ls","git_remote_name","git_remote_negotiate","git_remote_new","git_remote_pushspec","git_remote_update_tips","git_remote_url"]],["repository",["git_repository_config","git_repository_config_autoload","git_repository_database","git_repository_discover","git_repository_free","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_index","git_repository_init","git_repository_is_bare","git_repository_is_empty","git_repository_open","git_repository_path"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["signature",["git_signature_dup","git_signature_free","git_signature_new","git_signature_now"]],["status",["git_status_file","git_status_foreach"]],["strarray",["git_strarray_free"]],["tag",["git_tag_close","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_id","git_tag_list","git_tag_list_match","git_tag_lookup","git_tag_lookup_prefix","git_tag_message","git_tag_name","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]],["transport",["git_transport_new"]],["tree",["git_tree_close","git_tree_create_fromindex","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entry_type","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_lookup_prefix"]],["treebuilder",["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]]],"globals":{"UINT32_MAX":{"file":"stdint.h","value":"_UI32_MAX","line":142},"SCNiLEAST64":{"file":"inttypes.h","value":"\"I64i\"","line":179},"PRIuLEAST8":{"file":"inttypes.h","value":"\"u\"","line":97},"WINT_MIN":{"file":"stdint.h","value":"0","line":218},"GIT_IDXENTRY_STAGEMASK":{"file":"index.h","value":"(0x3000)","line":24},"SCNXFAST16":{"file":"inttypes.h","value":"\"hX\"","line":219},"PRIdLEAST32":{"file":"inttypes.h","value":"\"I32d\"","line":73},"SCNx8":{"file":"inttypes.h","value":"\"x\"","line":197},"INT_FAST32_MIN":{"file":"stdint.h","value":"INT32_MIN","line":164},"SCNX16":{"file":"inttypes.h","value":"\"hX\"","line":211},"SCNoLEAST64":{"file":"inttypes.h","value":"\"I64o\"","line":238},"SCNdFAST64":{"file":"inttypes.h","value":"\"I64d\"","line":180},"PRIuFAST32":{"file":"inttypes.h","value":"\"I32u\"","line":127},"SIG_ATOMIC_MAX":{"file":"stdint.h","value":"INT_MAX","line":200},"GIT_IDXENTRY_NEW_SKIP_WORKTREE":{"file":"index.h","value":"(1 << 9)","line":47},"PRIXLEAST64":{"file":"inttypes.h","value":"\"I64X\"","line":138},"SCNX8":{"file":"inttypes.h","value":"\"X\"","line":198},"SCNuFAST8":{"file":"inttypes.h","value":"\"u\"","line":204},"SCNoFAST16":{"file":"inttypes.h","value":"\"ho\"","line":216},"INT_FAST16_MAX":{"file":"stdint.h","value":"INT16_MAX","line":163},"PRIX16":{"file":"inttypes.h","value":"\"hX\"","line":108},"INT_LEAST8_MAX":{"file":"stdint.h","value":"INT8_MAX","line":147},"INT8_MIN":{"file":"stdint.h","value":"((int8_t)_I8_MIN)","line":132},"SCNxMAX":{"file":"inttypes.h","value":"\"I64x\"","line":249},"UINT_LEAST64_MAX":{"file":"stdint.h","value":"UINT64_MAX","line":157},"SCNxFAST16":{"file":"inttypes.h","value":"\"hx\"","line":218},"PRIdLEAST64":{"file":"inttypes.h","value":"\"I64d\"","line":80},"UINT_LEAST16_MAX":{"file":"stdint.h","value":"UINT16_MAX","line":155},"GIT_STATUS_IGNORED\t\t(1":{"file":"status.h","value":"<< 6)","line":34},"PRIiFAST16":{"file":"inttypes.h","value":"\"hi\"","line":69},"GIT_SORT_REVERSE\t\t(1":{"file":"revwalk.h","value":"<< 2)","line":50},"GIT_IDXENTRY_UNHASHED\t\t\t(1":{"file":"index.h","value":"<< 5)","line":42},"PRIuFAST64":{"file":"inttypes.h","value":"\"I64u\"","line":140},"SCNi16":{"file":"inttypes.h","value":"\"hi\"","line":163},"GIT_OID_MINPREFIXLEN":{"file":"oid.h","value":"4","line":30},"UINT16_C(val)":{"file":"stdint.h","value":"val##ui16","line":236},"SCNoMAX":{"file":"inttypes.h","value":"\"I64o\"","line":247},"GIT_IDXENTRY_EXTENDED2\t\t\t(1":{"file":"index.h","value":"<< 15)","line":55},"SCNdLEAST16":{"file":"inttypes.h","value":"\"hd\"","line":164},"PRIXLEAST8":{"file":"inttypes.h","value":"\"X\"","line":99},"PRIoLEAST16":{"file":"inttypes.h","value":"\"ho\"","line":109},"PRIi16":{"file":"inttypes.h","value":"\"hi\"","line":65},"SCNuFAST32":{"file":"inttypes.h","value":"\"lu\"","line":230},"INTMAX_MIN":{"file":"stdint.h","value":"INT64_MIN","line":185},"SCNXLEAST32":{"file":"inttypes.h","value":"\"lX\"","line":228},"INT64_MAX":{"file":"stdint.h","value":"_I64_MAX","line":139},"PRIXFAST32":{"file":"inttypes.h","value":"\"I32X\"","line":129},"PRIoLEAST8":{"file":"inttypes.h","value":"\"o\"","line":96},"INT16_MAX":{"file":"stdint.h","value":"_I16_MAX","line":135},"GIT_IDXENTRY_INTENT_TO_ADD\t\t(1":{"file":"index.h","value":"<< 13)","line":52},"PRIdFAST8":{"file":"inttypes.h","value":"\"d\"","line":61},"INT_LEAST16_MIN":{"file":"stdint.h","value":"INT16_MIN","line":148},"INT_LEAST64_MIN":{"file":"stdint.h","value":"INT64_MIN","line":152},"PRIuLEAST16":{"file":"inttypes.h","value":"\"hu\"","line":110},"SCNiMAX":{"file":"inttypes.h","value":"\"I64i\"","line":184},"UINT64_C(val)":{"file":"stdint.h","value":"val##ui64","line":238},"INT_FAST64_MAX":{"file":"stdint.h","value":"INT64_MAX","line":167},"UINT_FAST64_MAX":{"file":"stdint.h","value":"UINT64_MAX","line":171},"PRIoFAST32":{"file":"inttypes.h","value":"\"I32o\"","line":126},"UINT_LEAST32_MAX":{"file":"stdint.h","value":"UINT32_MAX","line":156},"UINT_FAST16_MAX":{"file":"stdint.h","value":"UINT16_MAX","line":169},"PRIi8":{"file":"inttypes.h","value":"\"i\"","line":58},"SCNiFAST16":{"file":"inttypes.h","value":"\"hi\"","line":167},"PRIdMAX":{"file":"inttypes.h","value":"\"I64d\"","line":85},"GIT_IDXENTRY_REMOVE\t\t\t(1":{"file":"index.h","value":"<< 1)","line":37},"strtoumax":{"file":"inttypes.h","value":"_strtoui64","line":298},"SCNuFAST64":{"file":"inttypes.h","value":"\"I64u\"","line":243},"SCNXLEAST64":{"file":"inttypes.h","value":"\"I64X\"","line":241},"PRIdPTR":{"file":"inttypes.h","value":"\"Id\"","line":88},"PRIuFAST8":{"file":"inttypes.h","value":"\"u\"","line":101},"PRIXFAST64":{"file":"inttypes.h","value":"\"I64X\"","line":142},"PRIxFAST32":{"file":"inttypes.h","value":"\"I32x\"","line":128},"PRIoFAST8":{"file":"inttypes.h","value":"\"o\"","line":100},"SCNo16":{"file":"inttypes.h","value":"\"ho\"","line":208},"GIT_IDXENTRY_EXTENDED":{"file":"index.h","value":"(0x4000)","line":25},"GIT_DIR_FETCH":{"file":"net.h","value":"0","line":30},"SCNd8":{"file":"inttypes.h","value":"\"d\"","line":155},"INT_FAST8_MAX":{"file":"stdint.h","value":"INT8_MAX","line":161},"PRIoFAST64":{"file":"inttypes.h","value":"\"I64o\"","line":139},"SCNdFAST8":{"file":"inttypes.h","value":"\"d\"","line":159},"SCNXFAST32":{"file":"inttypes.h","value":"\"lX\"","line":232},"UINT8_MAX":{"file":"stdint.h","value":"_UI8_MAX","line":140},"PRIo16":{"file":"inttypes.h","value":"\"ho\"","line":105},"GIT_IDXENTRY_UNPACKED\t\t\t(1":{"file":"index.h","value":"<< 8)","line":46},"SCNuMAX":{"file":"inttypes.h","value":"\"I64u\"","line":248},"SCNX32":{"file":"inttypes.h","value":"\"lX\"","line":224},"UINT_LEAST8_MAX":{"file":"stdint.h","value":"UINT8_MAX","line":154},"SCNd16":{"file":"inttypes.h","value":"\"hd\"","line":162},"GIT_IDXENTRY_STAGESHIFT":{"file":"index.h","value":"12","line":27},"PRIo8":{"file":"inttypes.h","value":"\"o\"","line":92},"PRIxFAST64":{"file":"inttypes.h","value":"\"I64x\"","line":141},"UINT_FAST32_MAX":{"file":"stdint.h","value":"UINT32_MAX","line":170},"SCNoFAST32":{"file":"inttypes.h","value":"\"lo\"","line":229},"UINTMAX_C":{"file":"stdint.h","value":"UINT64_C","line":242},"strtoimax":{"file":"inttypes.h","value":"_strtoi64","line":297},"UINT16_MAX":{"file":"stdint.h","value":"_UI16_MAX","line":141},"SIG_ATOMIC_MIN":{"file":"stdint.h","value":"INT_MIN","line":199},"PRIX32":{"file":"inttypes.h","value":"\"I32X\"","line":121},"PRIiLEAST8":{"file":"inttypes.h","value":"\"i\"","line":60},"PRIiMAX":{"file":"inttypes.h","value":"\"I64i\"","line":86},"PRId16":{"file":"inttypes.h","value":"\"hd\"","line":64},"GIT_PATH_LIST_SEPARATOR":{"file":"common.h","value":"':'","line":89},"GIT_IDXENTRY_SKIP_WORKTREE\t\t(1":{"file":"index.h","value":"<< 14)","line":53},"INT_FAST16_MIN":{"file":"stdint.h","value":"INT16_MIN","line":162},"SCNdLEAST8":{"file":"inttypes.h","value":"\"d\"","line":157},"PRIiLEAST16":{"file":"inttypes.h","value":"\"hi\"","line":67},"SCNuLEAST8":{"file":"inttypes.h","value":"\"u\"","line":200},"SCNuLEAST16":{"file":"inttypes.h","value":"\"hu\"","line":213},"SCNoFAST8":{"file":"inttypes.h","value":"\"o\"","line":203},"GIT_SORT_TOPOLOGICAL":{"file":"revwalk.h","value":"(1 << 0)","line":36},"UINT32_C(val)":{"file":"stdint.h","value":"val##ui32","line":237},"PRIiPTR":{"file":"inttypes.h","value":"\"Ii\"","line":89},"SCNXFAST64":{"file":"inttypes.h","value":"\"I64X\"","line":245},"INT_LEAST8_MIN":{"file":"stdint.h","value":"INT8_MIN","line":146},"SCNiFAST8":{"file":"inttypes.h","value":"\"i\"","line":160},"GIT_DEFAULT_PORT":{"file":"net.h","value":"\"9418\"","line":22},"PRIiFAST32":{"file":"inttypes.h","value":"\"I32i\"","line":76},"SCNxFAST32":{"file":"inttypes.h","value":"\"lx\"","line":231},"GIT_STATUS_INDEX_NEW\t\t(1":{"file":"status.h","value":"<< 0)","line":24},"INT16_C(val)":{"file":"stdint.h","value":"val##i16","line":231},"SCNu16":{"file":"inttypes.h","value":"\"hu\"","line":209},"SCNX64":{"file":"inttypes.h","value":"\"I64X\"","line":237},"SCNi32":{"file":"inttypes.h","value":"\"li\"","line":170},"UINT_FAST8_MAX":{"file":"stdint.h","value":"UINT8_MAX","line":168},"imaxabs":{"file":"inttypes.h","value":"_abs64","line":269},"SCNoFAST64":{"file":"inttypes.h","value":"\"I64o\"","line":242},"SCNxLEAST16":{"file":"inttypes.h","value":"\"hx\"","line":214},"GIT_STATUS_INDEX_MODIFIED":{"file":"status.h","value":"(1 << 1)","line":25},"PRIu8":{"file":"inttypes.h","value":"\"u\"","line":93},"UINTMAX_MAX":{"file":"stdint.h","value":"UINT64_MAX","line":187},"PRIxFAST8":{"file":"inttypes.h","value":"\"x\"","line":102},"PRIu16":{"file":"inttypes.h","value":"\"hu\"","line":106},"PRIX64":{"file":"inttypes.h","value":"\"I64X\"","line":134},"SCNdLEAST32":{"file":"inttypes.h","value":"\"ld\"","line":171},"INT_LEAST32_MAX":{"file":"stdint.h","value":"INT32_MAX","line":151},"PRIdFAST16":{"file":"inttypes.h","value":"\"hd\"","line":68},"PRIoLEAST32":{"file":"inttypes.h","value":"\"I32o\"","line":122},"PRIi32":{"file":"inttypes.h","value":"\"I32i\"","line":72},"SCNxFAST64":{"file":"inttypes.h","value":"\"I64x\"","line":244},"SCNx16":{"file":"inttypes.h","value":"\"hx\"","line":210},"SCNxFAST8":{"file":"inttypes.h","value":"\"x\"","line":205},"PRIuMAX":{"file":"inttypes.h","value":"\"I64u\"","line":145},"PRIiFAST64":{"file":"inttypes.h","value":"\"I64i\"","line":83},"PRIuLEAST32":{"file":"inttypes.h","value":"\"I32u\"","line":123},"GIT_IDXENTRY_EXTENDED_FLAGS":{"file":"index.h","value":"(GIT_IDXENTRY_INTENT_TO_ADD | GIT_IDXENTRY_SKIP_WORKTREE)","line":57},"GIT_IDXENTRY_UPTODATE\t\t\t(1":{"file":"index.h","value":"<< 2)","line":38},"GIT_STATUS_WT_MODIFIED\t(1":{"file":"status.h","value":"<< 4)","line":30},"wcstoimax":{"file":"inttypes.h","value":"_wcstoi64","line":301},"INT16_MIN":{"file":"stdint.h","value":"((int16_t)_I16_MIN)","line":134},"PRIuPTR":{"file":"inttypes.h","value":"\"Iu\"","line":150},"PRIx8":{"file":"inttypes.h","value":"\"x\"","line":94},"SCNi64":{"file":"inttypes.h","value":"\"I64i\"","line":177},"INT64_MIN":{"file":"stdint.h","value":"((int64_t)_I64_MIN)","line":138},"PRIx16":{"file":"inttypes.h","value":"\"hx\"","line":107},"INT_FAST64_MIN":{"file":"stdint.h","value":"INT64_MIN","line":166},"GIT_SORT_TIME\t\t\t(1":{"file":"revwalk.h","value":"<< 1)","line":43},"GIT_DIR_PUSH":{"file":"net.h","value":"1","line":31},"PRIoLEAST64":{"file":"inttypes.h","value":"\"I64o\"","line":135},"INT8_C(val)":{"file":"stdint.h","value":"val##i8","line":230},"SCNdLEAST64":{"file":"inttypes.h","value":"\"I64d\"","line":178},"SCNiFAST32":{"file":"inttypes.h","value":"\"li\"","line":174},"INT32_MAX":{"file":"stdint.h","value":"_I32_MAX","line":137},"PRIoMAX":{"file":"inttypes.h","value":"\"I64o\"","line":144},"PRIXFAST8":{"file":"inttypes.h","value":"\"X\"","line":103},"PRIxLEAST16":{"file":"inttypes.h","value":"\"hx\"","line":111},"PRIi64":{"file":"inttypes.h","value":"\"I64i\"","line":79},"PRIX8":{"file":"inttypes.h","value":"\"X\"","line":95},"PRIxLEAST8":{"file":"inttypes.h","value":"\"x\"","line":98},"GIT_PATH_MAX":{"file":"common.h","value":"4096","line":95},"SCNo32":{"file":"inttypes.h","value":"\"lo\"","line":221},"SCNoLEAST8":{"file":"inttypes.h","value":"\"o\"","line":199},"PRIoPTR":{"file":"inttypes.h","value":"\"Io\"","line":149},"PRIuLEAST64":{"file":"inttypes.h","value":"\"I64u\"","line":136},"GIT_IDXENTRY_ADDED\t\t\t\t(1":{"file":"index.h","value":"<< 3)","line":39},"SCNiLEAST16":{"file":"inttypes.h","value":"\"hi\"","line":165},"UINT8_C(val)":{"file":"stdint.h","value":"val##ui8","line":235},"SCNoLEAST16":{"file":"inttypes.h","value":"\"ho\"","line":212},"PRIiFAST8":{"file":"inttypes.h","value":"\"i\"","line":62},"PRIo32":{"file":"inttypes.h","value":"\"I32o\"","line":118},"SCNdFAST16":{"file":"inttypes.h","value":"\"hd\"","line":166},"SCNd32":{"file":"inttypes.h","value":"\"ld\"","line":169},"WINT_MAX":{"file":"stdint.h","value":"_UI16_MAX","line":219},"INT_FAST8_MIN":{"file":"stdint.h","value":"INT8_MIN","line":160},"PRIXLEAST16":{"file":"inttypes.h","value":"\"hX\"","line":112},"SCNiFAST64":{"file":"inttypes.h","value":"\"I64i\"","line":181},"wcstoumax":{"file":"inttypes.h","value":"_wcstoui64","line":302},"GIT_STATUS_WT_NEW\t\t\t(1":{"file":"status.h","value":"<< 3)","line":29},"SCNo64":{"file":"inttypes.h","value":"\"I64o\"","line":234},"PRId32":{"file":"inttypes.h","value":"\"I32d\"","line":71},"INT64_C(val)":{"file":"stdint.h","value":"val##i64","line":233},"INT_FAST32_MAX":{"file":"stdint.h","value":"INT32_MAX","line":165},"GIT_STATUS_INDEX_DELETED":{"file":"status.h","value":"(1 << 2)","line":26},"SCNXMAX":{"file":"inttypes.h","value":"\"I64X\"","line":250},"PRIdLEAST16":{"file":"inttypes.h","value":"\"hd\"","line":66},"SCNXFAST8":{"file":"inttypes.h","value":"\"X\"","line":206},"PRIiLEAST32":{"file":"inttypes.h","value":"\"I32i\"","line":74},"SCNuLEAST32":{"file":"inttypes.h","value":"\"lu\"","line":226},"SCNi8":{"file":"inttypes.h","value":"\"i\"","line":156},"PRIo64":{"file":"inttypes.h","value":"\"I64o\"","line":131},"PRIuFAST16":{"file":"inttypes.h","value":"\"hu\"","line":114},"SCNu32":{"file":"inttypes.h","value":"\"lu\"","line":222},"SCNd64":{"file":"inttypes.h","value":"\"I64d\"","line":176},"GIT_STATUS_WT_DELETED\t\t(1":{"file":"status.h","value":"<< 5)","line":31},"INT8_MAX":{"file":"stdint.h","value":"_I8_MAX","line":133},"GIT_IDXENTRY_WT_REMOVE\t\t\t(1":{"file":"index.h","value":"<< 6) /* remove in work directory */","line":43},"PRIdLEAST8":{"file":"inttypes.h","value":"\"d\"","line":59},"PRId64":{"file":"inttypes.h","value":"\"I64d\"","line":78},"SCNxLEAST32":{"file":"inttypes.h","value":"\"lx\"","line":227},"SCNiLEAST8":{"file":"inttypes.h","value":"\"i\"","line":158},"GIT_IDXENTRY_UPDATE\t\t\t(1":{"file":"index.h","value":"<< 0)","line":36},"PRIu32":{"file":"inttypes.h","value":"\"I32u\"","line":119},"SCNXLEAST8":{"file":"inttypes.h","value":"\"X\"","line":202},"PRId8":{"file":"inttypes.h","value":"\"d\"","line":57},"PRIiLEAST64":{"file":"inttypes.h","value":"\"I64i\"","line":81},"SCNuLEAST64":{"file":"inttypes.h","value":"\"I64u\"","line":239},"PRIdFAST32":{"file":"inttypes.h","value":"\"I32d\"","line":75},"GIT_IDXENTRY_CONFLICTED\t\t(1":{"file":"index.h","value":"<< 7)","line":44},"SCNx32":{"file":"inttypes.h","value":"\"lx\"","line":223},"SCNdMAX":{"file":"inttypes.h","value":"\"I64d\"","line":183},"INTMAX_MAX":{"file":"stdint.h","value":"INT64_MAX","line":186},"INT_LEAST32_MIN":{"file":"stdint.h","value":"INT32_MIN","line":150},"SCNu64":{"file":"inttypes.h","value":"\"I64u\"","line":235},"GIT_IDXENTRY_HASHED\t\t\t(1":{"file":"index.h","value":"<< 4)","line":41},"GIT_OID_RAWSZ":{"file":"oid.h","value":"20","line":23},"SCNo8":{"file":"inttypes.h","value":"\"o\"","line":195},"GIT_WIN32":{"file":"common.h","value":"1","line":68},"GIT_IDXENTRY_NAMEMASK":{"file":"index.h","value":"(0x0fff)","line":23},"INT_LEAST64_MAX":{"file":"stdint.h","value":"INT64_MAX","line":153},"SCNuFAST16":{"file":"inttypes.h","value":"\"hu\"","line":217},"INT32_C(val)":{"file":"stdint.h","value":"val##i32","line":232},"SCNxLEAST64":{"file":"inttypes.h","value":"\"I64x\"","line":240},"SCNXLEAST16":{"file":"inttypes.h","value":"\"hX\"","line":215},"PRIx32":{"file":"inttypes.h","value":"\"I32x\"","line":120},"UINT64_MAX":{"file":"stdint.h","value":"_UI64_MAX","line":143},"PRIXMAX":{"file":"inttypes.h","value":"\"I64X\"","line":147},"PRIu64":{"file":"inttypes.h","value":"\"I64u\"","line":132},"INT_LEAST16_MAX":{"file":"stdint.h","value":"INT16_MAX","line":149},"PRIXPTR":{"file":"inttypes.h","value":"\"IX\"","line":152},"PRIXFAST16":{"file":"inttypes.h","value":"\"hX\"","line":116},"PRIdFAST64":{"file":"inttypes.h","value":"\"I64d\"","line":82},"PRIxLEAST32":{"file":"inttypes.h","value":"\"I32x\"","line":124},"SCNx64":{"file":"inttypes.h","value":"\"I64x\"","line":236},"INT32_MIN":{"file":"stdint.h","value":"((int32_t)_I32_MIN)","line":136},"SCNiLEAST32":{"file":"inttypes.h","value":"\"li\"","line":172},"GIT_OID_HEXSZ":{"file":"oid.h","value":"(GIT_OID_RAWSZ * 2)","line":26},"PRIoFAST16":{"file":"inttypes.h","value":"\"ho\"","line":113},"PRIxMAX":{"file":"inttypes.h","value":"\"I64x\"","line":146},"SCNoLEAST32":{"file":"inttypes.h","value":"\"lo\"","line":225},"SCNdFAST32":{"file":"inttypes.h","value":"\"ld\"","line":173},"PRIx64":{"file":"inttypes.h","value":"\"I64x\"","line":133},"PRIxPTR":{"file":"inttypes.h","value":"\"Ix\"","line":151},"PRIxFAST16":{"file":"inttypes.h","value":"\"hx\"","line":115},"PRIXLEAST32":{"file":"inttypes.h","value":"\"I32X\"","line":125},"SCNxLEAST8":{"file":"inttypes.h","value":"\"x\"","line":201},"SCNu8":{"file":"inttypes.h","value":"\"u\"","line":196},"INTMAX_C":{"file":"stdint.h","value":"INT64_C","line":241},"PRIxLEAST64":{"file":"inttypes.h","value":"\"I64x\"","line":137}},"types":[["_git_oid",{"file":"oid.h","type":"struct","value":null,"tdef":null,"used":{"returns":[],"needs":[]},"lineto":37,"line":34,"block":"/** raw binary formatted id */\nunsigned char id[GIT_OID_RAWSZ];\n"}],["git_blob",{"file":"types.h","type":"struct","value":"git_blob","tdef":"typedef","used":{"returns":[],"needs":["git_blob_close","git_blob_lookup","git_blob_lookup_prefix","git_blob_rawcontent","git_blob_rawsize"]},"line":105}],["git_branch",{"file":"branch.h","type":"struct","value":null,"tdef":null,"used":{"returns":[],"needs":[]},"lineto":13,"line":10,"block":"char *remote; /* TODO: Make this a git_remote */\nchar *merge;\n"}],["git_commit",{"file":"types.h","type":"struct","value":"git_commit","tdef":"typedef","used":{"returns":[],"needs":["git_commit_author","git_commit_close","git_commit_committer","git_commit_create","git_commit_id","git_commit_lookup","git_commit_lookup_prefix","git_commit_message","git_commit_message_encoding","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]},"line":108}],["git_config",{"file":"config.h","type":"struct","value":null,"tdef":null,"used":{"returns":[],"needs":["git_config_add_file","git_config_add_file_ondisk","git_config_delete","git_config_foreach","git_config_free","git_config_get_bool","git_config_get_string","git_config_new","git_config_open_global","git_config_open_ondisk","git_config_set_bool","git_config_set_string","git_remote_get","git_repository_config","git_repository_config_autoload"]},"lineto":35,"line":27,"block":"\n/* Open means open the file/database and parse if necessary */\nint (*open)(struct git_config_file *);\nint (*get)(struct git_config_file *, const char *key, const char **value);\nint (*set)(struct git_config_file *, const char *key, const char *value);\nint (*foreach)(struct git_config_file *, int (*fn)(const char *, const char *, void *), void *data);\nvoid (*free)(struct git_config_file *);\n"}],["git_config_file",{"file":"types.h","type":"struct","value":"git_config_file","tdef":"typedef","used":{"returns":[],"needs":["git_config_add_file","git_config_file__ondisk"]},"line":126}],["git_error",{"file":"errors.h","type":"enum","value":null,"tdef":"typedef","used":{"returns":[],"needs":[]},"lineto":116,"line":20,"block":"GIT_SUCCESS = 0,\nGIT_ERROR = -1,\n\n/** Input was not a properly formatted Git object id. */\nGIT_ENOTOID = -2,\n\n/** Input does not exist in the scope searched. */\nGIT_ENOTFOUND = -3,\n\n/** Not enough space available. */\nGIT_ENOMEM = -4,\n\n/** Consult the OS error information. */\nGIT_EOSERR = -5,\n\n/** The specified object is of invalid type */\nGIT_EOBJTYPE = -6,\n\n/** The specified repository is invalid */\nGIT_ENOTAREPO = -7,\n\n/** The object type is invalid or doesn't match */\nGIT_EINVALIDTYPE = -8,\n\n/** The object cannot be written because it's missing internal data */\nGIT_EMISSINGOBJDATA = -9,\n\n/** The packfile for the ODB is corrupted */\nGIT_EPACKCORRUPTED = -10,\n\n/** Failed to acquire or release a file lock */\nGIT_EFLOCKFAIL = -11,\n\n/** The Z library failed to inflate/deflate an object's data */\nGIT_EZLIB = -12,\n\n/** The queried object is currently busy */\nGIT_EBUSY = -13,\n\n/** The index file is not backed up by an existing repository */\nGIT_EBAREINDEX = -14,\n\n/** The name of the reference is not valid */\nGIT_EINVALIDREFNAME = -15,\n\n/** The specified reference has its data corrupted */\nGIT_EREFCORRUPTED = -16,\n\n/** The specified symbolic reference is too deeply nested */\nGIT_ETOONESTEDSYMREF = -17,\n\n/** The pack-refs file is either corrupted or its format is not currently supported */\nGIT_EPACKEDREFSCORRUPTED = -18,\n\n/** The path is invalid */\nGIT_EINVALIDPATH = -19,\n\n/** The revision walker is empty; there are no more commits left to iterate */\nGIT_EREVWALKOVER = -20,\n\n/** The state of the reference is not valid */\nGIT_EINVALIDREFSTATE = -21,\n\n/** This feature has not been implemented yet */\nGIT_ENOTIMPLEMENTED = -22,\n\n/** A reference with this name already exists */\nGIT_EEXISTS = -23,\n\n/** The given integer literal is too large to be parsed */\nGIT_EOVERFLOW = -24,\n\n/** The given literal is not a valid number */\nGIT_ENOTNUM = -25,\n\n/** Streaming error */\nGIT_ESTREAM = -26,\n\n/** invalid arguments to function */\nGIT_EINVALIDARGS = -27,\n\n/** The specified object has its data corrupted */\nGIT_EOBJCORRUPTED = -28,\n\n/** The given short oid is ambiguous */\nGIT_EAMBIGUOUSOIDPREFIX = -29,\n\n/** Skip and passthrough the given ODB backend */\nGIT_EPASSTHROUGH = -30,\n\n/** The path pattern and string did not match */\nGIT_ENOMATCH = -31,\n\n/** The buffer is too short to satisfy the request */\nGIT_ESHORTBUFFER = -32,\n"}],["git_headarray",{"file":"types.h","type":"struct","value":"git_headarray","tdef":"typedef","used":{"returns":[],"needs":["git_remote_ls"]},"line":170}],["git_index",{"file":"types.h","type":"struct","value":"git_index","tdef":"typedef","used":{"returns":[],"needs":["git_index_add","git_index_append","git_index_clear","git_index_entrycount","git_index_entrycount_unmerged","git_index_find","git_index_free","git_index_get","git_index_get_unmerged_byindex","git_index_get_unmerged_bypath","git_index_open","git_index_read","git_index_remove","git_index_uniq","git_index_write","git_repository_index","git_tree_create_fromindex"]},"line":120}],["git_index_entry",{"file":"index.h","type":"struct","value":null,"tdef":"typedef","used":{"returns":["git_index_get"],"needs":["git_index_entry_stage"]},"lineto":84,"line":67,"block":"git_index_time ctime;\ngit_index_time mtime;\n\nunsigned int dev;\nunsigned int ino;\nunsigned int mode;\nunsigned int uid;\nunsigned int gid;\ngit_off_t file_size;\n\ngit_oid oid;\n\nunsigned short flags;\nunsigned short flags_extended;\n\nchar *path;\n"}],["git_index_entry_unmerged",{"file":"index.h","type":"struct","value":null,"tdef":"typedef","used":{"returns":["git_index_get_unmerged_byindex","git_index_get_unmerged_bypath"],"needs":[]},"lineto":91,"line":87,"block":"unsigned int mode[3];\ngit_oid oid[3];\nchar *path;\n"}],["git_index_time",{"file":"index.h","type":"struct","value":null,"tdef":"typedef","used":{"returns":[],"needs":[]},"lineto":64,"line":60,"block":"git_time_t seconds;\n/* nsec should not be stored as time_t compatible */\nunsigned int nanoseconds;\n"}],["git_indexer",{"file":"indexer.h","type":"struct","value":"git_indexer","tdef":"typedef","used":{"returns":[],"needs":["git_indexer_free","git_indexer_hash","git_indexer_new","git_indexer_run","git_indexer_write"]},"line":25}],["git_indexer_stats",{"file":"indexer.h","type":"struct","value":null,"tdef":"typedef","used":{"returns":[],"needs":["git_indexer_run"]},"lineto":22,"line":19,"block":"unsigned int total;\nunsigned int processed;\n"}],["git_object",{"file":"types.h","type":"struct","value":"git_object","tdef":"typedef","used":{"returns":[],"needs":["git_object_close","git_object_id","git_object_lookup","git_object_lookup_prefix","git_object_owner","git_object_type","git_tag_create","git_tag_create_lightweight","git_tag_target"]},"line":96}],["git_odb",{"file":"types.h","type":"struct","value":"git_odb","tdef":"typedef","used":{"returns":["git_repository_database"],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_close","git_odb_exists","git_odb_new","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write"]},"line":78}],["git_odb_backend",{"file":"types.h","type":"struct","value":"git_odb_backend","tdef":"typedef","used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_backend_loose","git_odb_backend_pack"]},"line":81}],["git_odb_object",{"file":"types.h","type":"struct","value":"git_odb_object","tdef":"typedef","used":{"returns":[],"needs":["git_odb_object_close","git_odb_object_data","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_read","git_odb_read_prefix"]},"line":84}],["git_odb_stream",{"file":"types.h","type":"struct","value":"git_odb_stream","tdef":"typedef","used":{"returns":[],"needs":["git_odb_open_rstream","git_odb_open_wstream"]},"line":87}],["git_odb_streammode",{"file":"odb_backend.h","type":"enum","value":null,"tdef":"typedef","used":{"returns":[],"needs":[]},"lineto":93,"line":89,"block":"GIT_STREAM_RDONLY = (1 << 1),\nGIT_STREAM_WRONLY = (1 << 2),\nGIT_STREAM_RW = (GIT_STREAM_RDONLY | GIT_STREAM_WRONLY),\n"}],["git_oid_shorten",{"file":"oid.h","type":"struct","value":"git_oid_shorten","tdef":"typedef","used":{"returns":[],"needs":["git_oid_shorten_add","git_oid_shorten_free"]},"line":155}],["git_otype",{"file":"types.h","type":"enum","value":null,"tdef":"typedef","used":{"returns":[],"needs":["git_object__size","git_object_lookup","git_object_lookup_prefix","git_object_typeisloose","git_odb_hash","git_odb_hashfile","git_odb_open_wstream","git_odb_read_header","git_odb_write"]},"lineto":75,"line":64,"block":"GIT_OBJ_ANY = -2,\t\t/**< Object can be any of the following */\nGIT_OBJ_BAD = -1,\t\t/**< Object is invalid. */\nGIT_OBJ__EXT1 = 0,\t\t/**< Reserved for future use. */\nGIT_OBJ_COMMIT = 1,\t\t/**< A commit object. */\nGIT_OBJ_TREE = 2,\t\t/**< A tree (directory listing) object. */\nGIT_OBJ_BLOB = 3,\t\t/**< A file revision object. */\nGIT_OBJ_TAG = 4,\t\t/**< An annotated tag object. */\nGIT_OBJ__EXT2 = 5,\t\t/**< Reserved for future use. */\nGIT_OBJ_OFS_DELTA = 6, /**< A delta, base is given by an offset. */\nGIT_OBJ_REF_DELTA = 7, /**< A delta, base is given by object id. */\n"}],["git_reference",{"file":"types.h","type":"struct","value":"git_reference","tdef":"typedef","used":{"returns":[],"needs":["git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type","git_reflog_read","git_reflog_write","git_repository_head"]},"line":148}],["git_reflog",{"file":"types.h","type":"struct","value":"git_reflog","tdef":"typedef","used":{"returns":[],"needs":["git_reflog_entry_byindex","git_reflog_entrycount","git_reflog_free","git_reflog_read"]},"line":132}],["git_reflog_entry",{"file":"types.h","type":"struct","value":"git_reflog_entry","tdef":"typedef","used":{"returns":["git_reflog_entry_byindex"],"needs":["git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_entry_oidnew","git_reflog_entry_oidold"]},"line":129}],["git_refspec",{"file":"types.h","type":"struct","value":"git_refspec","tdef":"typedef","used":{"returns":["git_remote_fetchspec","git_remote_pushspec"],"needs":["git_refspec_src_match","git_refspec_transform"]},"line":161}],["git_remote",{"file":"types.h","type":"struct","value":"git_remote","tdef":"typedef","used":{"returns":[],"needs":["git_remote_connect","git_remote_download","git_remote_fetchspec","git_remote_free","git_remote_get","git_remote_ls","git_remote_name","git_remote_negotiate","git_remote_new","git_remote_pushspec","git_remote_update_tips","git_remote_url"]},"line":162}],["git_remote_head",{"file":"types.h","type":"struct","value":"git_remote_head","tdef":"typedef","used":{"returns":[],"needs":[]},"line":169}],["git_repository",{"file":"types.h","type":"struct","value":"git_repository","tdef":"typedef","used":{"returns":["git_object_owner","git_reference_owner","git_revwalk_repository"],"needs":["git_blob_create_frombuffer","git_blob_create_fromfile","git_blob_lookup","git_blob_lookup_prefix","git_commit_create","git_commit_create_v","git_commit_lookup","git_commit_lookup_prefix","git_object_lookup","git_object_lookup_prefix","git_reference_create_oid","git_reference_create_symbolic","git_reference_foreach","git_reference_listall","git_reference_lookup","git_reference_packall","git_remote_new","git_repository_config","git_repository_config_autoload","git_repository_database","git_repository_free","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_index","git_repository_init","git_repository_is_bare","git_repository_is_empty","git_repository_open","git_repository_path","git_revwalk_new","git_status_file","git_status_foreach","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_list","git_tag_list_match","git_tag_lookup","git_tag_lookup_prefix","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_write"]},"line":93}],["git_repository_pathid",{"file":"repository.h","type":"enum","value":null,"tdef":"typedef","used":{"returns":[],"needs":["git_repository_path"]},"lineto":257,"line":252,"block":"GIT_REPO_PATH,\nGIT_REPO_PATH_INDEX,\nGIT_REPO_PATH_ODB,\nGIT_REPO_PATH_WORKDIR\n"}],["git_revwalk",{"file":"types.h","type":"struct","value":"git_revwalk","tdef":"typedef","used":{"returns":[],"needs":["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]},"line":99}],["git_rtype",{"file":"types.h","type":"enum","value":null,"tdef":"typedef","used":{"returns":[],"needs":[]},"lineto":158,"line":151,"block":"GIT_REF_INVALID = 0, /** Invalid reference */\nGIT_REF_OID = 1, /** A reference which points at an object id */\nGIT_REF_SYMBOLIC = 2, /** A reference which points at another reference */\nGIT_REF_PACKED = 4,\nGIT_REF_HAS_PEEL = 8,\nGIT_REF_LISTALL = GIT_REF_OID|GIT_REF_SYMBOLIC|GIT_REF_PACKED,\n"}],["git_signature",{"file":"types.h","type":"struct","value":null,"tdef":"typedef","used":{"returns":["git_commit_author","git_commit_committer","git_reflog_entry_committer","git_signature_dup","git_tag_tagger"],"needs":["git_commit_create","git_commit_create_v","git_reflog_write","git_signature_dup","git_signature_free","git_signature_new","git_signature_now","git_tag_create"]},"lineto":145,"line":141,"block":"char *name; /** full name of the author */\nchar *email; /** email of the author */\ngit_time when; /** time when the action happened */\n"}],["git_strarray",{"file":"common.h","type":"struct","value":null,"tdef":"typedef","used":{"returns":[],"needs":["git_reference_listall","git_strarray_free","git_tag_list","git_tag_list_match"]},"lineto":100,"line":97,"block":"char **strings;\nsize_t count;\n"}],["git_tag",{"file":"types.h","type":"struct","value":"git_tag","tdef":"typedef","used":{"returns":[],"needs":["git_tag_close","git_tag_id","git_tag_lookup","git_tag_lookup_prefix","git_tag_message","git_tag_name","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]},"line":102}],["git_time",{"file":"types.h","type":"struct","value":null,"tdef":"typedef","used":{"returns":[],"needs":[]},"lineto":138,"line":135,"block":"git_time_t time; /** time in seconds from epoch */\nint offset; /** timezone offset, in minutes */\n"}],["git_transport",{"file":"types.h","type":"struct","value":"git_transport","tdef":"typedef","used":{"returns":[],"needs":["git_transport_new"]},"line":165}],["git_tree",{"file":"types.h","type":"struct","value":"git_tree","tdef":"typedef","used":{"returns":[],"needs":["git_commit_create","git_commit_create_v","git_commit_tree","git_tree_close","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_create"]},"line":114}],["git_tree_entry",{"file":"types.h","type":"struct","value":"git_tree_entry","tdef":"typedef","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname","git_treebuilder_get"],"needs":["git_tree_entry_attributes","git_tree_entry_id","git_tree_entry_name","git_tree_entry_type","git_treebuilder_filter","git_treebuilder_insert"]},"line":111}],["git_treebuilder",{"file":"types.h","type":"struct","value":"git_treebuilder","tdef":"typedef","used":{"returns":[],"needs":["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]},"line":117}],["imaxdiv_t",{"file":"inttypes.h","type":"struct","value":null,"tdef":"typedef","used":{"returns":["imaxdiv"],"needs":["imaxdiv"]},"lineto":50,"line":47,"block":"intmax_t quot;\nintmax_t rem;\n"}]],"files":[{"file":"errors.h","lines":144,"meta":{"brief":"Git error handling routines and variables","file":"git2/errors.h","defgroup":null,"ingroup":"Git"},"functions":["git_lasterror","git_strerror","git_clearerror"]},{"file":"net.h","lines":53,"meta":{"brief":"Git networking declarations","file":"git2/net.h","defgroup":null,"ingroup":"Git"},"functions":[]},{"file":"refs.h","lines":258,"meta":{"brief":"Git reference management routines","file":"git2/refs.h","defgroup":"git_reference Git reference management routines","ingroup":"Git"},"functions":["git_reference_lookup","git_reference_create_symbolic","git_reference_create_oid","git_reference_oid","git_reference_target","git_reference_type","git_reference_name","git_reference_resolve","git_reference_owner","git_reference_set_target","git_reference_set_oid","git_reference_rename","git_reference_delete","git_reference_packall","git_reference_listall","git_reference_foreach"]},{"file":"tag.h","lines":279,"meta":{"brief":"Git tag parsing routines","file":"git2/tag.h","defgroup":"git_tag Git tag management","ingroup":"Git"},"functions":["git_tag_lookup","git_tag_lookup_prefix","git_tag_close","git_tag_id","git_tag_target","git_tag_target_oid","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_list","git_tag_list_match"]},{"file":"revwalk.h","lines":169,"meta":{"brief":"Git revision traversal routines","file":"git2/revwalk.h","defgroup":"git_revwalk Git revision traversal routines","ingroup":"Git"},"functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_hide","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"]},{"file":"refspec.h","lines":60,"meta":{"brief":"Git refspec attributes","file":"git2/refspec.h","defgroup":"git_refspec Git refspec attributes","ingroup":"Git"},"functions":["git_refspec_src_match","git_refspec_transform"]},{"file":"odb_backend.h","lines":100,"meta":{"brief":"Git custom backend functions","file":"git2/backend.h","defgroup":"git_backend Git custom backend API","ingroup":"Git"},"functions":["git_odb_backend_pack","git_odb_backend_loose"]},{"file":"status.h","lines":63,"meta":{"brief":"Git file status routines","file":"git2/status.h","defgroup":"git_status Git file status routines","ingroup":"Git"},"functions":["git_status_foreach","git_status_file"]},{"file":"remote.h","lines":150,"meta":{"brief":"Git remote management functions","file":"git2/remote.h","defgroup":"git_remote remote management functions","ingroup":"Git"},"functions":["git_remote_new","git_remote_get","git_remote_name","git_remote_url","git_remote_fetchspec","git_remote_pushspec","git_remote_connect","git_remote_ls","git_remote_negotiate","git_remote_download","git_remote_free","git_remote_update_tips"]},{"file":"indexer.h","lines":76,"meta":{"brief":null,"file":null,"defgroup":null,"ingroup":null},"functions":["git_indexer_new","git_indexer_run","git_indexer_write","git_indexer_hash","git_indexer_free"]},{"file":"odb.h","lines":331,"meta":{"brief":"Git object database routines","file":"git2/odb.h","defgroup":"git_odb Git object database routines","ingroup":"Git"},"functions":["git_odb_new","git_odb_open","git_odb_add_backend","git_odb_add_alternate","git_odb_close","git_odb_read","git_odb_read_prefix","git_odb_read_header","git_odb_exists","git_odb_write","git_odb_open_wstream","git_odb_open_rstream","git_odb_hash","git_odb_hashfile","git_odb_object_close","git_odb_object_id","git_odb_object_data","git_odb_object_size","git_odb_object_type"]},{"file":"object.h","lines":173,"meta":{"brief":"Git revision object management routines","file":"git2/object.h","defgroup":"git_object Git revision object management routines","ingroup":"Git"},"functions":["git_object_lookup","git_object_lookup_prefix","git_object_id","git_object_type","git_object_owner","git_object_close","git_object_typeisloose","git_object__size"]},{"file":"branch.h","lines":15,"meta":{"brief":null,"file":null,"defgroup":null,"ingroup":null},"functions":[]},{"file":"blob.h","lines":120,"meta":{"brief":"Git blob load and write routines","file":"git2/blob.h","defgroup":"git_blob Git blob load and write routines","ingroup":"Git"},"functions":["git_blob_lookup","git_blob_lookup_prefix","git_blob_close","git_blob_rawcontent","git_blob_rawsize","git_blob_create_fromfile","git_blob_create_frombuffer"]},{"file":"signature.h","lines":65,"meta":{"brief":"Git signature creation","file":"git2/signature.h","defgroup":"git_signature Git signature creation","ingroup":"Git"},"functions":["git_signature_new","git_signature_now","git_signature_dup","git_signature_free"]},{"file":"stdint.h","lines":247,"meta":{"brief":null,"file":null,"defgroup":null,"ingroup":null},"functions":[]},{"file":"commit.h","lines":263,"meta":{"brief":"Git commit parsing, formatting routines","file":"git2/commit.h","defgroup":"git_commit Git commit parsing, formatting routines","ingroup":"Git"},"functions":["git_commit_lookup","git_commit_lookup_prefix","git_commit_close","git_commit_id","git_commit_message_encoding","git_commit_message","git_commit_time","git_commit_time_offset","git_commit_committer","git_commit_author","git_commit_tree","git_commit_tree_oid","git_commit_parentcount","git_commit_parent","git_commit_parent_oid","git_commit_create","git_commit_create_v"]},{"file":"types.h","lines":175,"meta":{"brief":"libgit2 base & compatibility types","file":"git2/types.h","defgroup":null,"ingroup":"Git"},"functions":[]},{"file":"oid.h","lines":208,"meta":{"brief":"Git object id routines","file":"git2/oid.h","defgroup":"git_oid Git object id routines","ingroup":"Git"},"functions":["git_oid_fromstr","git_oid_fromstrn","git_oid_fromraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_to_string","git_oid_cpy","git_oid_cmp","git_oid_ncmp","git_oid_shorten_add","git_oid_shorten_free"]},{"file":"repository.h","lines":334,"meta":{"brief":"Git repository management routines","file":"git2/repository.h","defgroup":"git_repository Git repository management routines","ingroup":"Git"},"functions":["git_repository_open","git_repository_discover","git_repository_database","git_repository_index","git_repository_free","git_repository_init","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_is_empty","git_repository_path","git_repository_is_bare","git_repository_config","git_repository_config_autoload"]},{"file":"transport.h","lines":32,"meta":{"brief":"Git protocol transport abstraction","file":"git2/transport.h","defgroup":"git_transport Git protocol transport abstraction","ingroup":"Git"},"functions":["git_transport_new"]},{"file":"inttypes.h","lines":305,"meta":{"brief":null,"file":null,"defgroup":null,"ingroup":null},"functions":["imaxdiv"]},{"file":"zlib.h","lines":40,"meta":{"brief":"Git data compression routines","file":"git2/zlib.h","defgroup":"git_zlib Git data compression routines","ingroup":"Git"},"functions":[]},{"file":"thread-utils.h","lines":60,"meta":{"brief":null,"file":null,"defgroup":null,"ingroup":null},"functions":[]},{"file":"index.h","lines":306,"meta":{"brief":"Git index parsing and manipulation routines","file":"git2/index.h","defgroup":"git_index Git index parsing and manipulation routines","ingroup":"Git"},"functions":["git_index_open","git_index_clear","git_index_free","git_index_read","git_index_write","git_index_find","git_index_uniq","git_index_add","git_index_append","git_index_remove","git_index_get","git_index_entrycount","git_index_entrycount_unmerged","git_index_get_unmerged_bypath","git_index_get_unmerged_byindex","git_index_entry_stage"]},{"file":"reflog.h","lines":111,"meta":{"brief":"Git reflog management routines","file":"git2/reflog.h","defgroup":"git_reflog Git reflog management routines","ingroup":"Git"},"functions":["git_reflog_read","git_reflog_write","git_reflog_entrycount","git_reflog_entry_byindex","git_reflog_entry_oidold","git_reflog_entry_oidnew","git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_free"]},{"file":"config.h","lines":278,"meta":{"brief":"Git config management routines","file":"git2/config.h","defgroup":"git_config Git config management routines","ingroup":"Git"},"functions":["git_config_find_global","git_config_find_system","git_config_open_global","git_config_file__ondisk","git_config_new","git_config_add_file","git_config_add_file_ondisk","git_config_open_ondisk","git_config_free","git_config_get_bool","git_config_get_string","git_config_set_bool","git_config_set_string","git_config_delete","git_config_foreach"]},{"file":"tree.h","lines":273,"meta":{"brief":"Git tree parsing, loading routines","file":"git2/tree.h","defgroup":"git_tree Git tree parsing, loading routines","ingroup":"Git"},"functions":["git_tree_lookup","git_tree_lookup_prefix","git_tree_close","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_entry_type","git_tree_create_fromindex","git_treebuilder_create","git_treebuilder_clear","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_filter","git_treebuilder_write"]},{"file":"common.h","lines":116,"meta":{"brief":"Git common platform definitions","file":"git2/common.h","defgroup":"git_common Git common platform definitions","ingroup":"Git"},"functions":["__attribute__","__attribute__","git_strarray_free"]}],"examples":[["general.c","ex/v0.15.0/general.html"],["showindex.c","ex/v0.15.0/showindex.html"]]}