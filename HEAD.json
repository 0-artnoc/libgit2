{"files":[{"file":"reflog.h","functions":["git_reflog_read","git_reflog_write","git_reflog_append","git_reflog_rename","git_reflog_delete","git_reflog_entrycount","git_reflog_entry_byindex","git_reflog_drop","git_reflog_entry_oidold","git_reflog_entry_oidnew","git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_free"],"meta":{"brief":"Git reflog management routines","defgroup":"git_reflog Git reflog management routines","ingroup":"Git","comments":"\n"},"lines":158},{"file":"branch.h","functions":["git_branch_create","git_branch_delete","git_branch_foreach","git_branch_move","git_branch_lookup","git_branch_tracking"],"meta":{"brief":"Git branch parsing routines","defgroup":"git_branch Git branch management","ingroup":"Git","comments":"\n"},"lines":158},{"file":"windows.h","functions":["gitwin_set_codepage","gitwin_get_codepage","gitwin_set_utf8"],"meta":{"brief":"Windows-specific functions","ingroup":"Git","comments":"\n"},"lines":58},{"file":"indexer.h","functions":["git_indexer_stream_new","git_indexer_stream_add","git_indexer_stream_finalize","git_indexer_stream_hash","git_indexer_stream_free","git_indexer_new","git_indexer_run","git_indexer_write","git_indexer_hash","git_indexer_free"],"meta":{},"lines":121},{"file":"common.h","functions":["git_libgit2_version","git_libgit2_capabilities"],"meta":{"brief":"Git common platform definitions","defgroup":"git_common Git common platform definitions","ingroup":"Git","comments":"\n"},"lines":131},{"file":"refspec.h","functions":["git_refspec_parse","git_refspec_src","git_refspec_dst","git_refspec_force","git_refspec_src_matches","git_refspec_transform"],"meta":{"brief":"Git refspec attributes","defgroup":"git_refspec Git refspec attributes","ingroup":"Git","comments":"\n"},"lines":76},{"file":"signature.h","functions":["git_signature_new","git_signature_now","git_signature_dup","git_signature_free"],"meta":{"brief":"Git signature creation","defgroup":"git_signature Git signature creation","ingroup":"Git","comments":"\n"},"lines":68},{"file":"version.h","functions":[],"meta":{},"lines":15},{"file":"status.h","functions":["git_status_foreach","git_status_foreach_ext","git_status_file","git_status_should_ignore"],"meta":{"brief":"Git file status routines","defgroup":"git_status Git file status routines","ingroup":"Git","comments":"\n"},"lines":167},{"file":"notes.h","functions":["git_note_read","git_note_message","git_note_oid","git_note_create","git_note_remove","git_note_free","git_note_default_ref","git_note_foreach"],"meta":{"brief":"Git notes management routines","defgroup":"git_note Git notes management routines","ingroup":"Git","comments":"\n"},"lines":139},{"file":"config.h","functions":["git_config_find_global","git_config_find_system","git_config_open_global","git_config_file__ondisk","git_config_new","git_config_add_file","git_config_add_file_ondisk","git_config_open_ondisk","git_config_free","git_config_get_int32","git_config_get_int64","git_config_get_bool","git_config_get_string","git_config_get_multivar","git_config_set_int32","git_config_set_int64","git_config_set_bool","git_config_set_string","git_config_set_multivar","git_config_delete","git_config_foreach","git_config_foreach_match","git_config_get_mapped"],"meta":{"brief":"Git config management routines","defgroup":"git_config Git config management routines","ingroup":"Git","comments":"\n"},"lines":374},{"file":"net.h","functions":[],"meta":{"brief":"Git networking declarations","ingroup":"Git","comments":"\n"},"lines":51},{"file":"reset.h","functions":["git_reset"],"meta":{"brief":"Git reset management routines","ingroup":"Git","comments":"\n"},"lines":44},{"file":"blob.h","functions":["git_blob_lookup","git_blob_lookup_prefix","git_blob_free","git_blob_rawcontent","git_blob_rawsize","git_blob_create_fromfile","git_blob_create_fromdisk","git_blob_create_fromchunks","git_blob_create_frombuffer"],"meta":{"brief":"Git blob load and write routines","defgroup":"git_blob Git blob load and write routines","ingroup":"Git","comments":"\n"},"lines":174},{"file":"index.h","functions":["git_index_open","git_index_clear","git_index_free","git_index_caps","git_index_set_caps","git_index_read","git_index_write","git_index_find","git_index_uniq","git_index_add","git_index_add2","git_index_append","git_index_append2","git_index_remove","git_index_get","git_index_entrycount","git_index_entrycount_unmerged","git_index_get_unmerged_bypath","git_index_get_unmerged_byindex","git_index_entry_stage","git_index_read_tree"],"meta":{"brief":"Git index parsing and manipulation routines","defgroup":"git_index Git index parsing and manipulation routines","ingroup":"Git","comments":"\n"},"lines":350},{"file":"repository.h","functions":["git_repository_open","git_repository_wrap_odb","git_repository_discover","git_repository_open_ext","git_repository_free","git_repository_init","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_is_empty","git_repository_path","git_repository_workdir","git_repository_set_workdir","git_repository_is_bare","git_repository_config","git_repository_set_config","git_repository_odb","git_repository_set_odb","git_repository_index","git_repository_set_index","git_repository_message","git_repository_message_remove"],"meta":{"brief":"Git repository management routines","defgroup":"git_repository Git repository management routines","ingroup":"Git","comments":"\n"},"lines":342},{"file":"tag.h","functions":["git_tag_lookup","git_tag_lookup_prefix","git_tag_free","git_tag_id","git_tag_target","git_tag_target_oid","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_list","git_tag_list_match","git_tag_peel"],"meta":{"brief":"Git tag parsing routines","defgroup":"git_tag Git tag management","ingroup":"Git","comments":"\n"},"lines":297},{"file":"odb_backend.h","functions":[],"meta":{"brief":"Git custom backend functions","defgroup":"git_backend Git custom backend API","ingroup":"Git","comments":"\n"},"lines":107},{"file":"revparse.h","functions":["git_revparse_single"],"meta":{"brief":"Git revision parsing routines","defgroup":"git_revparse Git revision parsing routines","ingroup":"Git","comments":"\n"},"lines":36},{"file":"stdint.h","functions":[],"meta":{},"lines":247},{"file":"inttypes.h","functions":[],"meta":{},"lines":305},{"file":"commit.h","functions":["git_commit_lookup","git_commit_lookup_prefix","git_commit_free","git_commit_id","git_commit_message_encoding","git_commit_message","git_commit_time","git_commit_time_offset","git_commit_committer","git_commit_author","git_commit_tree","git_commit_tree_oid","git_commit_parentcount","git_commit_parent","git_commit_parent_oid","git_commit_nth_gen_ancestor","git_commit_create","git_commit_create_v"],"meta":{"brief":"Git commit parsing, formatting routines","defgroup":"git_commit Git commit parsing, formatting routines","ingroup":"Git","comments":"\n"},"lines":289},{"file":"types.h","functions":[],"meta":{"brief":"libgit2 base & compatibility types","ingroup":"Git","comments":"\n"},"lines":187},{"file":"remote.h","functions":["git_remote_new","git_remote_load","git_remote_save","git_remote_name","git_remote_url","git_remote_pushurl","git_remote_set_url","git_remote_set_pushurl","git_remote_set_fetchspec","git_remote_fetchspec","git_remote_set_pushspec","git_remote_pushspec","git_remote_connect","git_remote_ls","git_remote_download","git_remote_connected","git_remote_disconnect","git_remote_free","git_remote_update_tips","git_remote_valid_url","git_remote_supported_url","git_remote_list","git_remote_add","git_remote_check_cert","git_remote_set_callbacks"],"meta":{"brief":"Git remote management functions","defgroup":"git_remote remote management functions","ingroup":"Git","comments":"\n"},"lines":306},{"file":"merge.h","functions":["git_merge_base","git_merge_base_many"],"meta":{"brief":"Git merge-base routines","defgroup":"git_revwalk Git merge-base routines","ingroup":"Git","comments":"\n"},"lines":45},{"file":"diff.h","functions":["git_diff_list_free","git_diff_tree_to_tree","git_diff_index_to_tree","git_diff_workdir_to_index","git_diff_workdir_to_tree","git_diff_merge","git_diff_foreach","git_diff_print_compact","git_diff_print_patch","git_diff_blobs"],"meta":{"brief":"Git tree and file differencing routines.","ingroup":"Git","comments":"\n"},"lines":409},{"file":"tree.h","functions":["git_tree_lookup","git_tree_lookup_prefix","git_tree_free","git_tree_entry_free","git_tree_entry_dup","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_entry_type","git_tree_entry_to_object","git_tree_create_fromindex","git_treebuilder_create","git_treebuilder_clear","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_filter","git_treebuilder_write","git_tree_entry_bypath","git_tree_walk"],"meta":{"brief":"Git tree parsing, loading routines","defgroup":"git_tree Git tree parsing, loading routines","ingroup":"Git","comments":"\n"},"lines":356},{"file":"submodule.h","functions":["git_submodule_foreach","git_submodule_lookup"],"meta":{"brief":"Git submodule management utilities","defgroup":"git_submodule Git submodule management routines","ingroup":"Git","comments":"\n"},"lines":103},{"file":"message.h","functions":["git_message_prettify"],"meta":{"brief":"Git message management routines","ingroup":"Git","comments":"\n"},"lines":41},{"file":"odb.h","functions":["git_odb_new","git_odb_open","git_odb_add_backend","git_odb_add_alternate","git_odb_free","git_odb_read","git_odb_read_prefix","git_odb_read_header","git_odb_exists","git_odb_foreach","git_odb_write","git_odb_open_wstream","git_odb_open_rstream","git_odb_hash","git_odb_hashfile","git_odb_object_free","git_odb_object_id","git_odb_object_data","git_odb_object_size","git_odb_object_type"],"meta":{"brief":"Git object database routines","defgroup":"git_odb Git object database routines","ingroup":"Git","comments":"\n"},"lines":345},{"file":"threads.h","functions":["git_threads_init","git_threads_shutdown"],"meta":{"brief":"Library level thread functions","defgroup":"git_thread Threading functions","ingroup":"Git","comments":"\n"},"lines":47},{"file":"oid.h","functions":["git_oid_fromstr","git_oid_fromstrn","git_oid_fromraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_tostr","git_oid_cpy","git_oid_cmp","git_oid_equal","git_oid_ncmp","git_oid_streq","git_oid_iszero","git_oid_shorten_new","git_oid_shorten_add","git_oid_shorten_free"],"meta":{"brief":"Git object id routines","defgroup":"git_oid Git object id routines","ingroup":"Git","comments":"\n"},"lines":247},{"file":"attr.h","functions":["git_attr_get","git_attr_get_many","git_attr_foreach","git_attr_cache_flush","git_attr_add_macro"],"meta":{"brief":"Git attribute management routines","defgroup":"git_attr Git attribute management routines","ingroup":"Git","comments":"\n"},"lines":239},{"file":"errors.h","functions":["giterr_last","giterr_clear"],"meta":{"brief":"Git error handling routines and variables","ingroup":"Git","comments":"\n"},"lines":73},{"file":"revwalk.h","functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_push_glob","git_revwalk_push_head","git_revwalk_hide","git_revwalk_hide_glob","git_revwalk_hide_head","git_revwalk_push_ref","git_revwalk_hide_ref","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"],"meta":{"brief":"Git revision traversal routines","defgroup":"git_revwalk Git revision traversal routines","ingroup":"Git","comments":"\n"},"lines":237},{"file":"object.h","functions":["git_object_lookup","git_object_lookup_prefix","git_object_id","git_object_type","git_object_owner","git_object_free","git_object_type2string","git_object_string2type","git_object_typeisloose","git_object__size","git_object_peel"],"meta":{"brief":"Git revision object management routines","defgroup":"git_object Git revision object management routines","ingroup":"Git","comments":"\n"},"lines":190},{"file":"refs.h","functions":["git_reference_lookup","git_reference_name_to_oid","git_reference_create_symbolic","git_reference_create_oid","git_reference_oid","git_reference_target","git_reference_type","git_reference_name","git_reference_resolve","git_reference_owner","git_reference_set_target","git_reference_set_oid","git_reference_rename","git_reference_delete","git_reference_packall","git_reference_list","git_reference_foreach","git_reference_is_packed","git_reference_reload","git_reference_free","git_reference_cmp","git_reference_foreach_glob","git_reference_has_log","git_reference_is_branch"],"meta":{"brief":"Git reference management routines","defgroup":"git_reference Git reference management routines","ingroup":"Git","comments":"\n"},"lines":378}],"functions":{"git_reflog_read":{"type":"function","file":"reflog.h","line":37,"lineto":37,"args":[{"name":"reflog","type":"git_reflog **","comment":"pointer to reflog"},{"name":"ref","type":"git_reference *","comment":"log pointer to reflog"}],"argline":"git_reflog **reflog, git_reference *ref","sig":"git_reflog **::git_reference *","return":{"type":"int","comment":"0 or an error code"},"description":"Read the reflog for the given reference","comments":"If there is no reflog file for the given\nreference yet, an empty reflog object will\nbe returned.\n\nThe reflog must be freed manually by using\ngit_reflog_free().\n","group":"reflog"},"git_reflog_write":{"type":"function","file":"reflog.h","line":46,"lineto":46,"args":[{"name":"reflog","type":"git_reflog *","comment":"an existing reflog object"}],"argline":"git_reflog *reflog","sig":"git_reflog *","return":{"type":"int","comment":"0 or an error code"},"description":"Write an existing in-memory reflog object back to disk\nusing an atomic file lock.","comments":"","group":"reflog"},"git_reflog_append":{"type":"function","file":"reflog.h","line":59,"lineto":59,"args":[{"name":"reflog","type":"git_reflog *","comment":"an existing reflog object"},{"name":"new_oid","type":"const git_oid *","comment":"the OID the reference is now pointing to"},{"name":"committer","type":"const git_signature *","comment":"the signature of the committer"},{"name":"msg","type":"const char *","comment":"the reflog message"}],"argline":"git_reflog *reflog, const git_oid *new_oid, const git_signature *committer, const char *msg","sig":"git_reflog *::const git_oid *::const git_signature *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Add a new entry to the reflog.","comments":"`msg` is optional and can be NULL.\n","group":"reflog"},"git_reflog_rename":{"type":"function","file":"reflog.h","line":70,"lineto":70,"args":[{"name":"ref","type":"git_reference *","comment":"the reference"},{"name":"new_name","type":"const char *","comment":"the new name of the reference"}],"argline":"git_reference *ref, const char *new_name","sig":"git_reference *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Rename the reflog for the given reference","comments":"The reflog to be renamed is expected to already exist\n","group":"reflog"},"git_reflog_delete":{"type":"function","file":"reflog.h","line":78,"lineto":78,"args":[{"name":"ref","type":"git_reference *","comment":"the reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":"0 or an error code"},"description":"Delete the reflog for the given reference","comments":"","group":"reflog"},"git_reflog_entrycount":{"type":"function","file":"reflog.h","line":86,"lineto":86,"args":[{"name":"reflog","type":"git_reflog *","comment":"the previously loaded reflog"}],"argline":"git_reflog *reflog","sig":"git_reflog *","return":{"type":"unsigned int","comment":"the number of log entries"},"description":"Get the number of log entries in a reflog","comments":"","group":"reflog"},"git_reflog_entry_byindex":{"type":"function","file":"reflog.h","line":95,"lineto":95,"args":[{"name":"reflog","type":"git_reflog *","comment":"a previously loaded reflog"},{"name":"idx","type":"size_t","comment":"the position to lookup"}],"argline":"git_reflog *reflog, size_t idx","sig":"git_reflog *::size_t","return":{"type":"const git_reflog_entry *","comment":"the entry; NULL if not found"},"description":"Lookup an entry by its index","comments":"","group":"reflog"},"git_reflog_drop":{"type":"function","file":"reflog.h","line":112,"lineto":115,"args":[{"name":"reflog","type":"git_reflog *","comment":"a previously loaded reflog."},{"name":"idx","type":"unsigned int","comment":"the position of the entry to remove."},{"name":"rewrite_previous_entry","type":"int","comment":"1 to rewrite the history; 0 otherwise."}],"argline":"git_reflog *reflog,\n\tunsigned int idx,\n\tint rewrite_previous_entry","sig":"git_reflog *::unsigned int::int","return":{"type":"int","comment":"0 on success or an error code."},"description":"Remove an entry from the reflog by its index","comments":"To ensure there's no gap in the log history, set the `rewrite_previosu_entry` to 1.\nWhen deleting entry `n`, member old_oid of entry `n-1` (if any) will be updated with\nthe value of memeber new_oid of entry `n+1`.\n","group":"reflog"},"git_reflog_entry_oidold":{"type":"function","file":"reflog.h","line":123,"lineto":123,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"const git_oid *","comment":"the old oid"},"description":"Get the old oid","comments":"","group":"reflog"},"git_reflog_entry_oidnew":{"type":"function","file":"reflog.h","line":131,"lineto":131,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"const git_oid *","comment":"the new oid at this time"},"description":"Get the new oid","comments":"","group":"reflog"},"git_reflog_entry_committer":{"type":"function","file":"reflog.h","line":139,"lineto":139,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"git_signature *","comment":"the committer"},"description":"Get the committer of this entry","comments":"","group":"reflog"},"git_reflog_entry_msg":{"type":"function","file":"reflog.h","line":147,"lineto":147,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"char *","comment":"the log msg"},"description":"Get the log msg","comments":"","group":"reflog"},"git_reflog_free":{"type":"function","file":"reflog.h","line":154,"lineto":154,"args":[{"name":"reflog","type":"git_reflog *","comment":"reflog to free"}],"argline":"git_reflog *reflog","sig":"git_reflog *","return":{"type":"void"},"description":"Free the reflog","comments":"","group":"reflog"},"git_branch_create":{"type":"function","file":"branch.h","line":48,"lineto":53,"args":[{"name":"branch_out","type":"git_reference **","comment":"Pointer where to store the underlying reference."},{"name":"repo","type":"git_repository *"},{"name":"branch_name","type":"const char *","comment":"Name for the branch; this name is validated for consistency. It should also not conflict with an already existing branch name."},{"name":"target","type":"const git_object *","comment":"Object to which this branch should point. This object must belong to the given `repo` and can either be a git_commit or a git_tag. When a git_tag is being passed, it should be dereferencable to a git_commit which oid will be used as the target of the branch."},{"name":"force","type":"int","comment":"Overwrite existing branch."}],"argline":"git_reference **branch_out,\n\t\tgit_repository *repo,\n\t\tconst char *branch_name,\n\t\tconst git_object *target,\n\t\tint force","sig":"git_reference **::git_repository *::const char *::const git_object *::int","return":{"type":"int","comment":"0 or an error code. A proper reference is written in the refs/heads namespace pointing to the provided target commit."},"description":"Create a new branch pointing at a target commit","comments":"A new direct reference will be created pointing to\nthis target commit. If `force` is true and a reference\nalready exists with the given name, it'll be replaced.\n\nThe returned reference must be freed by the user.\n","group":"branch"},"git_branch_delete":{"type":"function","file":"branch.h","line":69,"lineto":72,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where lives the branch."},{"name":"branch_name","type":"const char *","comment":"Name of the branch to be deleted; this name is validated for consistency."},{"name":"branch_type","type":"git_branch_t","comment":"Type of the considered branch. This should be valued with either GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE."}],"argline":"git_repository *repo,\n\t\tconst char *branch_name,\n\t\tgit_branch_t branch_type","sig":"git_repository *::const char *::git_branch_t","return":{"type":"int","comment":"0 on success, GIT_ENOTFOUND if the branch doesn't exist or an error code."},"description":"Delete an existing branch reference.","comments":"","group":"branch"},"git_branch_foreach":{"type":"function","file":"branch.h","line":89,"lineto":97,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the branches."},{"name":"list_flags","type":"unsigned int","comment":"Filtering flags for the branch listing. Valid values are GIT_BRANCH_LOCAL, GIT_BRANCH_REMOTE or a combination of the two."},{"name":"branch_cb","type":"int (*)(\n\t\t\tconst char *branch_name,\n\t\t\tgit_branch_t branch_type,\n\t\t\tvoid *payload)","comment":"Callback to invoke per found branch."},{"name":"payload","type":"void *","comment":"Extra parameter to callback function."}],"argline":"git_repository *repo,\n\t\tunsigned int list_flags,\n\t\tint (*branch_cb)(\n\t\t\tconst char *branch_name,\n\t\t\tgit_branch_t branch_type,\n\t\t\tvoid *payload),\n\t\tvoid *payload","sig":"git_repository *::unsigned int::int (*)(\n\t\t\tconst char *branch_name,\n\t\t\tgit_branch_t branch_type,\n\t\t\tvoid *payload)::void *","return":{"type":"int","comment":"0 or an error code."},"description":"Loop over all the branches and issue a callback for each one.","comments":"","group":"branch"},"git_branch_move":{"type":"function","file":"branch.h","line":111,"lineto":114,"args":[{"name":"branch","type":"git_reference *","comment":"Current underlying reference of the branch."},{"name":"new_branch_name","type":"const char *","comment":"Target name of the branch once the move is performed; this name is validated for consistency."},{"name":"force","type":"int","comment":"Overwrite existing branch."}],"argline":"git_reference *branch,\n\t\tconst char *new_branch_name,\n\t\tint force","sig":"git_reference *::const char *::int","return":{"type":"int","comment":"0 on success, or an error code."},"description":"Move/rename an existing local branch reference.","comments":"","group":"branch"},"git_branch_lookup":{"type":"function","file":"branch.h","line":134,"lineto":138,"args":[{"name":"branch_out","type":"git_reference **","comment":"pointer to the looked-up branch reference"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the branch"},{"name":"branch_name","type":"const char *","comment":"Name of the branch to be looked-up; this name is validated for consistency."},{"name":"branch_type","type":"git_branch_t","comment":"Type of the considered branch. This should be valued with either GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE."}],"argline":"git_reference **branch_out,\n\t\tgit_repository *repo,\n\t\tconst char *branch_name,\n\t\tgit_branch_t branch_type","sig":"git_reference **::git_repository *::const char *::git_branch_t","return":{"type":"int","comment":"0 on success; GIT_ENOTFOUND when no matching branch exists, otherwise an error code."},"description":"Lookup a branch by its name in a repository.","comments":"The generated reference must be freed by the user.\n","group":"branch"},"git_branch_tracking":{"type":"function","file":"branch.h","line":152,"lineto":154,"args":[{"name":"tracking_out","type":"git_reference **","comment":"Pointer where to store the retrieved reference."},{"name":"branch","type":"git_reference *","comment":"Current underlying reference of the branch."}],"argline":"git_reference **tracking_out,\n\t\tgit_reference *branch","sig":"git_reference **::git_reference *","return":{"type":"int","comment":"0 on success; GIT_ENOTFOUND when no remote tracking reference exists, otherwise an error code."},"description":"Return the reference supporting the remote tracking branch,\ngiven a local branch reference.","comments":"","group":"branch"},"gitwin_set_codepage":{"type":"function","file":"windows.h","line":41,"lineto":41,"args":[{"name":"codepage","type":"unsigned int","comment":"numeric codepage identifier"}],"argline":"unsigned int codepage","sig":"unsigned int","return":{"type":"void"},"description":"Set the active codepage for Windows syscalls","comments":"All syscalls performed by the library will assume\nthis codepage when converting paths and strings\nto use by the Windows kernel.\n\nThe default value of UTF-8 will work automatically\nwith most Git repositories created on Unix systems.\n\nThis settings needs only be changed when working\nwith repositories that contain paths in specific,\nnon-UTF codepages.\n\nA full list of all available codepage identifiers may\nbe found at:\n\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756(v=vs.85).aspx\n","group":"gitwin"},"gitwin_get_codepage":{"type":"function","file":"windows.h","line":48,"lineto":48,"args":[],"argline":"void","sig":"","return":{"type":"unsigned int","comment":"numeric codepage identifier"},"description":"Return the active codepage for Windows syscalls","comments":"","group":"gitwin"},"gitwin_set_utf8":{"type":"function","file":"windows.h","line":54,"lineto":54,"args":[],"argline":"void","sig":"","return":{"type":"void"},"description":"Set the active Windows codepage to UTF-8 (this is\nthe default value)","comments":"","group":"gitwin"},"git_indexer_stream_new":{"type":"function","file":"indexer.h","line":34,"lineto":34,"args":[{"name":"out","type":"git_indexer_stream **","comment":"where to store the indexer instance"},{"name":"path","type":"const char *","comment":"to the directory where the packfile should be stored"}],"argline":"git_indexer_stream **out, const char *path","sig":"git_indexer_stream **::const char *","return":{"type":"int"},"description":"Create a new streaming indexer instance","comments":"","group":"indexer","examples":{"network/index-pack.c":["ex/HEAD/index-pack.html#git_indexer_stream_new-1"]}},"git_indexer_stream_add":{"type":"function","file":"indexer.h","line":44,"lineto":44,"args":[{"name":"idx","type":"git_indexer_stream *","comment":"the indexer"},{"name":"data","type":"const void *","comment":"the data to add"},{"name":"size","type":"size_t","comment":"the size of the data"},{"name":"stats","type":"git_indexer_stats *","comment":"stat storage"}],"argline":"git_indexer_stream *idx, const void *data, size_t size, git_indexer_stats *stats","sig":"git_indexer_stream *::const void *::size_t::git_indexer_stats *","return":{"type":"int"},"description":"Add data to the indexer","comments":"","group":"indexer","examples":{"network/index-pack.c":["ex/HEAD/index-pack.html#git_indexer_stream_add-2"]}},"git_indexer_stream_finalize":{"type":"function","file":"indexer.h","line":53,"lineto":53,"args":[{"name":"idx","type":"git_indexer_stream *","comment":"the indexer"},{"name":"stats","type":"git_indexer_stats *"}],"argline":"git_indexer_stream *idx, git_indexer_stats *stats","sig":"git_indexer_stream *::git_indexer_stats *","return":{"type":"int"},"description":"Finalize the pack and index","comments":"Resolve any pending deltas and write out the index file\n","group":"indexer","examples":{"network/index-pack.c":["ex/HEAD/index-pack.html#git_indexer_stream_finalize-3"]}},"git_indexer_stream_hash":{"type":"function","file":"indexer.h","line":63,"lineto":63,"args":[{"name":"idx","type":"git_indexer_stream *","comment":"the indexer instance"}],"argline":"git_indexer_stream *idx","sig":"git_indexer_stream *","return":{"type":"const git_oid *"},"description":"Get the packfile's hash","comments":"A packfile's name is derived from the sorted hashing of all object\nnames. This is only correct after the index has been finalized.\n","group":"indexer","examples":{"network/index-pack.c":["ex/HEAD/index-pack.html#git_indexer_stream_hash-4"]}},"git_indexer_stream_free":{"type":"function","file":"indexer.h","line":70,"lineto":70,"args":[{"name":"idx","type":"git_indexer_stream *","comment":"the indexer to free"}],"argline":"git_indexer_stream *idx","sig":"git_indexer_stream *","return":{"type":"void"},"description":"Free the indexer and its resources","comments":"","group":"indexer","examples":{"network/index-pack.c":["ex/HEAD/index-pack.html#git_indexer_stream_free-5"]}},"git_indexer_new":{"type":"function","file":"indexer.h","line":78,"lineto":78,"args":[{"name":"out","type":"git_indexer **","comment":"where to store the indexer instance"},{"name":"packname","type":"const char *","comment":"the absolute filename of the packfile to index"}],"argline":"git_indexer **out, const char *packname","sig":"git_indexer **::const char *","return":{"type":"int"},"description":"Create a new indexer instance","comments":"","group":"indexer"},"git_indexer_run":{"type":"function","file":"indexer.h","line":90,"lineto":90,"args":[{"name":"idx","type":"git_indexer *","comment":"the indexer instance"},{"name":"stats","type":"git_indexer_stats *","comment":"storage for the running state"}],"argline":"git_indexer *idx, git_indexer_stats *stats","sig":"git_indexer *::git_indexer_stats *","return":{"type":"int"},"description":"Iterate over the objects in the packfile and extract the information","comments":"Indexing a packfile can be very expensive so this function is\nexpected to be run in a worker thread and the stats used to provide\nfeedback the user.\n","group":"indexer"},"git_indexer_write":{"type":"function","file":"indexer.h","line":100,"lineto":100,"args":[{"name":"idx","type":"git_indexer *","comment":"the indexer instance"}],"argline":"git_indexer *idx","sig":"git_indexer *","return":{"type":"int"},"description":"Write the index file to disk.","comments":"The file will be stored as pack-$hash.idx in the same directory as\nthe packfile.\n","group":"indexer"},"git_indexer_hash":{"type":"function","file":"indexer.h","line":110,"lineto":110,"args":[{"name":"idx","type":"git_indexer *","comment":"the indexer instance"}],"argline":"git_indexer *idx","sig":"git_indexer *","return":{"type":"const git_oid *"},"description":"Get the packfile's hash","comments":"A packfile's name is derived from the sorted hashing of all object\nnames. This is only correct after the index has been written to disk.\n","group":"indexer"},"git_indexer_free":{"type":"function","file":"indexer.h","line":117,"lineto":121,"args":[{"name":"idx","type":"git_indexer *","comment":"the indexer to free"}],"argline":"git_indexer *idx","sig":"git_indexer *","return":{"type":"void"},"description":"Free the indexer and its resources","comments":"","group":"indexer"},"git_libgit2_version":{"type":"function","file":"common.h","line":104,"lineto":104,"args":[{"name":"major","type":"int *","comment":"Store the major version number"},{"name":"minor","type":"int *","comment":"Store the minor version number"},{"name":"rev","type":"int *","comment":"Store the revision (patch) number"}],"argline":"int *major, int *minor, int *rev","sig":"int *::int *::int *","return":{"type":"void"},"description":"Return the version of the libgit2 library\nbeing currently used.","comments":"","group":"libgit2"},"git_libgit2_capabilities":{"type":"function","file":"common.h","line":127,"lineto":127,"args":[],"argline":"void","sig":"","return":{"type":"int","comment":"A combination of GIT_CAP_* values. - GIT_CAP_THREADS Libgit2 was compiled with thread support. Note that thread support is still to be seen as a 'work in progress'. - GIT_CAP_HTTPS Libgit2 supports the https:// protocol. This requires the open ssl library to be found when compiling libgit2."},"description":"Query compile time options for libgit2.","comments":"","group":"libgit2"},"git_refspec_parse":{"type":"function","file":"refspec.h","line":28,"lineto":28,"args":[{"name":"refspec","type":"git_refspec *","comment":"pointer to the refspec structure to be used"},{"name":"str","type":"const char *","comment":"the refspec as a string"}],"argline":"git_refspec *refspec, const char *str","sig":"git_refspec *::const char *","return":{"type":"int"},"description":"Parse a refspec string and create a refspec object","comments":"","group":"refspec"},"git_refspec_src":{"type":"function","file":"refspec.h","line":36,"lineto":36,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"const char *","comment":"the refspec's source specifier"},"description":"Get the source specifier","comments":"","group":"refspec"},"git_refspec_dst":{"type":"function","file":"refspec.h","line":44,"lineto":44,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"const char *","comment":"the refspec's destination specifier"},"description":"Get the destination specifier","comments":"","group":"refspec"},"git_refspec_force":{"type":"function","file":"refspec.h","line":52,"lineto":52,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"int","comment":"1 if force update has been set, 0 otherwise"},"description":"Get the force update setting","comments":"","group":"refspec"},"git_refspec_src_matches":{"type":"function","file":"refspec.h","line":61,"lineto":61,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"},{"name":"refname","type":"const char *","comment":"the name of the reference to check"}],"argline":"const git_refspec *refspec, const char *refname","sig":"const git_refspec *::const char *","return":{"type":"int","comment":"1 if the refspec matches, 0 otherwise"},"description":"Check if a refspec's source descriptor matches a reference","comments":"","group":"refspec"},"git_refspec_transform":{"type":"function","file":"refspec.h","line":72,"lineto":76,"args":[{"name":"out","type":"char *","comment":"where to store the target name"},{"name":"outlen","type":"size_t","comment":"the size ouf the `out` buffer"},{"name":"spec","type":"const git_refspec *","comment":"the refspec"},{"name":"name","type":"const char *","comment":"the name of the reference to transform"}],"argline":"char *out, size_t outlen, const git_refspec *spec, const char *name","sig":"char *::size_t::const git_refspec *::const char *","return":{"type":"int","comment":"0, GIT_EBUFS or another error"},"description":"Transform a reference to its target following the refspec's rules","comments":"","group":"refspec"},"git_signature_new":{"type":"function","file":"signature.h","line":36,"lineto":36,"args":[{"name":"sig_out","type":"git_signature **","comment":"new signature, in case of error NULL"},{"name":"name","type":"const char *","comment":"name of the person"},{"name":"email","type":"const char *","comment":"email of the person"},{"name":"time","type":"git_time_t","comment":"time when the action happened"},{"name":"offset","type":"int","comment":"timezone offset in minutes for the time"}],"argline":"git_signature **sig_out, const char *name, const char *email, git_time_t time, int offset","sig":"git_signature **::const char *::const char *::git_time_t::int","return":{"type":"int","comment":"0 or an error code"},"description":"Create a new action signature. The signature must be freed\nmanually or using git_signature_free","comments":"Note: angle brackets ('<' and '>') characters are not allowed\nto be used in either the `name` or the `email` parameter.\n","group":"signature","examples":{"general.c":["ex/HEAD/general.html#git_signature_new-1","ex/HEAD/general.html#git_signature_new-2"]}},"git_signature_now":{"type":"function","file":"signature.h","line":47,"lineto":47,"args":[{"name":"sig_out","type":"git_signature **","comment":"new signature, in case of error NULL"},{"name":"name","type":"const char *","comment":"name of the person"},{"name":"email","type":"const char *","comment":"email of the person"}],"argline":"git_signature **sig_out, const char *name, const char *email","sig":"git_signature **::const char *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Create a new action signature with a timestamp of 'now'. The\nsignature must be freed manually or using git_signature_free","comments":"","group":"signature"},"git_signature_dup":{"type":"function","file":"signature.h","line":57,"lineto":57,"args":[{"name":"sig","type":"const git_signature *","comment":"signature to duplicated"}],"argline":"const git_signature *sig","sig":"const git_signature *","return":{"type":"git_signature *","comment":"a copy of sig, NULL on out of memory"},"description":"Create a copy of an existing signature.","comments":"All internal strings are also duplicated.","group":"signature"},"git_signature_free":{"type":"function","file":"signature.h","line":64,"lineto":64,"args":[{"name":"sig","type":"git_signature *","comment":"signature to free"}],"argline":"git_signature *sig","sig":"git_signature *","return":{"type":"void"},"description":"Free an existing signature","comments":"","group":"signature"},"git_status_foreach":{"type":"function","file":"status.h","line":47,"lineto":50,"args":[{"name":"repo","type":"git_repository *","comment":"a repository object"},{"name":"callback","type":"int (*)(const char *, unsigned int, void *)","comment":"the function to call on each file"},{"name":"payload","type":"void *"}],"argline":"git_repository *repo,\n\tint (*callback)(const char *, unsigned int, void *),\n\tvoid *payload","sig":"git_repository *::int (*)(const char *, unsigned int, void *)::void *","return":{"type":"int","comment":"0 on success or the return value of the callback that was non-zero"},"description":"Gather file statuses and run a callback for each one.","comments":"The callback is passed the path of the file, the status and the data\npointer passed to this function. If the callback returns something other\nthan 0, this function will return that value.\n","group":"status"},"git_status_foreach_ext":{"type":"function","file":"status.h","line":125,"lineto":129,"args":[{"name":"repo","type":"git_repository *"},{"name":"opts","type":"const git_status_options *"},{"name":"callback","type":"int (*)(const char *, unsigned int, void *)"},{"name":"payload","type":"void *"}],"argline":"git_repository *repo,\n\tconst git_status_options *opts,\n\tint (*callback)(const char *, unsigned int, void *),\n\tvoid *payload","sig":"git_repository *::const git_status_options *::int (*)(const char *, unsigned int, void *)::void *","return":{"type":"int"},"description":"Gather file status information and run callbacks as requested.","comments":"","group":"status"},"git_status_file":{"type":"function","file":"status.h","line":141,"lineto":144,"args":[{"name":"status_flags","type":"unsigned int *","comment":"the status value"},{"name":"repo","type":"git_repository *","comment":"a repository object"},{"name":"path","type":"const char *","comment":"the file to retrieve status for, rooted at the repo's workdir"}],"argline":"unsigned int *status_flags,\n\tgit_repository *repo,\n\tconst char *path","sig":"unsigned int *::git_repository *::const char *","return":{"type":"int","comment":"GIT_EINVALIDPATH when `path` points at a folder, GIT_ENOTFOUND when the file doesn't exist in any of HEAD, the index or the worktree, 0 otherwise"},"description":"Get file status for a single file","comments":"","group":"status"},"git_status_should_ignore":{"type":"function","file":"status.h","line":160,"lineto":163,"args":[{"name":"ignored","type":"int *","comment":"boolean returning 0 if the file is not ignored, 1 if it is"},{"name":"repo","type":"git_repository *","comment":"a repository object"},{"name":"path","type":"const char *","comment":"the file to check ignores for, rooted at the repo's workdir."}],"argline":"int *ignored,\n\tgit_repository *repo,\n\tconst char *path","sig":"int *::git_repository *::const char *","return":{"type":"int","comment":"0 if ignore rules could be processed for the file (regardless of whether it exists or not), or an error < 0 if they could not."},"description":"Test if the ignore rules apply to a given file.","comments":"This function simply checks the ignore rules to see if they would apply\nto the given file.  Unlike git_status_file(), this indicates if the file\nwould be ignored regardless of whether the file is already in the index\nor in the repository.\n","group":"status"},"git_note_read":{"type":"function","file":"notes.h","line":33,"lineto":34,"args":[{"name":"note","type":"git_note **","comment":"the note; NULL in case of error"},{"name":"repo","type":"git_repository *","comment":"the Git repository"},{"name":"notes_ref","type":"const char *","comment":"OID reference to use (optional); defaults to \"refs/notes/commits\""},{"name":"oid","type":"const git_oid *","comment":"OID of the object"}],"argline":"git_note **note, git_repository *repo,\n\t\t\t      const char *notes_ref, const git_oid *oid","sig":"git_note **::git_repository *::const char *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Read the note for an object","comments":"The note must be freed manually by the user.\n","group":"note"},"git_note_message":{"type":"function","file":"notes.h","line":42,"lineto":42,"args":[{"name":"note","type":"git_note *","comment":""}],"argline":"git_note *note","sig":"git_note *","return":{"type":"const char *","comment":"the note message"},"description":"Get the note message","comments":"","group":"note"},"git_note_oid":{"type":"function","file":"notes.h","line":51,"lineto":51,"args":[{"name":"note","type":"git_note *","comment":""}],"argline":"git_note *note","sig":"git_note *","return":{"type":"const git_oid *","comment":"the note object OID"},"description":"Get the note object OID","comments":"","group":"note"},"git_note_create":{"type":"function","file":"notes.h","line":67,"lineto":70,"args":[{"name":"out","type":"git_oid *"},{"name":"repo","type":"git_repository *","comment":"the Git repository"},{"name":"author","type":"git_signature *","comment":"signature of the notes commit author"},{"name":"committer","type":"git_signature *","comment":"signature of the notes commit committer"},{"name":"notes_ref","type":"const char *","comment":"OID reference to update (optional); defaults to \"refs/notes/commits\""},{"name":"oid","type":"const git_oid *","comment":"pointer to store the OID (optional); NULL in case of error"},{"name":"note","type":"const char *","comment":"s_ref OID reference to update (optional); defaults to \"refs/notes/commits\""}],"argline":"git_oid *out, git_repository *repo,\n\t\t\t\tgit_signature *author, git_signature *committer,\n\t\t\t\tconst char *notes_ref, const git_oid *oid,\n\t\t\t\t const char *note","sig":"git_oid *::git_repository *::git_signature *::git_signature *::const char *::const git_oid *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Add a note for an object","comments":"","group":"note"},"git_note_remove":{"type":"function","file":"notes.h","line":84,"lineto":86,"args":[{"name":"repo","type":"git_repository *","comment":"the Git repository"},{"name":"notes_ref","type":"const char *","comment":"OID reference to use (optional); defaults to \"refs/notes/commits\""},{"name":"author","type":"git_signature *","comment":"signature of the notes commit author"},{"name":"committer","type":"git_signature *","comment":"signature of the notes commit committer"},{"name":"oid","type":"const git_oid *","comment":"the oid which note's to be removed"}],"argline":"git_repository *repo, const char *notes_ref,\n\t\t\t\tgit_signature *author, git_signature *committer,\n\t\t\t\tconst git_oid *oid","sig":"git_repository *::const char *::git_signature *::git_signature *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Remove the note for an object","comments":"","group":"note"},"git_note_free":{"type":"function","file":"notes.h","line":93,"lineto":93,"args":[{"name":"note","type":"git_note *","comment":"git_note object"}],"argline":"git_note *note","sig":"git_note *","return":{"type":"void"},"description":"Free a git_note object","comments":"","group":"note"},"git_note_default_ref":{"type":"function","file":"notes.h","line":103,"lineto":103,"args":[{"name":"out","type":"const char **","comment":"Pointer to the default notes reference"},{"name":"repo","type":"git_repository *","comment":"The Git repository"}],"argline":"const char **out, git_repository *repo","sig":"const char **::git_repository *","return":{"type":"int","comment":"0 or an error code"},"description":"Get the default notes reference for a repository","comments":"","group":"note"},"git_note_foreach":{"type":"function","file":"notes.h","line":130,"lineto":135,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the notes."},{"name":"notes_ref","type":"const char *","comment":"OID reference to read from (optional); defaults to \"refs/notes/commits\"."},{"name":"note_cb","type":"int (*)(git_note_data *note_data, void *payload)","comment":"Callback to invoke per found annotation."},{"name":"payload","type":"void *","comment":"Extra parameter to callback function."}],"argline":"git_repository *repo,\n\t\tconst char *notes_ref,\n\t\tint (*note_cb)(git_note_data *note_data, void *payload),\n\t\tvoid *payload","sig":"git_repository *::const char *::int (*)(git_note_data *note_data, void *payload)::void *","return":{"type":"int","comment":"0 or an error code."},"description":"Loop over all the notes within a specified namespace\nand issue a callback for each one.","comments":"","group":"note"},"git_config_find_global":{"type":"function","file":"config.h","line":68,"lineto":68,"args":[{"name":"global_config_path","type":"char *","comment":"Buffer of GIT_PATH_MAX length to store the path"},{"name":"length","type":"size_t"}],"argline":"char *global_config_path, size_t length","sig":"char *::size_t","return":{"type":"int","comment":"0 if a global configuration file has been found. Its path will be stored in `buffer`."},"description":"Locate the path to the global configuration file","comments":"The user or global configuration file is usually\nlocated in `$HOME/.gitconfig`.\n\nThis method will try to guess the full path to that\nfile, if the file exists. The returned path\nmay be used on any `git_config` call to load the\nglobal configuration file.\n","group":"config"},"git_config_find_system":{"type":"function","file":"config.h","line":80,"lineto":80,"args":[{"name":"system_config_path","type":"char *","comment":"Buffer of GIT_PATH_MAX length to store the path"},{"name":"length","type":"size_t"}],"argline":"char *system_config_path, size_t length","sig":"char *::size_t","return":{"type":"int","comment":"0 if a system configuration file has been found. Its path will be stored in `buffer`."},"description":"Locate the path to the system configuration file","comments":"If /etc/gitconfig doesn't exist, it will look for\n%PROGRAMFILES%\\Git\\etc\\gitconfig.\n","group":"config"},"git_config_open_global":{"type":"function","file":"config.h","line":91,"lineto":91,"args":[{"name":"out","type":"git_config **","comment":"Pointer to store the config instance"}],"argline":"git_config **out","sig":"git_config **","return":{"type":"int","comment":"0 or an error code"},"description":"Open the global configuration file","comments":"Utility wrapper that calls `git_config_find_global`\nand opens the located file, if it exists.\n","group":"config"},"git_config_file__ondisk":{"type":"function","file":"config.h","line":104,"lineto":104,"args":[{"name":"out","type":"struct git_config_file **","comment":"the new backend"},{"name":"path","type":"const char *","comment":"where the config file is located"}],"argline":"struct git_config_file **out, const char *path","sig":"struct git_config_file **::const char *","return":{"type":"int"},"description":"Create a configuration file backend for ondisk files","comments":"These are the normal `.gitconfig` files that Core Git\nprocesses. Note that you first have to add this file to a\nconfiguration object before you can query it for configuration\nvariables.\n","group":"config"},"git_config_new":{"type":"function","file":"config.h","line":115,"lineto":115,"args":[{"name":"out","type":"git_config **","comment":"pointer to the new configuration"}],"argline":"git_config **out","sig":"git_config **","return":{"type":"int","comment":"0 or an error code"},"description":"Allocate a new configuration object","comments":"This object is empty, so you have to add a file to it before you\ncan do anything with it.\n","group":"config"},"git_config_add_file":{"type":"function","file":"config.h","line":132,"lineto":132,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration to add the file to"},{"name":"file","type":"git_config_file *","comment":"the configuration file (backend) to add"},{"name":"priority","type":"int","comment":"the priority the backend should have"}],"argline":"git_config *cfg, git_config_file *file, int priority","sig":"git_config *::git_config_file *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Add a generic config file instance to an existing config","comments":"Note that the configuration object will free the file\nautomatically.\n\nFurther queries on this config object will access each\nof the config file instances in order (instances with\na higher priority will be accessed first).\n","group":"config"},"git_config_add_file_ondisk":{"type":"function","file":"config.h","line":153,"lineto":153,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration to add the file to"},{"name":"path","type":"const char *","comment":"path to the configuration file (backend) to add"},{"name":"priority","type":"int","comment":"the priority the backend should have"}],"argline":"git_config *cfg, const char *path, int priority","sig":"git_config *::const char *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Add an on-disk config file instance to an existing config","comments":"The on-disk file pointed at by `path` will be opened and\nparsed; it's expected to be a native Git config file following\nthe default Git config syntax (see man git-config).\n\nNote that the configuration object will free the file\nautomatically.\n\nFurther queries on this config object will access each\nof the config file instances in order (instances with\na higher priority will be accessed first).\n","group":"config"},"git_config_open_ondisk":{"type":"function","file":"config.h","line":168,"lineto":168,"args":[{"name":"cfg","type":"git_config **","comment":"The configuration instance to create"},{"name":"path","type":"const char *","comment":"Path to the on-disk file to open"}],"argline":"git_config **cfg, const char *path","sig":"git_config **::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Create a new config instance containing a single on-disk file","comments":"This method is a simple utility wrapper for the following sequence\nof calls:\n- git_config_new\n- git_config_add_file_ondisk\n","group":"config","examples":{"general.c":["ex/HEAD/general.html#git_config_open_ondisk-3"]}},"git_config_free":{"type":"function","file":"config.h","line":175,"lineto":175,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration to free"}],"argline":"git_config *cfg","sig":"git_config *","return":{"type":"void"},"description":"Free the configuration and its associated memory and files","comments":"","group":"config"},"git_config_get_int32":{"type":"function","file":"config.h","line":185,"lineto":185,"args":[{"name":"out","type":"int32_t *","comment":"pointer to the variable where the value should be stored"},{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"int32_t *out, git_config *cfg, const char *name","sig":"int32_t *::git_config *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Get the value of an integer config variable.","comments":"","group":"config","examples":{"general.c":["ex/HEAD/general.html#git_config_get_int32-4"]}},"git_config_get_int64":{"type":"function","file":"config.h","line":195,"lineto":195,"args":[{"name":"out","type":"int64_t *","comment":"pointer to the variable where the value should be stored"},{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"int64_t *out, git_config *cfg, const char *name","sig":"int64_t *::git_config *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Get the value of a long integer config variable.","comments":"","group":"config"},"git_config_get_bool":{"type":"function","file":"config.h","line":208,"lineto":208,"args":[{"name":"out","type":"int *","comment":"pointer to the variable where the value should be stored"},{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"int *out, git_config *cfg, const char *name","sig":"int *::git_config *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Get the value of a boolean config variable.","comments":"This function uses the usual C convention of 0 being false and\nanything else true.\n","group":"config"},"git_config_get_string":{"type":"function","file":"config.h","line":221,"lineto":221,"args":[{"name":"out","type":"const char **","comment":"pointer to the variable's value"},{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"const char **out, git_config *cfg, const char *name","sig":"const char **::git_config *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Get the value of a string config variable.","comments":"The string is owned by the variable and should not be freed by the\nuser.\n","group":"config","examples":{"general.c":["ex/HEAD/general.html#git_config_get_string-5"]}},"git_config_get_multivar":{"type":"function","file":"config.h","line":235,"lineto":235,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"regexp","type":"const char *","comment":"regular expression to filter which variables we're interested in. Use NULL to indicate all"},{"name":"fn","type":"int (*)(const char *, void *)","comment":"the function to be called on each value of the variable"},{"name":"data","type":"void *","comment":"opaque pointer to pass to the callback"}],"argline":"git_config *cfg, const char *name, const char *regexp, int (*fn)(const char *, void *), void *data","sig":"git_config *::const char *::const char *::int (*)(const char *, void *)::void *","return":{"type":"int"},"description":"Get each value of a multivar.","comments":"The callback will be called on each variable found\n","group":"config"},"git_config_set_int32":{"type":"function","file":"config.h","line":245,"lineto":245,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"int32_t","comment":"Integer value for the variable"}],"argline":"git_config *cfg, const char *name, int32_t value","sig":"git_config *::const char *::int32_t","return":{"type":"int","comment":"0 or an error code"},"description":"Set the value of an integer config variable.","comments":"","group":"config"},"git_config_set_int64":{"type":"function","file":"config.h","line":255,"lineto":255,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"int64_t","comment":"Long integer value for the variable"}],"argline":"git_config *cfg, const char *name, int64_t value","sig":"git_config *::const char *::int64_t","return":{"type":"int","comment":"0 or an error code"},"description":"Set the value of a long integer config variable.","comments":"","group":"config"},"git_config_set_bool":{"type":"function","file":"config.h","line":265,"lineto":265,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"int","comment":"the value to store"}],"argline":"git_config *cfg, const char *name, int value","sig":"git_config *::const char *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Set the value of a boolean config variable.","comments":"","group":"config"},"git_config_set_string":{"type":"function","file":"config.h","line":278,"lineto":278,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"const char *","comment":"the string to store."}],"argline":"git_config *cfg, const char *name, const char *value","sig":"git_config *::const char *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Set the value of a string config variable.","comments":"A copy of the string is made and the user is free to use it\nafterwards.\n","group":"config"},"git_config_set_multivar":{"type":"function","file":"config.h","line":289,"lineto":289,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"regexp","type":"const char *","comment":"a regular expression to indicate which values to replace"},{"name":"value","type":"const char *","comment":"the new value."}],"argline":"git_config *cfg, const char *name, const char *regexp, const char *value","sig":"git_config *::const char *::const char *::const char *","return":{"type":"int"},"description":"Set a multivar","comments":"","group":"config"},"git_config_delete":{"type":"function","file":"config.h","line":297,"lineto":297,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration"},{"name":"name","type":"const char *","comment":"the variable to delete"}],"argline":"git_config *cfg, const char *name","sig":"git_config *::const char *","return":{"type":"int"},"description":"Delete a config variable","comments":"","group":"config"},"git_config_foreach":{"type":"function","file":"config.h","line":312,"lineto":315,"args":[{"name":"cfg","type":"git_config *","comment":"where to get the variables from"},{"name":"callback","type":"int (*)(const char *var_name, const char *value, void *payload)","comment":"the function to call on each variable"},{"name":"payload","type":"void *","comment":"the data to pass to the callback"}],"argline":"git_config *cfg,\n\tint (*callback)(const char *var_name, const char *value, void *payload),\n\tvoid *payload","sig":"git_config *::int (*)(const char *var_name, const char *value, void *payload)::void *","return":{"type":"int","comment":"0 or the return value of the callback which didn't return 0"},"description":"Perform an operation on each config variable.","comments":"The callback receives the normalized name and value of each variable\nin the config backend, and the data pointer passed to this function.\nAs soon as one of the callback functions returns something other than 0,\nthis function returns that value.\n","group":"config"},"git_config_foreach_match":{"type":"function","file":"config.h","line":330,"lineto":334,"args":[{"name":"cfg","type":"git_config *","comment":"where to get the variables from"},{"name":"regexp","type":"const char *","comment":"regular expression to match against config names"},{"name":"callback","type":"int (*)(const char *var_name, const char *value, void *payload)","comment":"the function to call on each variable"},{"name":"payload","type":"void *","comment":"the data to pass to the callback"}],"argline":"git_config *cfg,\n\tconst char *regexp,\n\tint (*callback)(const char *var_name, const char *value, void *payload),\n\tvoid *payload","sig":"git_config *::const char *::int (*)(const char *var_name, const char *value, void *payload)::void *","return":{"type":"int","comment":"0 or the return value of the callback which didn't return 0"},"description":"Perform an operation on each config variable matching a regular expression.","comments":"This behaviors like `git_config_foreach` with an additional filter of a\nregular expression that filters which config keys are passed to the\ncallback.\n","group":"config"},"git_config_get_mapped":{"type":"function","file":"config.h","line":370,"lineto":370,"args":[{"name":"out","type":"int *","comment":"place to store the result of the mapping"},{"name":"cfg","type":"git_config *","comment":"config file to get the variables from"},{"name":"name","type":"const char *","comment":"name of the config variable to lookup"},{"name":"maps","type":"git_cvar_map *","comment":"array of `git_cvar_map` objects specifying the possible mappings"},{"name":"map_n","type":"size_t","comment":"number of mapping objects in `maps`"}],"argline":"int *out, git_config *cfg, const char *name, git_cvar_map *maps, size_t map_n","sig":"int *::git_config *::const char *::git_cvar_map *::size_t","return":{"type":"int","comment":"0 on success, error code otherwise"},"description":"Query the value of a config variable and return it mapped to\nan integer constant.","comments":"This is a helper method to easily map different possible values\nto a variable to integer constants that easily identify them.\n\nA mapping array looks as follows:\n\ngit_cvar_map autocrlf_mapping[3] = {\n\t{GIT_CVAR_FALSE, NULL, GIT_AUTO_CRLF_FALSE},\n\t{GIT_CVAR_TRUE, NULL, GIT_AUTO_CRLF_TRUE},\n\t{GIT_CVAR_STRING, \"input\", GIT_AUTO_CRLF_INPUT},\n\t{GIT_CVAR_STRING, \"default\", GIT_AUTO_CRLF_DEFAULT}};\n\nOn any \"false\" value for the variable (e.g. \"false\", \"FALSE\", \"no\"), the\nmapping will store `GIT_AUTO_CRLF_FALSE` in the `out` parameter.\n\nThe same thing applies for any \"true\" value such as \"true\", \"yes\" or \"1\", storing\nthe `GIT_AUTO_CRLF_TRUE` variable.\n\nOtherwise, if the value matches the string \"input\" (with case insensitive comparison),\nthe given constant will be stored in `out`, and likewise for \"default\".\n\nIf not a single match can be made to store in `out`, an error code will be\nreturned.\n","group":"config"},"git_reset":{"type":"function","file":"reset.h","line":40,"lineto":40,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to perform the reset operation."},{"name":"target","type":"const git_object *","comment":"Object to which the Head should be moved to. This object must belong to the given `repo` and can either be a git_commit or a git_tag. When a git_tag is being passed, it should be dereferencable to a git_commit which oid will be used as the target of the branch."},{"name":"reset_type","type":"git_reset_type","comment":"Kind of reset operation to perform."}],"argline":"git_repository *repo, const git_object *target, git_reset_type reset_type","sig":"git_repository *::const git_object *::git_reset_type","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Sets the current head to the specified commit oid and optionally\nresets the index and working tree to match.","comments":"When specifying a Soft kind of reset, the head will be moved to the commit.\n\nSpecifying a Mixed kind of reset will trigger a Soft reset and the index will\nbe replaced with the content of the commit tree.\n\nTODO: Implement remaining kinds of resets.\n","group":"reset"},"git_blob_lookup":{"type":"function","file":"blob.h","line":32,"lineto":35,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the looked up blob"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the blob."},{"name":"id","type":"const git_oid *","comment":"identity of the blob to locate."}],"argline":"git_blob **blob, git_repository *repo, const git_oid *id","sig":"git_blob **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a blob object from a repository.","comments":"","group":"blob","examples":{"general.c":["ex/HEAD/general.html#git_blob_lookup-6"]}},"git_blob_lookup_prefix":{"type":"function","file":"blob.h","line":49,"lineto":52,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the looked up blob"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the blob."},{"name":"id","type":"const git_oid *","comment":"identity of the blob to locate."},{"name":"len","type":"size_t","comment":"the length of the short identifier"}],"argline":"git_blob **blob, git_repository *repo, const git_oid *id, size_t len","sig":"git_blob **::git_repository *::const git_oid *::size_t","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a blob object from a repository,\ngiven a prefix of its identifier (short id).","comments":"@see git_object_lookup_prefix\n","group":"blob"},"git_blob_free":{"type":"function","file":"blob.h","line":65,"lineto":68,"args":[{"name":"blob","type":"git_blob *","comment":"the blob to close"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"void"},"description":"Close an open blob","comments":"This is a wrapper around git_object_free()\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop\nusing a blob. Failure to do so will cause a memory leak.\n","group":"blob"},"git_blob_rawcontent":{"type":"function","file":"blob.h","line":83,"lineto":83,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"const void *","comment":"the pointer; NULL if the blob has no contents"},"description":"Get a read-only buffer with the raw content of a blob.","comments":"A pointer to the raw content of a blob is returned;\nthis pointer is owned internally by the object and shall\nnot be free'd. The pointer may be invalidated at a later\ntime.\n","group":"blob","examples":{"general.c":["ex/HEAD/general.html#git_blob_rawcontent-7"]}},"git_blob_rawsize":{"type":"function","file":"blob.h","line":91,"lineto":91,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"size_t","comment":"size on bytes"},"description":"Get the size in bytes of the contents of a blob","comments":"","group":"blob","examples":{"general.c":["ex/HEAD/general.html#git_blob_rawsize-8","ex/HEAD/general.html#git_blob_rawsize-9"]}},"git_blob_create_fromfile":{"type":"function","file":"blob.h","line":104,"lineto":104,"args":[{"name":"oid","type":"git_oid *","comment":"return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written. this repository cannot be bare"},{"name":"path","type":"const char *","comment":"file from which the blob will be created, relative to the repository's working dir"}],"argline":"git_oid *oid, git_repository *repo, const char *path","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Read a file from the working folder of a repository\nand write it to the Object Database as a loose blob","comments":"","group":"blob"},"git_blob_create_fromdisk":{"type":"function","file":"blob.h","line":116,"lineto":116,"args":[{"name":"oid","type":"git_oid *","comment":"return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written. this repository can be bare or not"},{"name":"path","type":"const char *","comment":"file from which the blob will be created"}],"argline":"git_oid *oid, git_repository *repo, const char *path","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Read a file from the filesystem and write its content\nto the Object Database as a loose blob","comments":"","group":"blob"},"git_blob_create_fromchunks":{"type":"function","file":"blob.h","line":154,"lineto":159,"args":[{"name":"oid","type":"git_oid *","comment":"Return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written. This repository can be bare or not."},{"name":"hintpath","type":"const char *","comment":"if not NULL, will help selecting the filters to apply onto the content of the blob to be created."},{"name":"source_cb","type":"int (*)(char *content, size_t max_length, void *payload)"},{"name":"payload","type":"void *"}],"argline":"git_oid *oid,\n\tgit_repository *repo,\n\tconst char *hintpath,\n\tint (*source_cb)(char *content, size_t max_length, void *payload),\n\tvoid *payload","sig":"git_oid *::git_repository *::const char *::int (*)(char *content, size_t max_length, void *payload)::void *","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Write a loose blob to the Object Database from a\nprovider of chunks of data.","comments":"Provided the `hintpath` parameter is filled, its value\nwill help to determine what git filters should be applied\nto the object before it can be placed to the object database.\n\n\nThe implementation of the callback has to respect the\nfollowing rules:\n\n - `content` will have to be filled by the consumer. The maximum number\nof bytes that the buffer can accept per call is defined by the\n`max_length` parameter. Allocation and freeing of the buffer will be taken\ncare of by the function.\n\n - The callback is expected to return the number of bytes\nthat `content` have been filled with.\n\n - When there is no more data to stream, the callback should\nreturn 0. This will prevent it from being invoked anymore.\n\n - When an error occurs, the callback should return -1.\n\n","group":"blob"},"git_blob_create_frombuffer":{"type":"function","file":"blob.h","line":170,"lineto":170,"args":[{"name":"oid","type":"git_oid *","comment":"return the oid of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where to blob will be written"},{"name":"buffer","type":"const void *","comment":"data to be written into the blob"},{"name":"len","type":"size_t","comment":"length of the data"}],"argline":"git_oid *oid, git_repository *repo, const void *buffer, size_t len","sig":"git_oid *::git_repository *::const void *::size_t","return":{"type":"int","comment":"0 or an error code"},"description":"Write an in-memory buffer to the ODB as a blob","comments":"","group":"blob"},"git_index_open":{"type":"function","file":"index.h","line":119,"lineto":119,"args":[{"name":"index","type":"git_index **","comment":"the pointer for the new index"},{"name":"index_path","type":"const char *","comment":"the path to the index file in disk"}],"argline":"git_index **index, const char *index_path","sig":"git_index **::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Create a new bare Git index object as a memory representation\nof the Git index file in 'index_path', without a repository\nto back it.","comments":"Since there is no ODB or working directory behind this index,\nany Index methods which rely on these (e.g. index_add) will\nfail with the GIT_EBAREINDEX error code.\n\nIf you need to access the index of an actual repository,\nuse the `git_repository_index` wrapper.\n\nThe index must be freed once it's no longer in use.\n","group":"index"},"git_index_clear":{"type":"function","file":"index.h","line":128,"lineto":128,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void"},"description":"Clear the contents (all the entries) of an index object.\nThis clears the index object in memory; changes must be manually\nwritten to disk for them to take effect.","comments":"","group":"index"},"git_index_free":{"type":"function","file":"index.h","line":135,"lineto":135,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void"},"description":"Free an existing index object.","comments":"","group":"index","examples":{"showindex.c":["ex/HEAD/showindex.html#git_index_free-1"],"general.c":["ex/HEAD/general.html#git_index_free-10"]}},"git_index_caps":{"type":"function","file":"index.h","line":143,"lineto":143,"args":[{"name":"index","type":"const git_index *","comment":"An existing index object"}],"argline":"const git_index *index","sig":"const git_index *","return":{"type":"unsigned int","comment":"A combination of GIT_INDEXCAP values"},"description":"Read index capabilities flags.","comments":"","group":"index"},"git_index_set_caps":{"type":"function","file":"index.h","line":156,"lineto":156,"args":[{"name":"index","type":"git_index *","comment":"An existing index object"},{"name":"caps","type":"unsigned int","comment":"A combination of GIT_INDEXCAP values"}],"argline":"git_index *index, unsigned int caps","sig":"git_index *::unsigned int","return":{"type":"int","comment":"0 on success, -1 on failure"},"description":"Set index capabilities flags.","comments":"If you pass `GIT_INDEXCAP_FROM_OWNER` for the caps, then the\ncapabilities will be read from the config of the owner object,\nlooking at `core.ignorecase`, `core.filemode`, `core.symlinks`.\n","group":"index"},"git_index_read":{"type":"function","file":"index.h","line":165,"lineto":165,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":"0 or an error code"},"description":"Update the contents of an existing index object in memory\nby reading from the hard disk.","comments":"","group":"index","examples":{"showindex.c":["ex/HEAD/showindex.html#git_index_read-2"]}},"git_index_write":{"type":"function","file":"index.h","line":174,"lineto":174,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":"0 or an error code"},"description":"Write an existing index object from memory back to disk\nusing an atomic file lock.","comments":"","group":"index"},"git_index_find":{"type":"function","file":"index.h","line":184,"lineto":184,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"int","comment":"an index >= 0 if found, -1 otherwise"},"description":"Find the first index of any entries which point to given\npath in the Git index.","comments":"","group":"index"},"git_index_uniq":{"type":"function","file":"index.h","line":191,"lineto":191,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void"},"description":"Remove all entries with equal path except last added","comments":"","group":"index"},"git_index_add":{"type":"function","file":"index.h","line":210,"lineto":210,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"filename to add"},{"name":"stage","type":"int","comment":"stage for the entry"}],"argline":"git_index *index, const char *path, int stage","sig":"git_index *::const char *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Add or update an index entry from a file in disk","comments":"The file `path` must be relative to the repository's\nworking folder and must be readable.\n\nThis method will fail in bare index instances.\n\nThis forces the file to be added to the index, not looking\nat gitignore rules.  Those rules can be evaluated through\nthe git_status APIs (in status.h) before calling this.\n","group":"index"},"git_index_add2":{"type":"function","file":"index.h","line":222,"lineto":222,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"source_entry","type":"const git_index_entry *","comment":"new entry object"}],"argline":"git_index *index, const git_index_entry *source_entry","sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":"0 or an error code"},"description":"Add or update an index entry from an in-memory struct","comments":"A full copy (including the 'path' string) of the given\n'source_entry' will be inserted on the index.\n","group":"index"},"git_index_append":{"type":"function","file":"index.h","line":241,"lineto":241,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"filename to add"},{"name":"stage","type":"int","comment":"stage for the entry"}],"argline":"git_index *index, const char *path, int stage","sig":"git_index *::const char *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Add (append) an index entry from a file in disk","comments":"A new entry will always be inserted into the index;\nif the index already contains an entry for such\npath, the old entry will **not** be replaced.\n\nThe file `path` must be relative to the repository's\nworking folder and must be readable.\n\nThis method will fail in bare index instances.\n","group":"index"},"git_index_append2":{"type":"function","file":"index.h","line":258,"lineto":258,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"source_entry","type":"const git_index_entry *","comment":"new entry object"}],"argline":"git_index *index, const git_index_entry *source_entry","sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":"0 or an error code"},"description":"Add (append) an index entry from an in-memory struct","comments":"A new entry will always be inserted into the index;\nif the index already contains an entry for the path\nin the `entry` struct, the old entry will **not** be\nreplaced.\n\nA full copy (including the 'path' string) of the given\n'source_entry' will be inserted on the index.\n","group":"index"},"git_index_remove":{"type":"function","file":"index.h","line":267,"lineto":267,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"position","type":"int","comment":"position of the entry to remove"}],"argline":"git_index *index, int position","sig":"git_index *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Remove an entry from the index","comments":"","group":"index"},"git_index_get":{"type":"function","file":"index.h","line":282,"lineto":282,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"n","type":"size_t","comment":"the position of the entry"}],"argline":"git_index *index, size_t n","sig":"git_index *::size_t","return":{"type":"git_index_entry *","comment":"a pointer to the entry; NULL if out of bounds"},"description":"Get a pointer to one of the entries in the index","comments":"This entry can be modified, and the changes will be written\nback to disk on the next write() call.\n\nThe entry should not be freed by the caller.\n","group":"index","examples":{"showindex.c":["ex/HEAD/showindex.html#git_index_get-3"],"general.c":["ex/HEAD/general.html#git_index_get-11"]}},"git_index_entrycount":{"type":"function","file":"index.h","line":290,"lineto":290,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current entries"},"description":"Get the count of entries currently in the index","comments":"","group":"index","examples":{"showindex.c":["ex/HEAD/showindex.html#git_index_entrycount-4"],"general.c":["ex/HEAD/general.html#git_index_entrycount-12"]}},"git_index_entrycount_unmerged":{"type":"function","file":"index.h","line":298,"lineto":298,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current unmerged entries"},"description":"Get the count of unmerged entries currently in the index","comments":"","group":"index"},"git_index_get_unmerged_bypath":{"type":"function","file":"index.h","line":310,"lineto":310,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"const git_index_entry_unmerged *","comment":"the unmerged entry; NULL if not found"},"description":"Get an unmerged entry from the index.","comments":"The returned entry is read-only and should not be modified\nof freed by the caller.\n","group":"index"},"git_index_get_unmerged_byindex":{"type":"function","file":"index.h","line":322,"lineto":322,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"n","type":"size_t","comment":"the position of the entry"}],"argline":"git_index *index, size_t n","sig":"git_index *::size_t","return":{"type":"const git_index_entry_unmerged *","comment":"a pointer to the unmerged entry; NULL if out of bounds"},"description":"Get an unmerged entry from the index.","comments":"The returned entry is read-only and should not be modified\nof freed by the caller.\n","group":"index"},"git_index_entry_stage":{"type":"function","file":"index.h","line":335,"lineto":335,"args":[{"name":"entry","type":"const git_index_entry *","comment":"The entry"}],"argline":"const git_index_entry *entry","sig":"const git_index_entry *","return":{"type":"int"},"description":"Return the stage number from a git index entry","comments":"This entry is calculated from the entry's flag\nattribute like this:\n\n(entry->flags & GIT_IDXENTRY_STAGEMASK) >> GIT_IDXENTRY_STAGESHIFT\n","group":"index"},"git_index_read_tree":{"type":"function","file":"index.h","line":346,"lineto":346,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"tree","type":"git_tree *","comment":"tree to read"}],"argline":"git_index *index, git_tree *tree","sig":"git_index *::git_tree *","return":{"type":"int","comment":"0 or an error code"},"description":"Read a tree into the index file","comments":"The current index contents will be replaced by the specified tree.\n","group":"index"},"git_repository_open":{"type":"function","file":"repository.h","line":36,"lineto":36,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"path","type":"const char *","comment":"the path to the repository"}],"argline":"git_repository **repository, const char *path","sig":"git_repository **::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Open a git repository.","comments":"The 'path' argument must point to either a git repository\nfolder, or an existing work dir.\n\nThe method will automatically detect if 'path' is a normal\nor bare repository or fail is 'path' is neither.\n","group":"repository","examples":{"showindex.c":["ex/HEAD/showindex.html#git_repository_open-5"],"general.c":["ex/HEAD/general.html#git_repository_open-13","ex/HEAD/general.html#git_repository_open-14"],"network/git2.c":["ex/HEAD/git2.html#git_repository_open-1"]}},"git_repository_wrap_odb":{"type":"function","file":"repository.h","line":49,"lineto":49,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo"},{"name":"odb","type":"git_odb *","comment":"the object database to wrap"}],"argline":"git_repository **repository, git_odb *odb","sig":"git_repository **::git_odb *","return":{"type":"int","comment":"0 or an error code"},"description":"Create a \"fake\" repository to wrap an object database","comments":"Create a repository object to wrap an object database to be used\nwith the API when all you have is an object database. This doesn't\nhave any paths associated with it, so use with care.\n","group":"repository"},"git_repository_discover":{"type":"function","file":"repository.h","line":79,"lineto":89,"args":[{"name":"repository_path","type":"char *","comment":"The user allocated buffer which will contain the found path."},{"name":"size","type":"size_t","comment":"repository_path size"},{"name":"start_path","type":"const char *","comment":"The base path where the lookup starts."},{"name":"across_fs","type":"int","comment":"If true, then the lookup will not stop when a filesystem device change is detected while exploring parent directories."},{"name":"ceiling_dirs","type":"const char *","comment":"A GIT_PATH_LIST_SEPARATOR separated list of absolute symbolic link free paths. The lookup will stop when any of this paths is reached. Note that the lookup always performs on start_path no matter start_path appears in ceiling_dirs ceiling_dirs might be NULL (which is equivalent to an empty string)"}],"argline":"char *repository_path,\n\t\tsize_t size,\n\t\tconst char *start_path,\n\t\tint across_fs,\n\t\tconst char *ceiling_dirs","sig":"char *::size_t::const char *::int::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Look for a git repository and copy its path in the given buffer.\nThe lookup start from base_path and walk across parent directories\nif nothing has been found. The lookup ends when the first repository\nis found, or when reaching a directory referenced in ceiling_dirs\nor when the filesystem changes (in case across_fs is true).","comments":"The method will automatically detect if the repository is bare\n(if there is a repository).\n","group":"repository"},"git_repository_open_ext":{"type":"function","file":"repository.h","line":94,"lineto":98,"args":[{"name":"repo","type":"git_repository **"},{"name":"start_path","type":"const char *"},{"name":"flags","type":"uint32_t"},{"name":"ceiling_dirs","type":"const char *"}],"argline":"git_repository **repo,\n\tconst char *start_path,\n\tuint32_t flags,\n\tconst char *ceiling_dirs","sig":"git_repository **::const char *::uint32_t::const char *","return":{"type":"int"},"description":"Find and open a repository with extended controls.","comments":"","group":"repository","examples":{"diff.c":["ex/HEAD/diff.html#git_repository_open_ext-1"]}},"git_repository_free":{"type":"function","file":"repository.h","line":111,"lineto":111,"args":[{"name":"repo","type":"git_repository *","comment":"repository handle to close. If NULL nothing occurs."}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"void"},"description":"Free a previously allocated repository","comments":"Note that after a repository is free'd, all the objects it has spawned\nwill still exist until they are manually closed by the user\nwith `git_object_free`, but accessing any of the attributes of\nan object without a backing repository will result in undefined\nbehavior\n","group":"repository","examples":{"showindex.c":["ex/HEAD/showindex.html#git_repository_free-6"],"general.c":["ex/HEAD/general.html#git_repository_free-15"],"network/git2.c":["ex/HEAD/git2.html#git_repository_free-2"],"diff.c":["ex/HEAD/diff.html#git_repository_free-2"]}},"git_repository_init":{"type":"function","file":"repository.h","line":127,"lineto":127,"args":[{"name":"repo_out","type":"git_repository **","comment":"pointer to the repo which will be created or reinitialized"},{"name":"path","type":"const char *","comment":"the path to the repository"},{"name":"is_bare","type":"unsigned","comment":"if true, a Git repository without a working directory is created at the pointed path. If false, provided path will be considered as the working directory into which the .git directory will be created."}],"argline":"git_repository **repo_out, const char *path, unsigned is_bare","sig":"git_repository **::const char *::unsigned","return":{"type":"int","comment":"0 or an error code"},"description":"Creates a new Git repository in the given folder.","comments":"TODO:\n- Reinit the repository\n","group":"repository"},"git_repository_head":{"type":"function","file":"repository.h","line":137,"lineto":137,"args":[{"name":"head_out","type":"git_reference **","comment":"pointer to the reference which will be retrieved"},{"name":"repo","type":"git_repository *","comment":"a repository object"}],"argline":"git_reference **head_out, git_repository *repo","sig":"git_reference **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Retrieve and resolve the reference pointed at by HEAD.","comments":"","group":"repository"},"git_repository_head_detached":{"type":"function","file":"repository.h","line":149,"lineto":149,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"1 if HEAD is detached, 0 if it's not; error code if there was an error."},"description":"Check if a repository's HEAD is detached","comments":"A repository's HEAD is detached when it points directly to a commit\ninstead of a branch.\n","group":"repository"},"git_repository_head_orphan":{"type":"function","file":"repository.h","line":161,"lineto":161,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"1 if the current branch is an orphan, 0 if it's not; error code if there was an error"},"description":"Check if the current branch is an orphan","comments":"An orphan branch is one named from HEAD but which doesn't exist in\nthe refs namespace, because it doesn't have any commit to point to.\n","group":"repository"},"git_repository_is_empty":{"type":"function","file":"repository.h","line":173,"lineto":173,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"1 if the repository is empty, 0 if it isn't, error code if the repository is corrupted"},"description":"Check if a repository is empty","comments":"An empty repository has just been initialized and contains\nno commits.\n","group":"repository"},"git_repository_path":{"type":"function","file":"repository.h","line":184,"lineto":184,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"const char *","comment":"the path to the repository"},"description":"Get the path of this repository","comments":"This is the path of the `.git` folder for normal repositories,\nor of the repository itself for bare repositories.\n","group":"repository"},"git_repository_workdir":{"type":"function","file":"repository.h","line":195,"lineto":195,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"const char *","comment":"the path to the working dir, if it exists"},"description":"Get the path of the working directory for this repository","comments":"If the repository is bare, this function will always return\nNULL.\n","group":"repository"},"git_repository_set_workdir":{"type":"function","file":"repository.h","line":214,"lineto":215,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"workdir","type":"const char *","comment":"The path to a working directory"},{"name":"update_gitlink","type":"int","comment":"Create/update gitlink in workdir and set config \"core.worktree\" (if workdir is not the parent of the .git directory)"}],"argline":"git_repository *repo, const char *workdir, int update_gitlink","sig":"git_repository *::const char *::int","return":{"type":"int","comment":"0, or an error code"},"description":"Set the path to the working directory for this repository","comments":"The working directory doesn't need to be the same one\nthat contains the `.git` folder for this repository.\n\nIf this repository is bare, setting its working directory\nwill turn it into a normal repository, capable of performing\nall the common workdir operations (checkout, status, index\nmanipulation, etc).\n","group":"repository"},"git_repository_is_bare":{"type":"function","file":"repository.h","line":223,"lineto":223,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"1 if the repository is bare, 0 otherwise."},"description":"Check if a repository is bare","comments":"","group":"repository"},"git_repository_config":{"type":"function","file":"repository.h","line":239,"lineto":239,"args":[{"name":"out","type":"git_config **","comment":"Pointer to store the loaded config file"},{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_config **out, git_repository *repo","sig":"git_config **::git_repository *","return":{"type":"int","comment":"0, or an error code"},"description":"Get the configuration file for this repository.","comments":"If a configuration file has not been set, the default\nconfig set for the repository will be returned, including\nglobal and system configurations (if they are available).\n\nThe configuration file must be freed once it's no longer\nbeing used by the user.\n","group":"repository"},"git_repository_set_config":{"type":"function","file":"repository.h","line":254,"lineto":254,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"config","type":"git_config *","comment":"A Config object"}],"argline":"git_repository *repo, git_config *config","sig":"git_repository *::git_config *","return":{"type":"void"},"description":"Set the configuration file for this repository","comments":"This configuration file will be used for all configuration\nqueries involving this repository.\n\nThe repository will keep a reference to the config file;\nthe user must still free the config after setting it\nto the repository, or it will leak.\n","group":"repository"},"git_repository_odb":{"type":"function","file":"repository.h","line":270,"lineto":270,"args":[{"name":"out","type":"git_odb **","comment":"Pointer to store the loaded ODB"},{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_odb **out, git_repository *repo","sig":"git_odb **::git_repository *","return":{"type":"int","comment":"0, or an error code"},"description":"Get the Object Database for this repository.","comments":"If a custom ODB has not been set, the default\ndatabase for the repository will be returned (the one\nlocated in `.git/objects`).\n\nThe ODB must be freed once it's no longer being used by\nthe user.\n","group":"repository","examples":{"general.c":["ex/HEAD/general.html#git_repository_odb-16"]}},"git_repository_set_odb":{"type":"function","file":"repository.h","line":285,"lineto":285,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"odb","type":"git_odb *","comment":"An ODB object"}],"argline":"git_repository *repo, git_odb *odb","sig":"git_repository *::git_odb *","return":{"type":"void"},"description":"Set the Object Database for this repository","comments":"The ODB will be used for all object-related operations\ninvolving this repository.\n\nThe repository will keep a reference to the ODB; the user\nmust still free the ODB object after setting it to the\nrepository, or it will leak.\n","group":"repository"},"git_repository_index":{"type":"function","file":"repository.h","line":301,"lineto":301,"args":[{"name":"out","type":"git_index **","comment":"Pointer to store the loaded index"},{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_index **out, git_repository *repo","sig":"git_index **::git_repository *","return":{"type":"int","comment":"0, or an error code"},"description":"Get the Index file for this repository.","comments":"If a custom index has not been set, the default\nindex for the repository will be returned (the one\nlocated in `.git/index`).\n\nThe index must be freed once it's no longer being used by\nthe user.\n","group":"repository","examples":{"showindex.c":["ex/HEAD/showindex.html#git_repository_index-7"],"general.c":["ex/HEAD/general.html#git_repository_index-17"]}},"git_repository_set_index":{"type":"function","file":"repository.h","line":316,"lineto":316,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"index","type":"git_index *","comment":"An index object"}],"argline":"git_repository *repo, git_index *index","sig":"git_repository *::git_index *","return":{"type":"void"},"description":"Set the index file for this repository","comments":"This index will be used for all index-related operations\ninvolving this repository.\n\nThe repository will keep a reference to the index file;\nthe user must still free the index after setting it\nto the repository, or it will leak.\n","group":"repository"},"git_repository_message":{"type":"function","file":"repository.h","line":330,"lineto":330,"args":[{"name":"buffer","type":"char *"},{"name":"len","type":"size_t"},{"name":"repo","type":"git_repository *"}],"argline":"char *buffer, size_t len, git_repository *repo","sig":"char *::size_t::git_repository *","return":{"type":"int"},"description":"Retrive git's prepared message","comments":"Operations such as git revert/cherry-pick/merge with the -n option\nstop just short of creating a commit with the changes and save\ntheir prepared message in .git/MERGE_MSG so the next git-commit\nexecution can present it to the user for them to amend if they\nwish.\n\nUse this function to get the contents of this file. Don't forget to\nremove the file after you create the commit.","group":"repository"},"git_repository_message_remove":{"type":"function","file":"repository.h","line":337,"lineto":337,"args":[{"name":"repo","type":"git_repository *"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int"},"description":"Remove git's prepared message.","comments":"Remove the message that `git_repository_message` retrieves.","group":"repository"},"git_tag_lookup":{"type":"function","file":"tag.h","line":32,"lineto":35,"args":[{"name":"tag","type":"git_tag **","comment":"pointer to the looked up tag"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tag."},{"name":"id","type":"const git_oid *","comment":"identity of the tag to locate."}],"argline":"git_tag **tag, git_repository *repo, const git_oid *id","sig":"git_tag **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a tag object from the repository.","comments":"","group":"tag","examples":{"general.c":["ex/HEAD/general.html#git_tag_lookup-18"]}},"git_tag_lookup_prefix":{"type":"function","file":"tag.h","line":49,"lineto":52,"args":[{"name":"tag","type":"git_tag **","comment":"pointer to the looked up tag"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tag."},{"name":"id","type":"const git_oid *","comment":"identity of the tag to locate."},{"name":"len","type":"size_t","comment":"the length of the short identifier"}],"argline":"git_tag **tag, git_repository *repo, const git_oid *id, size_t len","sig":"git_tag **::git_repository *::const git_oid *::size_t","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a tag object from the repository,\ngiven a prefix of its identifier (short id).","comments":"@see git_object_lookup_prefix\n","group":"tag"},"git_tag_free":{"type":"function","file":"tag.h","line":65,"lineto":68,"args":[{"name":"tag","type":"git_tag *","comment":"the tag to close"}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"void"},"description":"Close an open tag","comments":"This is a wrapper around git_object_free()\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop\nusing a tag. Failure to do so will cause a memory leak.\n","group":"tag"},"git_tag_id":{"type":"function","file":"tag.h","line":78,"lineto":78,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const git_oid *","comment":"object identity for the tag."},"description":"Get the id of a tag.","comments":"","group":"tag"},"git_tag_target":{"type":"function","file":"tag.h","line":90,"lineto":90,"args":[{"name":"target","type":"git_object **","comment":"pointer where to store the target"},{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_object **target, git_tag *tag","sig":"git_object **::git_tag *","return":{"type":"int","comment":"0 or an error code"},"description":"Get the tagged object of a tag","comments":"This method performs a repository lookup for the\ngiven object and returns it\n","group":"tag","examples":{"general.c":["ex/HEAD/general.html#git_tag_target-19"]}},"git_tag_target_oid":{"type":"function","file":"tag.h","line":98,"lineto":98,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const git_oid *","comment":"pointer to the OID"},"description":"Get the OID of the tagged object of a tag","comments":"","group":"tag"},"git_tag_type":{"type":"function","file":"tag.h","line":106,"lineto":106,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"git_otype","comment":"type of the tagged object"},"description":"Get the type of a tag's tagged object","comments":"","group":"tag","examples":{"general.c":["ex/HEAD/general.html#git_tag_type-20"]}},"git_tag_name":{"type":"function","file":"tag.h","line":114,"lineto":114,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const char *","comment":"name of the tag"},"description":"Get the name of a tag","comments":"","group":"tag","examples":{"general.c":["ex/HEAD/general.html#git_tag_name-21"]}},"git_tag_tagger":{"type":"function","file":"tag.h","line":122,"lineto":122,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const git_signature *","comment":"reference to the tag's author"},"description":"Get the tagger (author) of a tag","comments":"","group":"tag"},"git_tag_message":{"type":"function","file":"tag.h","line":130,"lineto":130,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const char *","comment":"message of the tag"},"description":"Get the message of a tag","comments":"","group":"tag","examples":{"general.c":["ex/HEAD/general.html#git_tag_message-22"]}},"git_tag_create":{"type":"function","file":"tag.h","line":168,"lineto":175,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the newly created tag. If the tag already exists, this parameter will be the oid of the existing tag, and the function will return a GIT_EEXISTS error code."},{"name":"repo","type":"git_repository *","comment":"Repository where to store the tag"},{"name":"tag_name","type":"const char *","comment":"Name for the tag; this name is validated for consistency. It should also not conflict with an already existing tag name"},{"name":"target","type":"const git_object *","comment":"Object to which this tag points. This object must belong to the given `repo`."},{"name":"tagger","type":"const git_signature *","comment":"Signature of the tagger for this tag, and of the tagging time"},{"name":"message","type":"const char *","comment":"Full message for this tag"},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *tag_name,\n\t\tconst git_object *target,\n\t\tconst git_signature *tagger,\n\t\tconst char *message,\n\t\tint force","sig":"git_oid *::git_repository *::const char *::const git_object *::const git_signature *::const char *::int","return":{"type":"int","comment":"0 or an error code A tag object is written to the ODB, and a proper reference is written in the /refs/tags folder, pointing to it"},"description":"Create a new tag in the repository from an object","comments":"A new reference will also be created pointing to\nthis tag object. If `force` is true and a reference\nalready exists with the given name, it'll be replaced.\n\nThe message will not be cleaned up. This can be achieved\nthrough `git_message_prettify()`.\n","group":"tag"},"git_tag_create_frombuffer":{"type":"function","file":"tag.h","line":186,"lineto":190,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the newly created tag"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the tag"},{"name":"buffer","type":"const char *","comment":"Raw tag data"},{"name":"force","type":"int","comment":"Overwrite existing tags"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *buffer,\n\t\tint force","sig":"git_oid *::git_repository *::const char *::int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new tag in the repository from a buffer","comments":"","group":"tag"},"git_tag_create_lightweight":{"type":"function","file":"tag.h","line":219,"lineto":224,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the provided target object. If the tag already exists, this parameter will be filled with the oid of the existing pointed object and the function will return a GIT_EEXISTS error code."},{"name":"repo","type":"git_repository *","comment":"Repository where to store the lightweight tag"},{"name":"tag_name","type":"const char *","comment":"Name for the tag; this name is validated for consistency. It should also not conflict with an already existing tag name"},{"name":"target","type":"const git_object *","comment":"Object to which this tag points. This object must belong to the given `repo`."},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *tag_name,\n\t\tconst git_object *target,\n\t\tint force","sig":"git_oid *::git_repository *::const char *::const git_object *::int","return":{"type":"int","comment":"0 or an error code A proper reference is written in the /refs/tags folder, pointing to the provided target object"},"description":"Create a new lightweight tag pointing at a target object","comments":"A new direct reference will be created pointing to\nthis target object. If `force` is true and a reference\nalready exists with the given name, it'll be replaced.\n","group":"tag"},"git_tag_delete":{"type":"function","file":"tag.h","line":236,"lineto":238,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where lives the tag"},{"name":"tag_name","type":"const char *","comment":"Name of the tag to be deleted; this name is validated for consistency."}],"argline":"git_repository *repo,\n\t\tconst char *tag_name","sig":"git_repository *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Delete an existing tag reference.","comments":"","group":"tag"},"git_tag_list":{"type":"function","file":"tag.h","line":253,"lineto":255,"args":[{"name":"tag_names","type":"git_strarray *","comment":"Pointer to a git_strarray structure where the tag names will be stored"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the tags"}],"argline":"git_strarray *tag_names,\n\t\tgit_repository *repo","sig":"git_strarray *::git_repository *","return":{"type":"int","comment":"0 or an error code"},"description":"Fill a list with all the tags in the Repository","comments":"The string array will be filled with the names of the\nmatching tags; these values are owned by the user and\nshould be free'd manually when no longer needed, using\n`git_strarray_free`.\n","group":"tag"},"git_tag_list_match":{"type":"function","file":"tag.h","line":275,"lineto":278,"args":[{"name":"tag_names","type":"git_strarray *","comment":"Pointer to a git_strarray structure where the tag names will be stored"},{"name":"pattern","type":"const char *","comment":"Standard fnmatch pattern"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the tags"}],"argline":"git_strarray *tag_names,\n\t\tconst char *pattern,\n\t\tgit_repository *repo","sig":"git_strarray *::const char *::git_repository *","return":{"type":"int","comment":"0 or an error code"},"description":"Fill a list with all the tags in the Repository\nwhich name match a defined pattern","comments":"If an empty pattern is provided, all the tags\nwill be returned.\n\nThe string array will be filled with the names of the\nmatching tags; these values are owned by the user and\nshould be free'd manually when no longer needed, using\n`git_strarray_free`.\n","group":"tag"},"git_tag_peel":{"type":"function","file":"tag.h","line":291,"lineto":293,"args":[{"name":"tag_target","type":"git_object **","comment":"Pointer to the peeled git_object"},{"name":"tag","type":"git_tag *","comment":"_target Pointer to the peeled git_object"}],"argline":"git_object **tag_target,\n\t\tgit_tag *tag","sig":"git_object **::git_tag *","return":{"type":"int","comment":"0 or an error code"},"description":"Recursively peel a tag until a non tag git_object\nis met","comments":"The retrieved `tag_target` object is owned by the repository\nand should be closed with the `git_object_free` method.\n","group":"tag"},"git_revparse_single":{"type":"function","file":"revparse.h","line":32,"lineto":32,"args":[{"name":"out","type":"git_object **","comment":"pointer to output object"},{"name":"repo","type":"git_repository *","comment":"the repository to search in"},{"name":"spec","type":"const char *","comment":"the textual specification for an object"}],"argline":"git_object **out, git_repository *repo, const char *spec","sig":"git_object **::git_repository *::const char *","return":{"type":"int","comment":"on success, GIT_ERROR otherwise (use git_error_last for information about the error)"},"description":"Find an object, as specified by a revision string. See `man gitrevisions`, or the documentation\nfor `git rev-parse` for information on the syntax accepted.","comments":"","group":"revparse"},"git_commit_lookup":{"type":"function","file":"commit.h","line":33,"lineto":36,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the looked up commit"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the commit."},{"name":"id","type":"const git_oid *","comment":"identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit."}],"argline":"git_commit **commit, git_repository *repo, const git_oid *id","sig":"git_commit **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a commit object from a repository.","comments":"","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_lookup-23","ex/HEAD/general.html#git_commit_lookup-24","ex/HEAD/general.html#git_commit_lookup-25"]}},"git_commit_lookup_prefix":{"type":"function","file":"commit.h","line":51,"lineto":54,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the looked up commit"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the commit."},{"name":"id","type":"const git_oid *","comment":"identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit."},{"name":"len","type":"size_t","comment":"the length of the short identifier"}],"argline":"git_commit **commit, git_repository *repo, const git_oid *id, size_t len","sig":"git_commit **::git_repository *::const git_oid *::size_t","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a commit object from a repository,\ngiven a prefix of its identifier (short id).","comments":"@see git_object_lookup_prefix\n","group":"commit"},"git_commit_free":{"type":"function","file":"commit.h","line":67,"lineto":70,"args":[{"name":"commit","type":"git_commit *","comment":"the commit to close"}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"void"},"description":"Close an open commit","comments":"This is a wrapper around git_object_free()\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop\nusing a commit. Failure to do so will cause a memory leak.\n","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_free-26","ex/HEAD/general.html#git_commit_free-27","ex/HEAD/general.html#git_commit_free-28","ex/HEAD/general.html#git_commit_free-29"]}},"git_commit_id":{"type":"function","file":"commit.h","line":79,"lineto":79,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_oid *","comment":"object identity for the commit."},"description":"Get the id of a commit.","comments":"","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_id-30"]}},"git_commit_message_encoding":{"type":"function","file":"commit.h","line":91,"lineto":91,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const char *","comment":"NULL, or the encoding"},"description":"Get the encoding for the message of a commit,\nas a string representing a standard encoding name.","comments":"The encoding may be NULL if the `encoding` header\nin the commit is missing; in that case UTF-8 is assumed.\n","group":"commit"},"git_commit_message":{"type":"function","file":"commit.h","line":99,"lineto":99,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const char *","comment":"the message of a commit"},"description":"Get the full message of a commit.","comments":"","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_message-31","ex/HEAD/general.html#git_commit_message-32"]}},"git_commit_time":{"type":"function","file":"commit.h","line":107,"lineto":107,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"git_time_t","comment":"the time of a commit"},"description":"Get the commit time (i.e. committer time) of a commit.","comments":"","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_time-33","ex/HEAD/general.html#git_commit_time-34"]}},"git_commit_time_offset":{"type":"function","file":"commit.h","line":115,"lineto":115,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"int","comment":"positive or negative timezone offset, in minutes from UTC"},"description":"Get the commit timezone offset (i.e. committer's preferred timezone) of a commit.","comments":"","group":"commit"},"git_commit_committer":{"type":"function","file":"commit.h","line":123,"lineto":123,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_signature *","comment":"the committer of a commit"},"description":"Get the committer of a commit.","comments":"","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_committer-35"]}},"git_commit_author":{"type":"function","file":"commit.h","line":131,"lineto":131,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_signature *","comment":"the author of a commit"},"description":"Get the author of a commit.","comments":"","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_author-36","ex/HEAD/general.html#git_commit_author-37"]}},"git_commit_tree":{"type":"function","file":"commit.h","line":140,"lineto":140,"args":[{"name":"tree_out","type":"git_tree **","comment":"pointer where to store the tree object"},{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_tree **tree_out, git_commit *commit","sig":"git_tree **::git_commit *","return":{"type":"int","comment":"0 or an error code"},"description":"Get the tree pointed to by a commit.","comments":"","group":"commit","examples":{"diff.c":["ex/HEAD/diff.html#git_commit_tree-3"]}},"git_commit_tree_oid":{"type":"function","file":"commit.h","line":150,"lineto":150,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_oid *","comment":"the id of tree pointed to by commit."},"description":"Get the id of the tree pointed to by a commit. This differs from\n`git_commit_tree` in that no attempts are made to fetch an object\nfrom the ODB.","comments":"","group":"commit"},"git_commit_parentcount":{"type":"function","file":"commit.h","line":158,"lineto":158,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"unsigned int","comment":"integer of count of parents"},"description":"Get the number of parents of this commit","comments":"","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_parentcount-38"]}},"git_commit_parent":{"type":"function","file":"commit.h","line":168,"lineto":168,"args":[{"name":"parent","type":"git_commit **","comment":"Pointer where to store the parent commit"},{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)"}],"argline":"git_commit **parent, git_commit *commit, unsigned int n","sig":"git_commit **::git_commit *::unsigned int","return":{"type":"int","comment":"0 or an error code"},"description":"Get the specified parent of the commit.","comments":"","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_parent-39"]}},"git_commit_parent_oid":{"type":"function","file":"commit.h","line":179,"lineto":179,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)"}],"argline":"git_commit *commit, unsigned int n","sig":"git_commit *::unsigned int","return":{"type":"const git_oid *","comment":"the id of the parent, NULL on error."},"description":"Get the oid of a specified parent for a commit. This is different from\n`git_commit_parent`, which will attempt to load the parent commit from\nthe ODB.","comments":"","group":"commit"},"git_commit_nth_gen_ancestor":{"type":"function","file":"commit.h","line":195,"lineto":198,"args":[{"name":"ancestor","type":"git_commit **","comment":"Pointer where to store the ancestor commit"},{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the requested generation"}],"argline":"git_commit **ancestor,\n\tconst git_commit *commit,\n\tunsigned int n","sig":"git_commit **::const git_commit *::unsigned int","return":{"type":"int","comment":"0 on success; GIT_ENOTFOUND if no matching ancestor exists or an error code"},"description":"Get the commit object that is the <n>th generation ancestor\nof the named commit object, following only the first parents.\nThe returned commit has to be freed by the caller.","comments":"Passing `0` as the generation number returns another instance of the\nbase commit itself.\n","group":"commit"},"git_commit_create":{"type":"function","file":"commit.h","line":247,"lineto":257,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the newly created commit"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the commit"},{"name":"update_ref","type":"const char *","comment":"If not NULL, name of the reference that will be updated to point to this commit. If the reference is not direct, it will be resolved to a direct reference. Use \"HEAD\" to update the HEAD of the current branch and make it point to this commit. If the reference doesn't exist yet, it will be created."},{"name":"author","type":"const git_signature *","comment":"Signature representing the author and the authory time of this commit"},{"name":"committer","type":"const git_signature *","comment":"Signature representing the committer and the commit time of this commit"},{"name":"message_encoding","type":"const char *","comment":"The encoding for the message in the commit, represented with a standard encoding name. E.g. \"UTF-8\". If NULL, no encoding header is written and UTF-8 is assumed."},{"name":"message","type":"const char *","comment":"_encoding The encoding for the message in the commit, represented with a standard encoding name. E.g. \"UTF-8\". If NULL, no encoding header is written and UTF-8 is assumed."},{"name":"tree","type":"const git_tree *","comment":"An instance of a `git_tree` object that will be used as the tree for the commit. This tree object must also be owned by the given `repo`."},{"name":"parent_count","type":"int","comment":"Number of parents for this commit"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *update_ref,\n\t\tconst git_signature *author,\n\t\tconst git_signature *committer,\n\t\tconst char *message_encoding,\n\t\tconst char *message,\n\t\tconst git_tree *tree,\n\t\tint parent_count,\n\t\tconst git_commit *parents[]","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const char *::const git_tree *::int","return":{"type":"int","comment":"0 or an error code The created commit will be written to the Object Database and the given reference will be updated to point to it"},"description":"Create a new commit in the repository using `git_object`\ninstances as parameters.","comments":"The message will not be cleaned up. This can be achieved\nthrough `git_message_prettify()`.\n","group":"commit"},"git_commit_create_v":{"type":"function","file":"commit.h","line":275,"lineto":285,"args":[{"name":"oid","type":"git_oid *"},{"name":"repo","type":"git_repository *"},{"name":"update_ref","type":"const char *"},{"name":"author","type":"const git_signature *"},{"name":"committer","type":"const git_signature *"},{"name":"message_encoding","type":"const char *"},{"name":"message","type":"const char *"},{"name":"tree","type":"const git_tree *"},{"name":"parent_count","type":"int"}],"argline":"git_oid *oid,\n\t\tgit_repository *repo,\n\t\tconst char *update_ref,\n\t\tconst git_signature *author,\n\t\tconst git_signature *committer,\n\t\tconst char *message_encoding,\n\t\tconst char *message,\n\t\tconst git_tree *tree,\n\t\tint parent_count,\n\t\t...","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const char *::const git_tree *::int","return":{"type":"int"},"description":"Create a new commit in the repository using a variable\nargument list.","comments":"The message will be cleaned up from excess whitespace\nit will be made sure that the last line ends with a '\\n'.\n\nThe parents for the commit are specified as a variable\nlist of pointers to `const git_commit *`. Note that this\nis a convenience method which may not be safe to export\nfor certain languages or compilers\n\nAll other parameters remain the same\n\n@see git_commit_create","group":"commit","examples":{"general.c":["ex/HEAD/general.html#git_commit_create_v-40"]}},"git_remote_new":{"type":"function","file":"remote.h","line":46,"lineto":46,"args":[{"name":"out","type":"git_remote **","comment":"pointer to the new remote object"},{"name":"repo","type":"git_repository *","comment":"the associated repository"},{"name":"name","type":"const char *","comment":"the remote's name"},{"name":"url","type":"const char *","comment":"the remote repository's URL"},{"name":"fetch","type":"const char *","comment":"the fetch refspec to use for this remote"}],"argline":"git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch","sig":"git_remote **::git_repository *::const char *::const char *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Create a remote in memory","comments":"Create a remote with the default refspecs in memory. You can use\nthis when you have a URL instead of a remote's name.\n","group":"remote","examples":{"network/ls-remote.c":["ex/HEAD/ls-remote.html#git_remote_new-1"],"network/fetch.c":["ex/HEAD/fetch.html#git_remote_new-1"]}},"git_remote_load":{"type":"function","file":"remote.h","line":56,"lineto":56,"args":[{"name":"out","type":"git_remote **","comment":"pointer to the new remote object"},{"name":"repo","type":"git_repository *"},{"name":"name","type":"const char *","comment":"the remote's name"}],"argline":"git_remote **out, git_repository *repo, const char *name","sig":"git_remote **::git_repository *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Get the information for a particular remote","comments":"","group":"remote","examples":{"network/ls-remote.c":["ex/HEAD/ls-remote.html#git_remote_load-2"],"network/fetch.c":["ex/HEAD/fetch.html#git_remote_load-2"]}},"git_remote_save":{"type":"function","file":"remote.h","line":64,"lineto":64,"args":[{"name":"remote","type":"const git_remote *","comment":"the remote to save to config"}],"argline":"const git_remote *remote","sig":"const git_remote *","return":{"type":"int","comment":"0 or an error code"},"description":"Save a remote to its repository's configuration","comments":"","group":"remote"},"git_remote_name":{"type":"function","file":"remote.h","line":72,"lineto":72,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"const char *","comment":"a pointer to the name"},"description":"Get the remote's name","comments":"","group":"remote"},"git_remote_url":{"type":"function","file":"remote.h","line":80,"lineto":80,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"const char *","comment":"a pointer to the url"},"description":"Get the remote's url","comments":"","group":"remote"},"git_remote_pushurl":{"type":"function","file":"remote.h","line":88,"lineto":88,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"const char *","comment":"a pointer to the url or NULL if no special url for pushing is set"},"description":"Get the remote's url for pushing","comments":"","group":"remote"},"git_remote_set_url":{"type":"function","file":"remote.h","line":99,"lineto":99,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"url","type":"const char*","comment":"the url to set"}],"argline":"git_remote *remote, const char* url","sig":"git_remote *::const char*","return":{"type":"int","comment":"0 or an error value"},"description":"Set the remote's url","comments":"Existing connections will not be updated.\n","group":"remote"},"git_remote_set_pushurl":{"type":"function","file":"remote.h","line":110,"lineto":110,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"url","type":"const char*","comment":"the url to set or NULL to clear the pushurl"}],"argline":"git_remote *remote, const char* url","sig":"git_remote *::const char*","return":{"type":"int","comment":"0 or an error value"},"description":"Set the remote's url for pushing","comments":"Existing connections will not be updated.\n","group":"remote"},"git_remote_set_fetchspec":{"type":"function","file":"remote.h","line":119,"lineto":119,"args":[{"name":"remote","type":"git_remote *","comment":"the remote @apram spec the new fetch refspec"},{"name":"spec","type":"const char *"}],"argline":"git_remote *remote, const char *spec","sig":"git_remote *::const char *","return":{"type":"int","comment":"0 or an error value"},"description":"Set the remote's fetch refspec","comments":"","group":"remote"},"git_remote_fetchspec":{"type":"function","file":"remote.h","line":127,"lineto":127,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"const git_refspec *","comment":"a pointer to the fetch refspec or NULL if it doesn't exist"},"description":"Get the fetch refspec","comments":"","group":"remote"},"git_remote_set_pushspec":{"type":"function","file":"remote.h","line":136,"lineto":136,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"spec","type":"const char *","comment":"the new push refspec"}],"argline":"git_remote *remote, const char *spec","sig":"git_remote *::const char *","return":{"type":"int","comment":"0 or an error value"},"description":"Set the remote's push refspec","comments":"","group":"remote"},"git_remote_pushspec":{"type":"function","file":"remote.h","line":144,"lineto":144,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"const git_refspec *","comment":"a pointer to the push refspec or NULL if it doesn't exist"},"description":"Get the push refspec","comments":"","group":"remote"},"git_remote_connect":{"type":"function","file":"remote.h","line":158,"lineto":158,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to connect to"},{"name":"direction","type":"int","comment":"whether you want to receive or send data"}],"argline":"git_remote *remote, int direction","sig":"git_remote *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Open a connection to a remote","comments":"The transport is selected based on the URL. The direction argument\nis due to a limitation of the git protocol (over TCP or SSH) which\nstarts up a specific binary which can only do the one or the other.\n","group":"remote","examples":{"network/ls-remote.c":["ex/HEAD/ls-remote.html#git_remote_connect-3","ex/HEAD/ls-remote.html#git_remote_connect-4"],"network/fetch.c":["ex/HEAD/fetch.html#git_remote_connect-3"]}},"git_remote_ls":{"type":"function","file":"remote.h","line":170,"lineto":170,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"list_cb","type":"git_headlist_cb"},{"name":"payload","type":"void *"}],"argline":"git_remote *remote, git_headlist_cb list_cb, void *payload","sig":"git_remote *::git_headlist_cb::void *","return":{"type":"int","comment":"0 or an error code"},"description":"Get a list of refs at the remote","comments":"The remote (or more exactly its transport) must be connected. The\nmemory belongs to the remote.\n","group":"remote","examples":{"network/ls-remote.c":["ex/HEAD/ls-remote.html#git_remote_ls-5","ex/HEAD/ls-remote.html#git_remote_ls-6","ex/HEAD/ls-remote.html#git_remote_ls-7"]}},"git_remote_download":{"type":"function","file":"remote.h","line":185,"lineto":185,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to download from"},{"name":"bytes","type":"git_off_t *"},{"name":"stats","type":"git_indexer_stats *"}],"argline":"git_remote *remote, git_off_t *bytes, git_indexer_stats *stats","sig":"git_remote *::git_off_t *::git_indexer_stats *","return":{"type":"int","comment":"0 or an error code"},"description":"Download the packfile","comments":"Negotiate what objects should be downloaded and download the\npackfile with those objects. The packfile is downloaded with a\ntemporary filename, as it's final name is not known yet. If there\nwas no packfile needed (all the objects were available locally),\nfilename will be NULL and the function will return success.\n","group":"remote","examples":{"network/fetch.c":["ex/HEAD/fetch.html#git_remote_download-4"]}},"git_remote_connected":{"type":"function","file":"remote.h","line":195,"lineto":195,"args":[{"name":"remote","type":"git_remote *"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"int","comment":"1 if it's connected, 0 otherwise."},"description":"Check whether the remote is connected","comments":"Check whether the remote's underlying transport is connected to the\nremote host.\n","group":"remote"},"git_remote_disconnect":{"type":"function","file":"remote.h","line":205,"lineto":205,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to disconnect from"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"void"},"description":"Disconnect from the remote","comments":"Close the connection to the remote and free the underlying\ntransport.\n","group":"remote","examples":{"network/fetch.c":["ex/HEAD/fetch.html#git_remote_disconnect-5"]}},"git_remote_free":{"type":"function","file":"remote.h","line":215,"lineto":215,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to free"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"void"},"description":"Free the memory associated with a remote","comments":"This also disconnects from the remote, if the connection\nhas not been closed yet (using git_remote_disconnect).\n","group":"remote","examples":{"network/ls-remote.c":["ex/HEAD/ls-remote.html#git_remote_free-8","ex/HEAD/ls-remote.html#git_remote_free-9"],"network/fetch.c":["ex/HEAD/fetch.html#git_remote_free-6","ex/HEAD/fetch.html#git_remote_free-7"]}},"git_remote_update_tips":{"type":"function","file":"remote.h","line":223,"lineto":223,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to update"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"int"},"description":"Update the tips to the new state","comments":"","group":"remote","examples":{"network/fetch.c":["ex/HEAD/fetch.html#git_remote_update_tips-8"]}},"git_remote_valid_url":{"type":"function","file":"remote.h","line":231,"lineto":231,"args":[{"name":"url","type":"const char *","comment":"the url to check"}],"argline":"const char *url","sig":"const char *","return":{"type":"int"},"description":"Return whether a string is a valid remote URL","comments":"","group":"remote"},"git_remote_supported_url":{"type":"function","file":"remote.h","line":239,"lineto":239,"args":[{"name":"url","type":"const char*","comment":"the url to check"}],"argline":"const char* url","sig":"const char*","return":{"type":"int","comment":"1 if the url is supported, 0 otherwise"},"description":"Return whether the passed URL is supported by this version of the library.","comments":"","group":"remote"},"git_remote_list":{"type":"function","file":"remote.h","line":250,"lineto":250,"args":[{"name":"remotes_list","type":"git_strarray *","comment":"a string array with the names of the remotes"},{"name":"repo","type":"git_repository *","comment":"the repository to query"}],"argline":"git_strarray *remotes_list, git_repository *repo","sig":"git_strarray *::git_repository *","return":{"type":"int","comment":"0 or an error code"},"description":"Get a list of the configured remotes for a repo","comments":"The string array must be freed by the user.\n","group":"remote"},"git_remote_add":{"type":"function","file":"remote.h","line":260,"lineto":260,"args":[{"name":"out","type":"git_remote **","comment":"the resulting remote"},{"name":"repo","type":"git_repository *","comment":"the repository in which to create the remote"},{"name":"name","type":"const char *","comment":"the remote's name"},{"name":"url","type":"const char *","comment":"the remote's url"}],"argline":"git_remote **out, git_repository *repo, const char *name, const char *url","sig":"git_remote **::git_repository *::const char *::const char *","return":{"type":"int"},"description":"Add a remote with the default fetch refspec to the repository's configuration","comments":"","group":"remote"},"git_remote_check_cert":{"type":"function","file":"remote.h","line":268,"lineto":268,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to configure"},{"name":"check","type":"int","comment":"whether to check the server's certificate (defaults to yes)"}],"argline":"git_remote *remote, int check","sig":"git_remote *::int","return":{"type":"void"},"description":"Choose whether to check the server's certificate (applies to HTTPS only)","comments":"","group":"remote"},"git_remote_set_callbacks":{"type":"function","file":"remote.h","line":302,"lineto":302,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to configure"},{"name":"callbacks","type":"git_remote_callbacks *","comment":"a pointer to the user's callback settings"}],"argline":"git_remote *remote, git_remote_callbacks *callbacks","sig":"git_remote *::git_remote_callbacks *","return":{"type":"void"},"description":"Set the callbacks for a remote","comments":"Note that the remote keeps its own copy of the data and you need to\ncall this function again if you want to change the callbacks.\n","group":"remote","examples":{"network/fetch.c":["ex/HEAD/fetch.html#git_remote_set_callbacks-9"]}},"git_merge_base":{"type":"function","file":"merge.h","line":31,"lineto":31,"args":[{"name":"out","type":"git_oid *","comment":"the OID of a merge base between 'one' and 'two'"},{"name":"repo","type":"git_repository *","comment":"the repository where the commits exist"},{"name":"one","type":"git_oid *","comment":"one of the commits"},{"name":"two","type":"git_oid *","comment":"the other commit"}],"argline":"git_oid *out, git_repository *repo, git_oid *one, git_oid *two","sig":"git_oid *::git_repository *::git_oid *::git_oid *","return":{"type":"int"},"description":"Find a merge base between two commits","comments":"","group":"merge"},"git_merge_base_many":{"type":"function","file":"merge.h","line":41,"lineto":41,"args":[{"name":"out","type":"git_oid *","comment":"the OID of a merge base considering all the commits"},{"name":"repo","type":"git_repository *","comment":"the repository where the commits exist"},{"name":"length","type":"size_t","comment":"The number of commits in the provided `input_array`"}],"argline":"git_oid *out, git_repository *repo, const git_oid input_array[], size_t length","sig":"git_oid *::git_repository *::size_t","return":{"type":"int"},"description":"Find a merge base given a list of commits","comments":"","group":"merge"},"git_diff_list_free":{"type":"function","file":"diff.h","line":210,"lineto":210,"args":[{"name":"diff","type":"git_diff_list *"}],"argline":"git_diff_list *diff","sig":"git_diff_list *","return":{"type":"void"},"description":"Deallocate a diff list.","comments":"","group":"diff","examples":{"diff.c":["ex/HEAD/diff.html#git_diff_list_free-4","ex/HEAD/diff.html#git_diff_list_free-5"]}},"git_diff_tree_to_tree":{"type":"function","file":"diff.h","line":223,"lineto":228,"args":[{"name":"repo","type":"git_repository *","comment":"The repository containing the trees."},{"name":"opts","type":"const git_diff_options *","comment":"Structure with options to influence diff or NULL for defaults.\ncan be NULL for defaults"},{"name":"old_tree","type":"git_tree *","comment":"A git_tree object to diff from."},{"name":"new_tree","type":"git_tree *","comment":"A git_tree object to diff to."},{"name":"diff","type":"git_diff_list **","comment":"A pointer to a git_diff_list pointer that will be allocated."}],"argline":"git_repository *repo,\n\tconst git_diff_options *opts, \n\tgit_tree *old_tree,\n\tgit_tree *new_tree,\n\tgit_diff_list **diff","sig":"git_repository *::const git_diff_options *::git_tree *::git_tree *::git_diff_list **","return":{"type":"int"},"description":"Compute a difference between two tree objects.","comments":"This is equivalent to `git diff <treeish> <treeish>`\n","group":"diff","examples":{"diff.c":["ex/HEAD/diff.html#git_diff_tree_to_tree-6"]}},"git_diff_index_to_tree":{"type":"function","file":"diff.h","line":241,"lineto":245,"args":[{"name":"repo","type":"git_repository *","comment":"The repository containing the tree and index."},{"name":"opts","type":"const git_diff_options *","comment":"Structure with options to influence diff or NULL for defaults.\ncan be NULL for defaults"},{"name":"old_tree","type":"git_tree *","comment":"A git_tree object to diff from."},{"name":"diff","type":"git_diff_list **","comment":"A pointer to a git_diff_list pointer that will be allocated."}],"argline":"git_repository *repo,\n\tconst git_diff_options *opts, \n\tgit_tree *old_tree,\n\tgit_diff_list **diff","sig":"git_repository *::const git_diff_options *::git_tree *::git_diff_list **","return":{"type":"int"},"description":"Compute a difference between a tree and the index.","comments":"This is equivalent to `git diff --cached <treeish>` or if you pass\nthe HEAD tree, then like `git diff --cached`.\n","group":"diff","examples":{"diff.c":["ex/HEAD/diff.html#git_diff_index_to_tree-7","ex/HEAD/diff.html#git_diff_index_to_tree-8","ex/HEAD/diff.html#git_diff_index_to_tree-9"]}},"git_diff_workdir_to_index":{"type":"function","file":"diff.h","line":259,"lineto":262,"args":[{"name":"repo","type":"git_repository *","comment":"The repository."},{"name":"opts","type":"const git_diff_options *","comment":"Structure with options to influence diff or NULL for defaults.\ncan be NULL for defaults"},{"name":"diff","type":"git_diff_list **","comment":"A pointer to a git_diff_list pointer that will be allocated."}],"argline":"git_repository *repo,\n\tconst git_diff_options *opts, \n\tgit_diff_list **diff","sig":"git_repository *::const git_diff_options *::git_diff_list **","return":{"type":"int"},"description":"Compute a difference between the working directory and the index.","comments":"This matches the `git diff` command.  See the note below on\n`git_diff_workdir_to_tree` for a discussion of the difference between\n`git diff` and `git diff HEAD` and how to emulate a `git diff <treeish>`\nusing libgit2.\n","group":"diff","examples":{"diff.c":["ex/HEAD/diff.html#git_diff_workdir_to_index-10","ex/HEAD/diff.html#git_diff_workdir_to_index-11"]}},"git_diff_workdir_to_tree":{"type":"function","file":"diff.h","line":291,"lineto":295,"args":[{"name":"repo","type":"git_repository *","comment":"The repository containing the tree."},{"name":"opts","type":"const git_diff_options *","comment":"Structure with options to influence diff or NULL for defaults.\ncan be NULL for defaults"},{"name":"old_tree","type":"git_tree *","comment":"A git_tree object to diff from."},{"name":"diff","type":"git_diff_list **","comment":"A pointer to a git_diff_list pointer that will be allocated."}],"argline":"git_repository *repo,\n\tconst git_diff_options *opts, \n\tgit_tree *old_tree,\n\tgit_diff_list **diff","sig":"git_repository *::const git_diff_options *::git_tree *::git_diff_list **","return":{"type":"int"},"description":"Compute a difference between the working directory and a tree.","comments":"This is *NOT* the same as `git diff <treeish>`.  Running `git diff HEAD`\nor the like actually uses information from the index, along with the tree\nand workdir dir info.\n\nThis function returns strictly the differences between the tree and the\nfiles contained in the working directory, regardless of the state of\nfiles in the index.  It may come as a surprise, but there is no direct\nequivalent in core git.\n\nTo emulate `git diff <treeish>`, you should call both\n`git_diff_index_to_tree` and `git_diff_workdir_to_index`, then call\n`git_diff_merge` on the results.  That will yield a `git_diff_list` that\nmatches the git output.\n\nIf this seems confusing, take the case of a file with a staged deletion\nwhere the file has then been put back into the working dir and modified.\nThe tree-to-workdir diff for that file is 'modified', but core git would\nshow status 'deleted' since there is a pending deletion in the index.\n","group":"diff"},"git_diff_merge":{"type":"function","file":"diff.h","line":310,"lineto":312,"args":[{"name":"onto","type":"git_diff_list *","comment":"Diff to merge into."},{"name":"from","type":"const git_diff_list *","comment":"Diff to merge."}],"argline":"git_diff_list *onto,\n\tconst git_diff_list *from","sig":"git_diff_list *::const git_diff_list *","return":{"type":"int"},"description":"Merge one diff list into another.","comments":"This merges items from the \"from\" list into the \"onto\" list.  The\nresulting diff list will have all items that appear in either list.\nIf an item appears in both lists, then it will be \"merged\" to appear\nas if the old version was from the \"onto\" list and the new version\nis from the \"from\" list (with the exception that if the item has a\npending DELETE in the middle, then it will show as deleted).\n","group":"diff","examples":{"diff.c":["ex/HEAD/diff.html#git_diff_merge-12"]}},"git_diff_foreach":{"type":"function","file":"diff.h","line":345,"lineto":350,"args":[{"name":"diff","type":"git_diff_list *","comment":"A git_diff_list generated by one of the above functions."},{"name":"cb_data","type":"void *","comment":"Reference pointer that will be passed to your callbacks."},{"name":"file_cb","type":"git_diff_file_fn","comment":"Callback function to make per file in the diff."},{"name":"hunk_cb","type":"git_diff_hunk_fn","comment":"Optional callback to make per hunk of text diff. This callback is called to describe a range of lines in the diff. It will not be issued for binary files."},{"name":"line_cb","type":"git_diff_data_fn","comment":"Optional callback to make per line of diff text. This same callback will be made for context lines, added, and removed lines, and even for a deleted trailing newline."}],"argline":"git_diff_list *diff,\n\tvoid *cb_data,\n\tgit_diff_file_fn file_cb,\n\tgit_diff_hunk_fn hunk_cb,\n\tgit_diff_data_fn line_cb","sig":"git_diff_list *::void *::git_diff_file_fn::git_diff_hunk_fn::git_diff_data_fn","return":{"type":"int"},"description":"Iterate over a diff list issuing callbacks.","comments":"This will iterate through all of the files described in a diff.  You\nshould provide a file callback to learn about each file.\n\nThe \"hunk\" and \"line\" callbacks are optional, and the text diff of the\nfiles will only be calculated if they are not NULL.  Of course, these\ncallbacks will not be invoked for binary files on the diff list or for\nfiles whose only changed is a file mode change.\n","group":"diff"},"git_diff_print_compact":{"type":"function","file":"diff.h","line":355,"lineto":358,"args":[{"name":"diff","type":"git_diff_list *"},{"name":"cb_data","type":"void *"},{"name":"print_cb","type":"git_diff_data_fn"}],"argline":"git_diff_list *diff,\n\tvoid *cb_data,\n\tgit_diff_data_fn print_cb","sig":"git_diff_list *::void *::git_diff_data_fn","return":{"type":"int"},"description":"Iterate over a diff generating text output like \"git diff --name-status\".","comments":"","group":"diff","examples":{"diff.c":["ex/HEAD/diff.html#git_diff_print_compact-13"]}},"git_diff_print_patch":{"type":"function","file":"diff.h","line":373,"lineto":376,"args":[{"name":"diff","type":"git_diff_list *","comment":"A git_diff_list generated by one of the above functions."},{"name":"cb_data","type":"void *","comment":"Reference pointer that will be passed to your callbacks."},{"name":"print_cb","type":"git_diff_data_fn","comment":"Callback function to output lines of the diff. This same function will be called for file headers, hunk headers, and diff lines. Fortunately, you can probably use various GIT_DIFF_LINE constants to determine what text you are given."}],"argline":"git_diff_list *diff,\n\tvoid *cb_data,\n\tgit_diff_data_fn print_cb","sig":"git_diff_list *::void *::git_diff_data_fn","return":{"type":"int"},"description":"Iterate over a diff generating text output like \"git diff\".","comments":"This is a super easy way to generate a patch from a diff.\n","group":"diff","examples":{"diff.c":["ex/HEAD/diff.html#git_diff_print_patch-14"]}},"git_diff_blobs":{"type":"function","file":"diff.h","line":397,"lineto":406,"args":[{"name":"old_blob","type":"git_blob *"},{"name":"new_blob","type":"git_blob *"},{"name":"options","type":"git_diff_options *"},{"name":"cb_data","type":"void *"},{"name":"file_cb","type":"git_diff_file_fn"},{"name":"hunk_cb","type":"git_diff_hunk_fn"},{"name":"line_cb","type":"git_diff_data_fn"}],"argline":"git_blob *old_blob,\n\tgit_blob *new_blob,\n\tgit_diff_options *options,\n\tvoid *cb_data,\n\tgit_diff_file_fn file_cb,\n\tgit_diff_hunk_fn hunk_cb,\n\tgit_diff_data_fn line_cb","sig":"git_blob *::git_blob *::git_diff_options *::void *::git_diff_file_fn::git_diff_hunk_fn::git_diff_data_fn","return":{"type":"int"},"description":"Directly run a text diff on two blobs.","comments":"Compared to a file, a blob lacks some contextual information. As such,\nthe `git_diff_file` parameters of the callbacks will be filled\naccordingly to the following: `mode` will be set to 0, `path` will be set\nto NULL. When dealing with a NULL blob, `oid` will be set to 0.\n\nWhen at least one of the blobs being dealt with is binary, the\n`git_diff_delta` binary attribute will be set to 1 and no call to the\nhunk_cb nor line_cb will be made.","group":"diff"},"git_tree_lookup":{"type":"function","file":"tree.h","line":32,"lineto":35,"args":[{"name":"tree","type":"git_tree **","comment":"pointer to the looked up tree"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tree."},{"name":"id","type":"const git_oid *","comment":"identity of the tree to locate."}],"argline":"git_tree **tree, git_repository *repo, const git_oid *id","sig":"git_tree **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a tree object from the repository.","comments":"","group":"tree","examples":{"general.c":["ex/HEAD/general.html#git_tree_lookup-41","ex/HEAD/general.html#git_tree_lookup-42"]}},"git_tree_lookup_prefix":{"type":"function","file":"tree.h","line":49,"lineto":56,"args":[{"name":"tree","type":"git_tree **","comment":"pointer to the looked up tree"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tree."},{"name":"id","type":"const git_oid *","comment":"identity of the tree to locate."},{"name":"len","type":"size_t","comment":"the length of the short identifier"}],"argline":"git_tree **tree,\n\tgit_repository *repo,\n\tconst git_oid *id,\n\tsize_t len","sig":"git_tree **::git_repository *::const git_oid *::size_t","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a tree object from the repository,\ngiven a prefix of its identifier (short id).","comments":"@see git_object_lookup_prefix\n","group":"tree"},"git_tree_free":{"type":"function","file":"tree.h","line":69,"lineto":72,"args":[{"name":"tree","type":"git_tree *","comment":"the tree to close"}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"void"},"description":"Close an open tree","comments":"This is a wrapper around git_object_free()\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop\nusing a tree. Failure to do so will cause a memory leak.\n","group":"tree","examples":{"diff.c":["ex/HEAD/diff.html#git_tree_free-15","ex/HEAD/diff.html#git_tree_free-16"]}},"git_tree_entry_free":{"type":"function","file":"tree.h","line":83,"lineto":83,"args":[{"name":"entry","type":"git_tree_entry *","comment":"The entry to free"}],"argline":"git_tree_entry *entry","sig":"git_tree_entry *","return":{"type":"void"},"description":"Free a tree entry","comments":"IMPORTANT: This function is only needed for tree\nentries owned by the user, such as the ones returned\nby `git_tree_entry_dup`.\n","group":"tree"},"git_tree_entry_dup":{"type":"function","file":"tree.h","line":95,"lineto":95,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"A tree entry to duplicate"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"git_tree_entry *","comment":"a copy of the original entry"},"description":"Duplicate a tree entry","comments":"Create a copy of a tree entry. The returned copy is owned\nby the user, and must be freed manually with\n`git_tree_entry_free`.\n","group":"tree"},"git_tree_id":{"type":"function","file":"tree.h","line":103,"lineto":103,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"const git_oid *","comment":"object identity for the tree."},"description":"Get the id of a tree.","comments":"","group":"tree"},"git_tree_entrycount":{"type":"function","file":"tree.h","line":111,"lineto":111,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"unsigned int","comment":"the number of entries in the tree"},"description":"Get the number of entries listed in a tree","comments":"","group":"tree","examples":{"general.c":["ex/HEAD/general.html#git_tree_entrycount-43"]}},"git_tree_entry_byname":{"type":"function","file":"tree.h","line":120,"lineto":120,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."},{"name":"filename","type":"const char *","comment":"the filename of the desired entry"}],"argline":"git_tree *tree, const char *filename","sig":"git_tree *::const char *","return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"Lookup a tree entry by its filename","comments":"","group":"tree","examples":{"general.c":["ex/HEAD/general.html#git_tree_entry_byname-44"]}},"git_tree_entry_byindex":{"type":"function","file":"tree.h","line":129,"lineto":129,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."},{"name":"idx","type":"size_t","comment":"the position in the entry list"}],"argline":"git_tree *tree, size_t idx","sig":"git_tree *::size_t","return":{"type":"const git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"Lookup a tree entry by its position in the tree","comments":"","group":"tree","examples":{"general.c":["ex/HEAD/general.html#git_tree_entry_byindex-45"]}},"git_tree_entry_attributes":{"type":"function","file":"tree.h","line":137,"lineto":137,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"unsigned int","comment":"attributes as an integer"},"description":"Get the UNIX file attributes of a tree entry","comments":"","group":"tree"},"git_tree_entry_name":{"type":"function","file":"tree.h","line":145,"lineto":145,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"const char *","comment":"the name of the file"},"description":"Get the filename of a tree entry","comments":"","group":"tree","examples":{"general.c":["ex/HEAD/general.html#git_tree_entry_name-46","ex/HEAD/general.html#git_tree_entry_name-47"]}},"git_tree_entry_id":{"type":"function","file":"tree.h","line":153,"lineto":153,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"const git_oid *","comment":"the oid of the object"},"description":"Get the id of the object pointed by the entry","comments":"","group":"tree"},"git_tree_entry_type":{"type":"function","file":"tree.h","line":161,"lineto":161,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"git_otype","comment":"the type of the pointed object"},"description":"Get the type of the object pointed by the entry","comments":"","group":"tree"},"git_tree_entry_to_object":{"type":"function","file":"tree.h","line":171,"lineto":174,"args":[{"name":"object_out","type":"git_object **"},{"name":"repo","type":"git_repository *","comment":"repository where to lookup the pointed object"},{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"git_object **object_out,\n\tgit_repository *repo,\n\tconst git_tree_entry *entry","sig":"git_object **::git_repository *::const git_tree_entry *","return":{"type":"int","comment":"0 or an error code"},"description":"Convert a tree entry to the git_object it points too.","comments":"","group":"tree","examples":{"general.c":["ex/HEAD/general.html#git_tree_entry_to_object-48"]}},"git_tree_create_fromindex":{"type":"function","file":"tree.h","line":192,"lineto":192,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the written tree"},{"name":"index","type":"git_index *","comment":"Index to write"}],"argline":"git_oid *oid, git_index *index","sig":"git_oid *::git_index *","return":{"type":"int","comment":"0 or an error code"},"description":"Write a tree to the ODB from the index file","comments":"This method will scan the index and write a representation\nof its current state back to disk; it recursively creates\ntree objects for each of the subtrees stored in the index,\nbut only returns the OID of the root tree. This is the OID\nthat can be used e.g. to create a commit.\n\nThe index instance cannot be bare, and needs to be associated\nto an existing repository.\n","group":"tree"},"git_treebuilder_create":{"type":"function","file":"tree.h","line":211,"lineto":211,"args":[{"name":"builder_p","type":"git_treebuilder **","comment":"Pointer where to store the tree builder"},{"name":"source","type":"const git_tree *","comment":"Source tree to initialize the builder (optional)"}],"argline":"git_treebuilder **builder_p, const git_tree *source","sig":"git_treebuilder **::const git_tree *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new tree builder.","comments":"The tree builder can be used to create or modify\ntrees in memory and write them as tree objects to the\ndatabase.\n\nIf the `source` parameter is not NULL, the tree builder\nwill be initialized with the entries of the given tree.\n\nIf the `source` parameter is NULL, the tree builder will\nhave no entries and will have to be filled manually.\n","group":"treebuilder"},"git_treebuilder_clear":{"type":"function","file":"tree.h","line":218,"lineto":218,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Builder to clear"}],"argline":"git_treebuilder *bld","sig":"git_treebuilder *","return":{"type":"void"},"description":"Clear all the entires in the builder","comments":"","group":"treebuilder"},"git_treebuilder_free":{"type":"function","file":"tree.h","line":229,"lineto":229,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Builder to free"}],"argline":"git_treebuilder *bld","sig":"git_treebuilder *","return":{"type":"void"},"description":"Free a tree builder","comments":"This will clear all the entries and free to builder.\nFailing to free the builder after you're done using it\nwill result in a memory leak\n","group":"treebuilder"},"git_treebuilder_get":{"type":"function","file":"tree.h","line":241,"lineto":241,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Name of the entry"}],"argline":"git_treebuilder *bld, const char *filename","sig":"git_treebuilder *::const char *","return":{"type":"const git_tree_entry *","comment":"pointer to the entry; NULL if not found"},"description":"Get an entry from the builder from its filename","comments":"The returned entry is owned by the builder and should\nnot be freed manually.\n","group":"treebuilder"},"git_treebuilder_insert":{"type":"function","file":"tree.h","line":262,"lineto":267,"args":[{"name":"entry_out","type":"const git_tree_entry **","comment":"Pointer to store the entry (optional)"},{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Filename of the entry"},{"name":"id","type":"const git_oid *","comment":"SHA1 oid of the entry"},{"name":"attributes","type":"unsigned int","comment":"Folder attributes of the entry"}],"argline":"const git_tree_entry **entry_out,\n\tgit_treebuilder *bld,\n\tconst char *filename,\n\tconst git_oid *id,\n\tunsigned int attributes","sig":"const git_tree_entry **::git_treebuilder *::const char *::const git_oid *::unsigned int","return":{"type":"int","comment":"0 or an error code"},"description":"Add or update an entry to the builder","comments":"Insert a new entry for `filename` in the builder with the\ngiven attributes.\n\nif an entry named `filename` already exists, its attributes\nwill be updated with the given ones.\n\nThe optional pointer `entry_out` can be used to retrieve a\npointer to the newly created/updated entry.\n","group":"treebuilder"},"git_treebuilder_remove":{"type":"function","file":"tree.h","line":275,"lineto":275,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Filename of the entry to remove"}],"argline":"git_treebuilder *bld, const char *filename","sig":"git_treebuilder *::const char *","return":{"type":"int"},"description":"Remove an entry from the builder by its filename","comments":"","group":"treebuilder"},"git_treebuilder_filter":{"type":"function","file":"tree.h","line":288,"lineto":291,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filter","type":"int (*)(const git_tree_entry *, void *)","comment":"Callback to filter entries"},{"name":"payload","type":"void *"}],"argline":"git_treebuilder *bld,\n\tint (*filter)(const git_tree_entry *, void *),\n\tvoid *payload","sig":"git_treebuilder *::int (*)(const git_tree_entry *, void *)::void *","return":{"type":"void"},"description":"Filter the entries in the tree","comments":"The `filter` callback will be called for each entry\nin the tree with a pointer to the entry and the\nprovided `payload`: if the callback returns 1, the\nentry will be filtered (removed from the builder).\n","group":"treebuilder"},"git_treebuilder_write":{"type":"function","file":"tree.h","line":305,"lineto":305,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the written OID"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the object"},{"name":"bld","type":"git_treebuilder *","comment":"Tree builder to write"}],"argline":"git_oid *oid, git_repository *repo, git_treebuilder *bld","sig":"git_oid *::git_repository *::git_treebuilder *","return":{"type":"int","comment":"0 or an error code"},"description":"Write the contents of the tree builder as a tree object","comments":"The tree builder will be written to the given `repo`, and\nit's identifying SHA1 hash will be stored in the `oid`\npointer.\n","group":"treebuilder"},"git_tree_entry_bypath":{"type":"function","file":"tree.h","line":319,"lineto":322,"args":[{"name":"entry","type":"git_tree_entry **","comment":"Pointer where to store the tree entry"},{"name":"root","type":"git_tree *","comment":"A previously loaded tree which will be the root of the relative path"},{"name":"path","type":"const char *"}],"argline":"git_tree_entry **entry,\n\tgit_tree *root,\n\tconst char *path","sig":"git_tree_entry **::git_tree *::const char *","return":{"type":"int","comment":"0 on success; GIT_ENOTFOUND if the path does not exist"},"description":"Retrieve a tree entry contained in a tree or in any\nof its subtrees, given its relative path.","comments":"The returned tree entry is owned by the user and must\nbe freed manually with `git_tree_entry_free`.\n","group":"tree"},"git_tree_walk":{"type":"function","file":"tree.h","line":352,"lineto":352,"args":[{"name":"tree","type":"git_tree *","comment":"The tree to walk"},{"name":"callback","type":"git_treewalk_cb","comment":"Function to call on each tree entry"},{"name":"mode","type":"int","comment":"Traversal mode (pre or post-order)"},{"name":"payload","type":"void *","comment":"Opaque pointer to be passed on each callback"}],"argline":"git_tree *tree, git_treewalk_cb callback, int mode, void *payload","sig":"git_tree *::git_treewalk_cb::int::void *","return":{"type":"int","comment":"0 or an error code"},"description":"Traverse the entries in a tree and its subtrees in\npost or pre order","comments":"The entries will be traversed in the specified order,\nchildren subtrees will be automatically loaded as required,\nand the `callback` will be called once per entry with\nthe current (relative) root for the entry and the entry\ndata itself.\n\nIf the callback returns a negative value, the passed entry\nwill be skipped on the traversal.\n","group":"tree"},"git_submodule_foreach":{"type":"function","file":"submodule.h","line":78,"lineto":81,"args":[{"name":"repo","type":"git_repository *","comment":"The repository"},{"name":"callback","type":"int (*)(const char *name, void *payload)","comment":"Function to be called with the name of each submodule. Return a non-zero value to terminate the iteration."},{"name":"payload","type":"void *","comment":"Extra data to pass to callback"}],"argline":"git_repository *repo,\n\tint (*callback)(const char *name, void *payload),\n\tvoid *payload","sig":"git_repository *::int (*)(const char *name, void *payload)::void *","return":{"type":"int","comment":"0 on success, -1 on error, or non-zero return value of callback"},"description":"Iterate over all submodules of a repository.","comments":"","group":"submodule"},"git_submodule_lookup":{"type":"function","file":"submodule.h","line":96,"lineto":99,"args":[{"name":"submodule","type":"git_submodule **","comment":"Pointer to submodule description object pointer.."},{"name":"repo","type":"git_repository *","comment":"The repository."},{"name":"name","type":"const char *","comment":"The name of the submodule. Trailing slashes will be ignored."}],"argline":"git_submodule **submodule,\n\tgit_repository *repo,\n\tconst char *name","sig":"git_submodule **::git_repository *::const char *","return":{"type":"int","comment":"0 on success, GIT_ENOTFOUND if submodule does not exist, -1 on error"},"description":"Lookup submodule information by name or path.","comments":"Given either the submodule name or path (they are usually the same),\nthis returns a structure describing the submodule.  If the submodule\ndoes not exist, this will return GIT_ENOTFOUND and set the submodule\npointer to NULL.\n","group":"submodule"},"git_message_prettify":{"type":"function","file":"message.h","line":37,"lineto":37,"args":[{"name":"message_out","type":"char *","comment":"The user allocated buffer which will be filled with the cleaned up message."},{"name":"buffer_size","type":"size_t"},{"name":"message","type":"const char *","comment":"_out The user allocated buffer which will be filled with the cleaned up message."},{"name":"strip_comments","type":"int","comment":"1 to remove lines starting with a \"#\", 0 otherwise."}],"argline":"char *message_out, size_t buffer_size, const char *message, int strip_comments","sig":"char *::size_t::const char *::int","return":{"type":"int","comment":"GIT_SUCCESS or an error code"},"description":"Clean up message from excess whitespace and make sure that the last line\nends with a '\\n'.","comments":"Optionally, can remove lines starting with a \"#\".\n","group":"message"},"git_odb_new":{"type":"function","file":"odb.h","line":34,"lineto":34,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened. Set to NULL if the open failed."}],"argline":"git_odb **out","sig":"git_odb **","return":{"type":"int","comment":"0 or an error code"},"description":"Create a new object database with no backends.","comments":"Before the ODB can be used for read/writing, a custom database\nbackend must be manually added using `git_odb_add_backend()`\n","group":"odb"},"git_odb_open":{"type":"function","file":"odb.h","line":52,"lineto":52,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened. Set to NULL if the open failed."},{"name":"objects_dir","type":"const char *","comment":"path of the backends' \"objects\" directory."}],"argline":"git_odb **out, const char *objects_dir","sig":"git_odb **::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Create a new object database and automatically add\nthe two default backends:","comments":"- git_odb_backend_loose: read and write loose object files\n\tfrom disk, assuming `objects_dir` as the Objects folder\n\n- git_odb_backend_pack: read objects from packfiles,\n\tassuming `objects_dir` as the Objects folder which\n\tcontains a 'pack/' folder with the corresponding data\n","group":"odb"},"git_odb_add_backend":{"type":"function","file":"odb.h","line":67,"lineto":67,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"backend","type":"git_odb_backend *","comment":"pointer to a git_odb_backend instance"},{"name":"priority","type":"int","comment":"Value for ordering the backends queue"}],"argline":"git_odb *odb, git_odb_backend *backend, int priority","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Add a custom backend to an existing Object DB","comments":"The backends are checked in relative ordering, based on the\nvalue of the `priority` parameter.\n\nRead <odb_backends.h> for more information.\n","group":"odb"},"git_odb_add_alternate":{"type":"function","file":"odb.h","line":88,"lineto":88,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"backend","type":"git_odb_backend *","comment":"pointer to a git_odb_backend instance"},{"name":"priority","type":"int","comment":"Value for ordering the backends queue"}],"argline":"git_odb *odb, git_odb_backend *backend, int priority","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Add a custom backend to an existing Object DB; this\nbackend will work as an alternate.","comments":"Alternate backends are always checked for objects *after*\nall the main backends have been exhausted.\n\nThe backends are checked in relative ordering, based on the\nvalue of the `priority` parameter.\n\nWriting is disabled on alternate backends.\n\nRead <odb_backends.h> for more information.\n","group":"odb"},"git_odb_free":{"type":"function","file":"odb.h","line":95,"lineto":95,"args":[{"name":"db","type":"git_odb *","comment":"database pointer to close. If NULL no action is taken."}],"argline":"git_odb *db","sig":"git_odb *","return":{"type":"void"},"description":"Close an open object database.","comments":"","group":"odb"},"git_odb_read":{"type":"function","file":"odb.h","line":114,"lineto":114,"args":[{"name":"out","type":"git_odb_object **","comment":"pointer where to store the read object"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_odb_object **out, git_odb *db, const git_oid *id","sig":"git_odb_object **::git_odb *::const git_oid *","return":{"type":"int","comment":"- 0 if the object was read; - GIT_ENOTFOUND if the object is not in the database."},"description":"Read an object from the database.","comments":"This method queries all available ODB backends\ntrying to read the given OID.\n\nThe returned object is reference counted and\ninternally cached, so it should be closed\nby the user once it's no longer in use.\n","group":"odb","examples":{"general.c":["ex/HEAD/general.html#git_odb_read-49"]}},"git_odb_read_prefix":{"type":"function","file":"odb.h","line":142,"lineto":142,"args":[{"name":"out","type":"git_odb_object **","comment":"pointer where to store the read object"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"short_id","type":"const git_oid *","comment":"a prefix of the id of the object to read."},{"name":"len","type":"size_t","comment":"the length of the prefix"}],"argline":"git_odb_object **out, git_odb *db, const git_oid *short_id, size_t len","sig":"git_odb_object **::git_odb *::const git_oid *::size_t","return":{"type":"int","comment":"0 if the object was read; GIT_ENOTFOUND if the object is not in the database. GIT_EAMBIGUOUS if the prefix is ambiguous (several objects match the prefix)"},"description":"Read an object from the database, given a prefix\nof its identifier.","comments":"This method queries all available ODB backends\ntrying to match the 'len' first hexadecimal\ncharacters of the 'short_id'.\nThe remaining (GIT_OID_HEXSZ-len)*4 bits of\n'short_id' must be 0s.\n'len' must be at least GIT_OID_MINPREFIXLEN,\nand the prefix must be long enough to identify\na unique object in all the backends; the\nmethod will fail otherwise.\n\nThe returned object is reference counted and\ninternally cached, so it should be closed\nby the user once it's no longer in use.\n","group":"odb"},"git_odb_read_header":{"type":"function","file":"odb.h","line":162,"lineto":162,"args":[{"name":"len_p","type":"size_t *","comment":"pointer where to store the length"},{"name":"type_p","type":"git_otype *","comment":"pointer where to store the type"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id","sig":"size_t *::git_otype *::git_odb *::const git_oid *","return":{"type":"int","comment":"- 0 if the object was read; - GIT_ENOTFOUND if the object is not in the database."},"description":"Read the header of an object from the database, without\nreading its full contents.","comments":"The header includes the length and the type of an object.\n\nNote that most backends do not support reading only the header\nof an object, so the whole object will be read and then the\nheader will be returned.\n","group":"odb"},"git_odb_exists":{"type":"function","file":"odb.h","line":173,"lineto":173,"args":[{"name":"db","type":"git_odb *","comment":"database to be searched for the given object."},{"name":"id","type":"const git_oid *","comment":"the object to search for."}],"argline":"git_odb *db, const git_oid *id","sig":"git_odb *::const git_oid *","return":{"type":"int","comment":"- 1, if the object was found - 0, otherwise"},"description":"Determine if the given object can be found in the object database.","comments":"","group":"odb"},"git_odb_foreach":{"type":"function","file":"odb.h","line":187,"lineto":187,"args":[{"name":"db","type":"git_odb *","comment":"database to use"},{"name":"cb","type":"int (*)(git_oid *oid, void *data)","comment":"the callback to call for each object"},{"name":"data","type":"void *","comment":"data to pass to the callback"}],"argline":"git_odb *db, int (*cb)(git_oid *oid, void *data), void *data","sig":"git_odb *::int (*)(git_oid *oid, void *data)::void *","return":{"type":"int"},"description":"List all objects available in the database","comments":"The callback will be called for each object available in the\ndatabase. Note that the objects are likely to be returned in the\nindex order, which would make accessing the objects in that order\ninefficient.\n","group":"odb"},"git_odb_write":{"type":"function","file":"odb.h","line":207,"lineto":207,"args":[{"name":"oid","type":"git_oid *","comment":"pointer to store the OID result of the write"},{"name":"odb","type":"git_odb *","comment":"object database where to store the object"},{"name":"data","type":"const void *","comment":"buffer with the data to store"},{"name":"len","type":"size_t","comment":"size of the buffer"},{"name":"type","type":"git_otype","comment":"type of the data to store"}],"argline":"git_oid *oid, git_odb *odb, const void *data, size_t len, git_otype type","sig":"git_oid *::git_odb *::const void *::size_t::git_otype","return":{"type":"int","comment":"0 or an error code"},"description":"Write an object directly into the ODB","comments":"This method writes a full object straight into the ODB.\nFor most cases, it is preferred to write objects through a write\nstream, which is both faster and less memory intensive, specially\nfor big objects.\n\nThis method is provided for compatibility with custom backends\nwhich are not able to support streaming writes\n","group":"odb","examples":{"general.c":["ex/HEAD/general.html#git_odb_write-50"]}},"git_odb_open_wstream":{"type":"function","file":"odb.h","line":236,"lineto":236,"args":[{"name":"stream","type":"git_odb_stream **","comment":"pointer where to store the stream"},{"name":"db","type":"git_odb *","comment":"object database where the stream will write"},{"name":"size","type":"size_t","comment":"final size of the object that will be written"},{"name":"type","type":"git_otype","comment":"type of the object that will be written"}],"argline":"git_odb_stream **stream, git_odb *db, size_t size, git_otype type","sig":"git_odb_stream **::git_odb *::size_t::git_otype","return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"description":"Open a stream to write an object into the ODB","comments":"The type and final length of the object must be specified\nwhen opening the stream.\n\nThe returned stream will be of type `GIT_STREAM_WRONLY` and\nwill have the following methods:\n\n\t- stream->write: write `n` bytes into the stream\n\t- stream->finalize_write: close the stream and store the object in\n\t\tthe odb\n\t- stream->free: free the stream\n\nThe streaming write won't be effective until `stream->finalize_write`\nis called and returns without an error\n\nThe stream must always be free'd or will leak memory.\n\n@see git_odb_stream\n","group":"odb"},"git_odb_open_rstream":{"type":"function","file":"odb.h","line":262,"lineto":262,"args":[{"name":"stream","type":"git_odb_stream **","comment":"pointer where to store the stream"},{"name":"db","type":"git_odb *","comment":"object database where the stream will read from"},{"name":"oid","type":"const git_oid *","comment":"oid of the object the stream will read from"}],"argline":"git_odb_stream **stream, git_odb *db, const git_oid *oid","sig":"git_odb_stream **::git_odb *::const git_oid *","return":{"type":"int","comment":"0 if the stream was created; error code otherwise"},"description":"Open a stream to read an object from the ODB","comments":"Note that most backends do *not* support streaming reads\nbecause they store their objects as compressed/delta'ed blobs.\n\nIt's recommended to use `git_odb_read` instead, which is\nassured to work on all backends.\n\nThe returned stream will be of type `GIT_STREAM_RDONLY` and\nwill have the following methods:\n\n\t- stream->read: read `n` bytes from the stream\n\t- stream->free: free the stream\n\nThe stream must always be free'd or will leak memory.\n\n@see git_odb_stream\n","group":"odb"},"git_odb_hash":{"type":"function","file":"odb.h","line":276,"lineto":276,"args":[{"name":"id","type":"git_oid *","comment":"the resulting object-ID."},{"name":"data","type":"const void *","comment":"data to hash"},{"name":"len","type":"size_t","comment":"size of the data"},{"name":"type","type":"git_otype","comment":"of the data to hash"}],"argline":"git_oid *id, const void *data, size_t len, git_otype type","sig":"git_oid *::const void *::size_t::git_otype","return":{"type":"int","comment":"0 or an error code"},"description":"Determine the object-ID (sha1 hash) of a data buffer","comments":"The resulting SHA-1 OID will be the identifier for the data\nbuffer as if the data buffer it were to written to the ODB.\n","group":"odb"},"git_odb_hashfile":{"type":"function","file":"odb.h","line":289,"lineto":289,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"path","type":"const char *","comment":"file to read and determine object id for"},{"name":"type","type":"git_otype","comment":"the type of the object that will be hashed"}],"argline":"git_oid *out, const char *path, git_otype type","sig":"git_oid *::const char *::git_otype","return":{"type":"int","comment":"0 or an error code"},"description":"Read a file from disk and fill a git_oid with the object id\nthat the file would have if it were written to the Object\nDatabase as an object of the given type. Similar functionality\nto git.git's `git hash-object` without the `-w` flag.","comments":"","group":"odb"},"git_odb_object_free":{"type":"function","file":"odb.h","line":299,"lineto":299,"args":[{"name":"object","type":"git_odb_object *","comment":"object to close"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"void"},"description":"Close an ODB object","comments":"This method must always be called once a `git_odb_object` is no\nlonger needed, otherwise memory will leak.\n","group":"odb","examples":{"general.c":["ex/HEAD/general.html#git_odb_object_free-51"]}},"git_odb_object_id":{"type":"function","file":"odb.h","line":309,"lineto":309,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"const git_oid *","comment":"a pointer to the OID"},"description":"Return the OID of an ODB object","comments":"This is the OID from which the object was read from\n","group":"odb"},"git_odb_object_data":{"type":"function","file":"odb.h","line":322,"lineto":322,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"const void *","comment":"a pointer to the data"},"description":"Return the data of an ODB object","comments":"This is the uncompressed, raw data as read from the ODB,\nwithout the leading header.\n\nThis pointer is owned by the object and shall not be free'd.\n","group":"odb","examples":{"general.c":["ex/HEAD/general.html#git_odb_object_data-52"]}},"git_odb_object_size":{"type":"function","file":"odb.h","line":333,"lineto":333,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"size_t","comment":"the size"},"description":"Return the size of an ODB object","comments":"This is the real size of the `data` buffer, not the\nactual size of the object.\n","group":"odb","examples":{"general.c":["ex/HEAD/general.html#git_odb_object_size-53"]}},"git_odb_object_type":{"type":"function","file":"odb.h","line":341,"lineto":341,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"git_otype","comment":"the type"},"description":"Return the type of an ODB object","comments":"","group":"odb","examples":{"general.c":["ex/HEAD/general.html#git_odb_object_type-54"]}},"git_threads_init":{"type":"function","file":"threads.h","line":31,"lineto":31,"args":[],"argline":"void","sig":"","return":{"type":"void"},"description":"Init the threading system.","comments":"If libgit2 has been built with GIT_THREADS\non, this function must be called once before\nany other library functions.\n\nIf libgit2 has been built without GIT_THREADS\nsupport, this function is a no-op.","group":"threads"},"git_threads_shutdown":{"type":"function","file":"threads.h","line":43,"lineto":43,"args":[],"argline":"void","sig":"","return":{"type":"void"},"description":"Shutdown the threading system.","comments":"If libgit2 has been built with GIT_THREADS\non, this function must be called before shutting\ndown the library.\n\nIf libgit2 has been built without GIT_THREADS\nsupport, this function is a no-op.","group":"threads"},"git_oid_fromstr":{"type":"function","file":"oid.h","line":48,"lineto":48,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes)."}],"argline":"git_oid *out, const char *str","sig":"git_oid *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Parse a hex formatted object id into a git_oid.","comments":"","group":"oid","examples":{"general.c":["ex/HEAD/general.html#git_oid_fromstr-55","ex/HEAD/general.html#git_oid_fromstr-56","ex/HEAD/general.html#git_oid_fromstr-57","ex/HEAD/general.html#git_oid_fromstr-58","ex/HEAD/general.html#git_oid_fromstr-59","ex/HEAD/general.html#git_oid_fromstr-60","ex/HEAD/general.html#git_oid_fromstr-61","ex/HEAD/general.html#git_oid_fromstr-62"]}},"git_oid_fromstrn":{"type":"function","file":"oid.h","line":61,"lineto":61,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string of at least size `length`"},{"name":"length","type":"size_t","comment":"length of the input string"}],"argline":"git_oid *out, const char *str, size_t length","sig":"git_oid *::const char *::size_t","return":{"type":"int","comment":"0 or an error code"},"description":"Parse N characters of a hex formatted object id into a git_oid","comments":"If N is odd, N-1 characters will be parsed instead.\nThe remaining space in the git_oid will be set to zero.\n","group":"oid","examples":{"diff.c":["ex/HEAD/diff.html#git_oid_fromstrn-17"]}},"git_oid_fromraw":{"type":"function","file":"oid.h","line":69,"lineto":69,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"raw","type":"const unsigned char *","comment":"the raw input bytes to be copied."}],"argline":"git_oid *out, const unsigned char *raw","sig":"git_oid *::const unsigned char *","return":{"type":"void"},"description":"Copy an already raw oid into a git_oid structure.","comments":"","group":"oid"},"git_oid_fmt":{"type":"function","file":"oid.h","line":81,"lineto":81,"args":[{"name":"str","type":"char *","comment":"output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required."},{"name":"oid","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *str, const git_oid *oid","sig":"char *::const git_oid *","return":{"type":"void"},"description":"Format a git_oid into a hex string.","comments":"","group":"oid","examples":{"showindex.c":["ex/HEAD/showindex.html#git_oid_fmt-8"],"general.c":["ex/HEAD/general.html#git_oid_fmt-63","ex/HEAD/general.html#git_oid_fmt-64","ex/HEAD/general.html#git_oid_fmt-65","ex/HEAD/general.html#git_oid_fmt-66","ex/HEAD/general.html#git_oid_fmt-67"],"network/ls-remote.c":["ex/HEAD/ls-remote.html#git_oid_fmt-10"],"network/index-pack.c":["ex/HEAD/index-pack.html#git_oid_fmt-6"],"network/fetch.c":["ex/HEAD/fetch.html#git_oid_fmt-10","ex/HEAD/fetch.html#git_oid_fmt-11"]}},"git_oid_pathfmt":{"type":"function","file":"oid.h","line":96,"lineto":96,"args":[{"name":"str","type":"char *","comment":"output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (41 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required."},{"name":"oid","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *str, const git_oid *oid","sig":"char *::const git_oid *","return":{"type":"void"},"description":"Format a git_oid into a loose-object path string.","comments":"The resulting string is \"aa/...\", where \"aa\" is the first two\nhex digits of the oid and \"...\" is the remaining 38 digits.\n","group":"oid"},"git_oid_allocfmt":{"type":"function","file":"oid.h","line":105,"lineto":105,"args":[{"name":"oid","type":"const git_oid *","comment":"the oid structure to format"}],"argline":"const git_oid *oid","sig":"const git_oid *","return":{"type":"char *","comment":"the c-string; NULL if memory is exhausted. Caller must deallocate the string with git__free()."},"description":"Format a git_oid into a newly allocated c-string.","comments":"","group":"oid"},"git_oid_tostr":{"type":"function","file":"oid.h","line":122,"lineto":122,"args":[{"name":"out","type":"char *","comment":"the buffer into which the oid string is output."},{"name":"n","type":"size_t","comment":"the size of the out buffer."},{"name":"oid","type":"const git_oid *","comment":"the oid structure to format."}],"argline":"char *out, size_t n, const git_oid *oid","sig":"char *::size_t::const git_oid *","return":{"type":"char *","comment":"the out buffer pointer, assuming no input parameter errors, otherwise a pointer to an empty string."},"description":"Format a git_oid into a buffer as a hex format c-string.","comments":"If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\noid c-string will be truncated to n-1 characters. If there are\nany input parameter errors (out == NULL, n == 0, oid == NULL),\nthen a pointer to an empty string is returned, so that the return\nvalue can always be printed.\n","group":"oid"},"git_oid_cpy":{"type":"function","file":"oid.h","line":130,"lineto":130,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"src","type":"const git_oid *","comment":"oid structure to copy from."}],"argline":"git_oid *out, const git_oid *src","sig":"git_oid *::const git_oid *","return":{"type":"void"},"description":"Copy an oid from one structure to another.","comments":"","group":"oid"},"git_oid_cmp":{"type":"function","file":"oid.h","line":139,"lineto":151,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."}],"argline":"const git_oid *a, const git_oid *b","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":"<0, 0, >0 if a < b, a == b, a > b."},"description":"Compare two oid structures.","comments":"","group":"oid"},"git_oid_equal":{"type":"function","file":"oid.h","line":160,"lineto":163,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."}],"argline":"const git_oid *a, const git_oid *b","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":"true if equal, false otherwise"},"description":"Compare two oid structures for equality","comments":"","group":"oid"},"git_oid_ncmp":{"type":"function","file":"oid.h","line":174,"lineto":174,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."},{"name":"len","type":"size_t","comment":"the number of hex chars to compare"}],"argline":"const git_oid *a, const git_oid *b, size_t len","sig":"const git_oid *::const git_oid *::size_t","return":{"type":"int","comment":"0 in case of a match"},"description":"Compare the first 'len' hexadecimal characters (packets of 4 bits)\nof two oid structures.","comments":"","group":"oid"},"git_oid_streq":{"type":"function","file":"oid.h","line":184,"lineto":184,"args":[{"name":"a","type":"const git_oid *","comment":"oid structure."},{"name":"str","type":"const char *","comment":"input hex string of an object id."}],"argline":"const git_oid *a, const char *str","sig":"const git_oid *::const char *","return":{"type":"int","comment":"GIT_ENOTOID if str is not a valid hex string, 0 in case of a match, GIT_ERROR otherwise."},"description":"Check if an oid equals an hex formatted object id.","comments":"","group":"oid"},"git_oid_iszero":{"type":"function","file":"oid.h","line":189,"lineto":189,"args":[{"name":"a","type":"const git_oid *"}],"argline":"const git_oid *a","sig":"const git_oid *","return":{"type":"int"},"description":"Check is an oid is all zeros.","comments":"","group":"oid","examples":{"network/fetch.c":["ex/HEAD/fetch.html#git_oid_iszero-12"]}},"git_oid_shorten_new":{"type":"function","file":"oid.h","line":210,"lineto":210,"args":[{"name":"min_length","type":"size_t","comment":"The minimal length for all identifiers, which will be used even if shorter OIDs would still be unique."}],"argline":"size_t min_length","sig":"size_t","return":{"type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance, NULL if OOM"},"description":"Create a new OID shortener.","comments":"The OID shortener is used to process a list of OIDs\nin text form and return the shortest length that would\nuniquely identify all of them.\n\nE.g. look at the result of `git log --abbrev`.\n","group":"oid"},"git_oid_shorten_add":{"type":"function","file":"oid.h","line":236,"lineto":236,"args":[{"name":"os","type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance"},{"name":"text_oid","type":"const char *","comment":"an OID in text form"}],"argline":"git_oid_shorten *os, const char *text_oid","sig":"git_oid_shorten *::const char *","return":{"type":"int","comment":"the minimal length to uniquely identify all OIDs added so far to the set; or an error code (<0) if an error occurs."},"description":"Add a new OID to set of shortened OIDs and calculate\nthe minimal length to uniquely identify all the OIDs in\nthe set.","comments":"The OID is expected to be a 40-char hexadecimal string.\nThe OID is owned by the user and will not be modified\nor freed.\n\nFor performance reasons, there is a hard-limit of how many\nOIDs can be added to a single set (around ~22000, assuming\na mostly randomized distribution), which should be enough\nfor any kind of program, and keeps the algorithm fast and\nmemory-efficient.\n\nAttempting to add more than those OIDs will result in a\nGIT_ENOMEM error\n","group":"oid"},"git_oid_shorten_free":{"type":"function","file":"oid.h","line":243,"lineto":243,"args":[{"name":"os","type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance"}],"argline":"git_oid_shorten *os","sig":"git_oid_shorten *","return":{"type":"void"},"description":"Free an OID shortener instance","comments":"","group":"oid"},"git_attr_get":{"type":"function","file":"attr.h","line":142,"lineto":147,"args":[{"name":"value_out","type":"const char **","comment":"Output of the value of the attribute. Use the GIT_ATTR_... macros to test for TRUE, FALSE, UNSPECIFIED, etc. or just use the string value for attributes set to a value. You should NOT modify or free this value."},{"name":"repo","type":"git_repository *","comment":"The repository containing the path."},{"name":"flags","type":"uint32_t","comment":"A combination of GIT_ATTR_CHECK... flags."},{"name":"path","type":"const char *","comment":"The path to check for attributes. Relative paths are interpreted relative to the repo root. The file does not have to exist, but if it does not, then it will be treated as a plain file (not a directory)."},{"name":"name","type":"const char *","comment":"The name of the attribute to look up."}],"argline":"const char **value_out,\n    git_repository *repo,\n\tuint32_t flags,\n\tconst char *path,\n\tconst char *name","sig":"const char **::git_repository *::uint32_t::const char *::const char *","return":{"type":"int"},"description":"Look up the value of one git attribute for path.","comments":"","group":"attr"},"git_attr_get_many":{"type":"function","file":"attr.h","line":178,"lineto":184,"args":[{"name":"values_out","type":"const char **"},{"name":"repo","type":"git_repository *","comment":"The repository containing the path."},{"name":"flags","type":"uint32_t","comment":"A combination of GIT_ATTR_CHECK... flags."},{"name":"path","type":"const char *","comment":"The path inside the repo to check attributes. This does not have to exist, but if it does not, then it will be treated as a plain file (i.e. not a directory)."},{"name":"num_attr","type":"size_t","comment":"The number of attributes being looked up"},{"name":"names","type":"const char **","comment":"An array of num_attr strings containing attribute names."}],"argline":"const char **values_out,\n\tgit_repository *repo,\n\tuint32_t flags,\n\tconst char *path,\n\tsize_t num_attr,\n\tconst char **names","sig":"const char **::git_repository *::uint32_t::const char *::size_t::const char **","return":{"type":"int"},"description":"Look up a list of git attributes for path.","comments":"Use this if you have a known list of attributes that you want to\nlook up in a single call.  This is somewhat more efficient than\ncalling `git_attr_get()` multiple times.\n\nFor example, you might write:\n\n    const char *attrs[] = { \"crlf\", \"diff\", \"foo\" };\n    const char **values[3];\n    git_attr_get_many(values, repo, 0, \"my/fun/file.c\", 3, attrs);\n\nThen you could loop through the 3 values to get the settings for\nthe three attributes you asked about.\n","group":"attr"},"git_attr_foreach":{"type":"function","file":"attr.h","line":204,"lineto":209,"args":[{"name":"repo","type":"git_repository *","comment":"The repository containing the path."},{"name":"flags","type":"uint32_t","comment":"A combination of GIT_ATTR_CHECK... flags."},{"name":"path","type":"const char *","comment":"The path inside the repo to check attributes. This does not have to exist, but if it does not, then it will be treated as a plain file (i.e. not a directory)."},{"name":"callback","type":"int (*)(const char *name, const char *value, void *payload)","comment":"The function that will be invoked on each attribute and attribute value. The name parameter will be the name of the attribute and the value will be the value it is set to, including possibly NULL if the attribute is explicitly set to UNSPECIFIED using the ! sign. This will be invoked only once per attribute name, even if there are multiple rules for a given file. The highest priority rule will be used."},{"name":"payload","type":"void *","comment":"Passed on as extra parameter to callback function."}],"argline":"git_repository *repo,\n\tuint32_t flags,\n\tconst char *path,\n\tint (*callback)(const char *name, const char *value, void *payload),\n\tvoid *payload","sig":"git_repository *::uint32_t::const char *::int (*)(const char *name, const char *value, void *payload)::void *","return":{"type":"int"},"description":"Loop over all the git attributes for a path.","comments":"","group":"attr"},"git_attr_cache_flush":{"type":"function","file":"attr.h","line":219,"lineto":220,"args":[{"name":"repo","type":"git_repository *"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"void"},"description":"Flush the gitattributes cache.","comments":"Call this if you have reason to believe that the attributes files on\ndisk no longer match the cached contents of memory.  This will cause\nthe attributes files to be reloaded the next time that an attribute\naccess function is called.","group":"attr"},"git_attr_add_macro":{"type":"function","file":"attr.h","line":232,"lineto":235,"args":[{"name":"repo","type":"git_repository *"},{"name":"name","type":"const char *"},{"name":"values","type":"const char *"}],"argline":"git_repository *repo,\n\tconst char *name,\n\tconst char *values","sig":"git_repository *::const char *::const char *","return":{"type":"int"},"description":"Add a macro definition.","comments":"Macros will automatically be loaded from the top level `.gitattributes`\nfile of the repository (plus the build-in \"binary\" macro).  This\nfunction allows you to add others.  For example, to add the default\nmacro, you would call:\n\n   git_attr_add_macro(repo, \"binary\", \"-diff -crlf\");","group":"attr"},"giterr_last":{"type":"function","file":"errors.h","line":64,"lineto":64,"args":[],"argline":"void","sig":"","return":{"type":"const git_error *","comment":"A git_error object."},"description":"Return the last `git_error` object that was generated for the\ncurrent thread or NULL if no error has occurred.","comments":"","group":"giterr","examples":{"network/git2.c":["ex/HEAD/git2.html#giterr_last-3","ex/HEAD/git2.html#giterr_last-4"]}},"giterr_clear":{"type":"function","file":"errors.h","line":69,"lineto":69,"args":[],"argline":"void","sig":"","return":{"type":"void"},"description":"Clear the last library error that occurred for this thread.","comments":"","group":"giterr"},"git_revwalk_new":{"type":"function","file":"revwalk.h","line":70,"lineto":70,"args":[{"name":"walker","type":"git_revwalk **","comment":"pointer to the new revision walker"},{"name":"repo","type":"git_repository *","comment":"the repo to walk through"}],"argline":"git_revwalk **walker, git_repository *repo","sig":"git_revwalk **::git_repository *","return":{"type":"int","comment":"0 or an error code"},"description":"Allocate a new revision walker to iterate through a repo.","comments":"This revision walker uses a custom memory pool and an internal\ncommit cache, so it is relatively expensive to allocate.\n\nFor maximum performance, this revision walker should be\nreused for different walks.\n\nThis revision walker is *not* thread safe: it may only be\nused to walk a repository on a single thread; however,\nit is possible to have several revision walkers in\nseveral different threads walking the same repository.\n","group":"revwalk","examples":{"general.c":["ex/HEAD/general.html#git_revwalk_new-68"]}},"git_revwalk_reset":{"type":"function","file":"revwalk.h","line":85,"lineto":85,"args":[{"name":"walker","type":"git_revwalk *","comment":"handle to reset."}],"argline":"git_revwalk *walker","sig":"git_revwalk *","return":{"type":"void"},"description":"Reset the revision walker for reuse.","comments":"This will clear all the pushed and hidden commits, and\nleave the walker in a blank state (just like at\ncreation) ready to receive new commit pushes and\nstart a new walk.\n\nThe revision walk is automatically reset when a walk\nis over.\n","group":"revwalk"},"git_revwalk_push":{"type":"function","file":"revwalk.h","line":102,"lineto":102,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"oid","type":"const git_oid *","comment":"the oid of the commit to start from."}],"argline":"git_revwalk *walk, const git_oid *oid","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Mark a commit to start traversal from.","comments":"The given OID must belong to a commit on the walked\nrepository.\n\nThe given commit will be used as one of the roots\nwhen starting the revision walk. At least one commit\nmust be pushed the repository before a walk can\nbe started.\n","group":"revwalk","examples":{"general.c":["ex/HEAD/general.html#git_revwalk_push-69"]}},"git_revwalk_push_glob":{"type":"function","file":"revwalk.h","line":117,"lineto":117,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"glob","type":"const char *","comment":"the glob pattern references should match"}],"argline":"git_revwalk *walk, const char *glob","sig":"git_revwalk *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Push matching references","comments":"The OIDs pointed to by the references that match the given glob\npattern will be pushed to the revision walker.\n\nA leading 'refs/' is implied if not present as well as a trailing\n'/ *' if the glob lacks '?', '*' or '['.\n","group":"revwalk"},"git_revwalk_push_head":{"type":"function","file":"revwalk.h","line":125,"lineto":125,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"int","comment":"0 or an error code"},"description":"Push the repository's HEAD","comments":"","group":"revwalk"},"git_revwalk_hide":{"type":"function","file":"revwalk.h","line":140,"lineto":140,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"oid","type":"const git_oid *","comment":"the oid of commit that will be ignored during the traversal"}],"argline":"git_revwalk *walk, const git_oid *oid","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Mark a commit (and its ancestors) uninteresting for the output.","comments":"The given OID must belong to a commit on the walked\nrepository.\n\nThe resolved commit and all its parents will be hidden from the\noutput on the revision walk.\n","group":"revwalk"},"git_revwalk_hide_glob":{"type":"function","file":"revwalk.h","line":156,"lineto":156,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"glob","type":"const char *","comment":"the glob pattern references should match"}],"argline":"git_revwalk *walk, const char *glob","sig":"git_revwalk *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Hide matching references.","comments":"The OIDs pointed to by the references that match the given glob\npattern and their ancestors will be hidden from the output on the\nrevision walk.\n\nA leading 'refs/' is implied if not present as well as a trailing\n'/ *' if the glob lacks '?', '*' or '['.\n","group":"revwalk"},"git_revwalk_hide_head":{"type":"function","file":"revwalk.h","line":164,"lineto":164,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"int","comment":"0 or an error code"},"description":"Hide the repository's HEAD","comments":"","group":"revwalk"},"git_revwalk_push_ref":{"type":"function","file":"revwalk.h","line":175,"lineto":175,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"refname","type":"const char *","comment":"the reference to push"}],"argline":"git_revwalk *walk, const char *refname","sig":"git_revwalk *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Push the OID pointed to by a reference","comments":"The reference must point to a commit.\n","group":"revwalk"},"git_revwalk_hide_ref":{"type":"function","file":"revwalk.h","line":186,"lineto":186,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"refname","type":"const char *","comment":"the reference to hide"}],"argline":"git_revwalk *walk, const char *refname","sig":"git_revwalk *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Hide the OID pointed to by a reference","comments":"The reference must point to a commit.\n","group":"revwalk"},"git_revwalk_next":{"type":"function","file":"revwalk.h","line":206,"lineto":206,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the oid of the next commit"},{"name":"walk","type":"git_revwalk *","comment":"the walker to pop the commit from."}],"argline":"git_oid *oid, git_revwalk *walk","sig":"git_oid *::git_revwalk *","return":{"type":"int","comment":"0 if the next commit was found; GIT_REVWALKOVER if there are no commits left to iterate"},"description":"Get the next commit from the revision walk.","comments":"The initial call to this method is *not* blocking when\niterating through a repo with a time-sorting mode.\n\nIterating with Topological or inverted modes makes the initial\ncall blocking to preprocess the commit list, but this block should be\nmostly unnoticeable on most repositories (topological preprocessing\ntimes at 0.3s on the git.git repo).\n\nThe revision walker is reset when the walk is over.\n","group":"revwalk","examples":{"general.c":["ex/HEAD/general.html#git_revwalk_next-70"]}},"git_revwalk_sorting":{"type":"function","file":"revwalk.h","line":217,"lineto":217,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"sort_mode","type":"unsigned int","comment":"combination of GIT_SORT_XXX flags"}],"argline":"git_revwalk *walk, unsigned int sort_mode","sig":"git_revwalk *::unsigned int","return":{"type":"void"},"description":"Change the sorting mode when iterating through the\nrepository's contents.","comments":"Changing the sorting mode resets the walker.\n","group":"revwalk","examples":{"general.c":["ex/HEAD/general.html#git_revwalk_sorting-71"]}},"git_revwalk_free":{"type":"function","file":"revwalk.h","line":224,"lineto":224,"args":[{"name":"walk","type":"git_revwalk *","comment":"traversal handle to close. If NULL nothing occurs."}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"void"},"description":"Free a revision walker previously allocated.","comments":"","group":"revwalk","examples":{"general.c":["ex/HEAD/general.html#git_revwalk_free-72"]}},"git_revwalk_repository":{"type":"function","file":"revwalk.h","line":233,"lineto":233,"args":[{"name":"walk","type":"git_revwalk *","comment":"the revision walker"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"git_repository *","comment":"the repository being walked"},"description":"Return the repository on which this walker\nis operating.","comments":"","group":"revwalk"},"git_object_lookup":{"type":"function","file":"object.h","line":41,"lineto":45,"args":[{"name":"object","type":"git_object **","comment":"pointer to the looked-up object"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the object"},{"name":"id","type":"const git_oid *","comment":"the unique identifier for the object"},{"name":"type","type":"git_otype","comment":"the type of the object"}],"argline":"git_object **object,\n\t\tgit_repository *repo,\n\t\tconst git_oid *id,\n\t\tgit_otype type","sig":"git_object **::git_repository *::const git_oid *::git_otype","return":{"type":"int","comment":"a reference to the object"},"description":"Lookup a reference to one of the objects in a repository.","comments":"The generated reference is owned by the repository and\nshould be closed with the `git_object_free` method\ninstead of free'd manually.\n\nThe 'type' parameter must match the type of the object\nin the odb; the method will fail otherwise.\nThe special value 'GIT_OBJ_ANY' may be passed to let\nthe method guess the object's type.\n","group":"object","examples":{"diff.c":["ex/HEAD/diff.html#git_object_lookup-18"]}},"git_object_lookup_prefix":{"type":"function","file":"object.h","line":74,"lineto":79,"args":[{"name":"object_out","type":"git_object **","comment":"pointer where to store the looked-up object"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the object"},{"name":"id","type":"const git_oid *","comment":"a short identifier for the object"},{"name":"len","type":"size_t","comment":"the length of the short identifier"},{"name":"type","type":"git_otype","comment":"the type of the object"}],"argline":"git_object **object_out,\n\t\tgit_repository *repo,\n\t\tconst git_oid *id,\n\t\tsize_t len,\n\t\tgit_otype type","sig":"git_object **::git_repository *::const git_oid *::size_t::git_otype","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a reference to one of the objects in a repository,\ngiven a prefix of its identifier (short id).","comments":"The object obtained will be so that its identifier\nmatches the first 'len' hexadecimal characters\n(packets of 4 bits) of the given 'id'.\n'len' must be at least GIT_OID_MINPREFIXLEN, and\nlong enough to identify a unique object matching\nthe prefix; otherwise the method will fail.\n\nThe generated reference is owned by the repository and\nshould be closed with the `git_object_free` method\ninstead of free'd manually.\n\nThe 'type' parameter must match the type of the object\nin the odb; the method will fail otherwise.\nThe special value 'GIT_OBJ_ANY' may be passed to let\nthe method guess the object's type.\n","group":"object","examples":{"diff.c":["ex/HEAD/diff.html#git_object_lookup_prefix-19"]}},"git_object_id":{"type":"function","file":"object.h","line":87,"lineto":87,"args":[{"name":"obj","type":"const git_object *","comment":"the repository object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"const git_oid *","comment":"the SHA1 id"},"description":"Get the id (SHA1) of a repository object","comments":"","group":"object"},"git_object_type":{"type":"function","file":"object.h","line":95,"lineto":95,"args":[{"name":"obj","type":"const git_object *","comment":"the repository object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"git_otype","comment":"the object's type"},"description":"Get the object type of an object","comments":"","group":"object","examples":{"diff.c":["ex/HEAD/diff.html#git_object_type-20"]}},"git_object_owner":{"type":"function","file":"object.h","line":109,"lineto":109,"args":[{"name":"obj","type":"const git_object *","comment":"the object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"git_repository *","comment":"the repository who owns this object"},"description":"Get the repository that owns this object","comments":"Freeing or calling `git_repository_close` on the\nreturned pointer will invalidate the actual object.\n\nAny other operation may be run on the repository without\naffecting the object.\n","group":"object"},"git_object_free":{"type":"function","file":"object.h","line":126,"lineto":126,"args":[{"name":"object","type":"git_object *","comment":"the object to close"}],"argline":"git_object *object","sig":"git_object *","return":{"type":"void"},"description":"Close an open object","comments":"This method instructs the library to close an existing\nobject; note that git_objects are owned and cached by the repository\nso the object may or may not be freed after this library call,\ndepending on how aggressive is the caching mechanism used\nby the repository.\n\nIMPORTANT:\nIt *is* necessary to call this method when you stop using\nan object. Failure to do so will cause a memory leak.\n","group":"object","examples":{"general.c":["ex/HEAD/general.html#git_object_free-73"],"diff.c":["ex/HEAD/diff.html#git_object_free-21"]}},"git_object_type2string":{"type":"function","file":"object.h","line":137,"lineto":137,"args":[{"name":"type","type":"git_otype","comment":"object type to convert."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"const char *","comment":"the corresponding string representation."},"description":"Convert an object type to it's string representation.","comments":"The result is a pointer to a string in static memory and\nshould not be free()'ed.\n","group":"object","examples":{"general.c":["ex/HEAD/general.html#git_object_type2string-74"]}},"git_object_string2type":{"type":"function","file":"object.h","line":145,"lineto":145,"args":[{"name":"str","type":"const char *","comment":"the string to convert."}],"argline":"const char *str","sig":"const char *","return":{"type":"git_otype","comment":"the corresponding git_otype."},"description":"Convert a string object type representation to it's git_otype.","comments":"","group":"object"},"git_object_typeisloose":{"type":"function","file":"object.h","line":154,"lineto":154,"args":[{"name":"type","type":"git_otype","comment":"object type to test."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"int","comment":"true if the type represents a valid loose object type, false otherwise."},"description":"Determine if the given git_otype is a valid loose object type.","comments":"","group":"object"},"git_object__size":{"type":"function","file":"object.h","line":168,"lineto":168,"args":[{"name":"type","type":"git_otype","comment":"object type to get its size"}],"argline":"git_otype type","sig":"git_otype","return":{"type":"size_t","comment":"size in bytes of the object"},"description":"Get the size in bytes for the structure which\nacts as an in-memory representation of any given\nobject type.","comments":"For all the core types, this would the equivalent\nof calling `sizeof(git_commit)` if the core types\nwere not opaque on the external API.\n","group":"object"},"git_object_peel":{"type":"function","file":"object.h","line":182,"lineto":185,"args":[{"name":"peeled","type":"git_object **","comment":"Pointer to the peeled git_object"},{"name":"object","type":"git_object *","comment":"The object to be processed"},{"name":"target_type","type":"git_otype","comment":"The type of the requested object"}],"argline":"git_object **peeled,\n\t\tgit_object *object,\n\t\tgit_otype target_type","sig":"git_object **::git_object *::git_otype","return":{"type":"int","comment":"0 or an error code"},"description":"Recursively peel an object until an object of the specified\ntype is met","comments":"The retrieved `peeled` object is owned by the repository\nand should be closed with the `git_object_free` method.\n","group":"object"},"git_reference_lookup":{"type":"function","file":"refs.h","line":33,"lineto":33,"args":[{"name":"reference_out","type":"git_reference **","comment":"pointer to the looked-up reference"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the reference"},{"name":"name","type":"const char *","comment":"the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)"}],"argline":"git_reference **reference_out, git_repository *repo, const char *name","sig":"git_reference **::git_repository *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Lookup a reference by its name in a repository.","comments":"The generated reference must be freed by the user.\n","group":"reference","examples":{"general.c":["ex/HEAD/general.html#git_reference_lookup-75"],"diff.c":["ex/HEAD/diff.html#git_reference_lookup-22"]}},"git_reference_name_to_oid":{"type":"function","file":"refs.h","line":43,"lineto":44,"args":[{"name":"out","type":"git_oid *"},{"name":"repo","type":"git_repository *","comment":"The repository in which to look up the reference"},{"name":"name","type":"const char *","comment":"The long name for the reference"}],"argline":"git_oid *out, git_repository *repo, const char *name","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":"0 on success, -1 if name could not be resolved"},"description":"Lookup a reference by name and resolve immediately to OID.","comments":"","group":"reference"},"git_reference_create_symbolic":{"type":"function","file":"refs.h","line":64,"lineto":64,"args":[{"name":"ref_out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"repo","type":"git_repository *","comment":"Repository where that reference will live"},{"name":"name","type":"const char *","comment":"The name of the reference"},{"name":"target","type":"const char *","comment":"The target of the reference"},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_reference **ref_out, git_repository *repo, const char *name, const char *target, int force","sig":"git_reference **::git_repository *::const char *::const char *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Create a new symbolic reference.","comments":"The reference will be created in the repository and written\nto the disk.\n\nThe generated reference must be freed by the user.\n\nIf `force` is true and there already exists a reference\nwith the same name, it will be overwritten.\n","group":"reference"},"git_reference_create_oid":{"type":"function","file":"refs.h","line":84,"lineto":84,"args":[{"name":"ref_out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"repo","type":"git_repository *","comment":"Repository where that reference will live"},{"name":"name","type":"const char *","comment":"The name of the reference"},{"name":"id","type":"const git_oid *","comment":"The object id pointed to by the reference."},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id, int force","sig":"git_reference **::git_repository *::const char *::const git_oid *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Create a new object id reference.","comments":"The reference will be created in the repository and written\nto the disk.\n\nThe generated reference must be freed by the user.\n\nIf `force` is true and there already exists a reference\nwith the same name, it will be overwritten.\n","group":"reference"},"git_reference_oid":{"type":"function","file":"refs.h","line":94,"lineto":94,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const git_oid *","comment":"a pointer to the oid if available, NULL otherwise"},"description":"Get the OID pointed to by a reference.","comments":"Only available if the reference is direct (i.e. not symbolic)\n","group":"reference","examples":{"general.c":["ex/HEAD/general.html#git_reference_oid-76"],"diff.c":["ex/HEAD/diff.html#git_reference_oid-23"]}},"git_reference_target":{"type":"function","file":"refs.h","line":104,"lineto":104,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const char *","comment":"a pointer to the name if available, NULL otherwise"},"description":"Get full name to the reference pointed by this reference","comments":"Only available if the reference is symbolic\n","group":"reference","examples":{"general.c":["ex/HEAD/general.html#git_reference_target-77"]}},"git_reference_type":{"type":"function","file":"refs.h","line":114,"lineto":114,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"git_ref_t","comment":"the type"},"description":"Get the type of a reference","comments":"Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)\n","group":"reference","examples":{"general.c":["ex/HEAD/general.html#git_reference_type-78"]}},"git_reference_name":{"type":"function","file":"refs.h","line":122,"lineto":122,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const char *","comment":"the full name for the ref"},"description":"Get the full name of a reference","comments":"","group":"reference"},"git_reference_resolve":{"type":"function","file":"refs.h","line":142,"lineto":142,"args":[{"name":"resolved_ref","type":"git_reference **","comment":"Pointer to the peeled reference"},{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference **resolved_ref, git_reference *ref","sig":"git_reference **::git_reference *","return":{"type":"int","comment":"0 or an error code"},"description":"Resolve a symbolic reference","comments":"This method iteratively peels a symbolic reference\nuntil it resolves to a direct reference to an OID.\n\nThe peeled reference is returned in the `resolved_ref`\nargument, and must be freed manually once it's no longer\nneeded.\n\nIf a direct reference is passed as an argument,\na copy of that reference is returned. This copy must\nbe manually freed too.\n","group":"reference","examples":{"diff.c":["ex/HEAD/diff.html#git_reference_resolve-24"]}},"git_reference_owner":{"type":"function","file":"refs.h","line":150,"lineto":150,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"git_repository *","comment":"a pointer to the repo"},"description":"Get the repository where a reference resides","comments":"","group":"reference"},"git_reference_set_target":{"type":"function","file":"refs.h","line":165,"lineto":165,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"},{"name":"target","type":"const char *","comment":"The new target for the reference"}],"argline":"git_reference *ref, const char *target","sig":"git_reference *::const char *","return":{"type":"int","comment":"0 or an error code"},"description":"Set the symbolic target of a reference.","comments":"The reference must be a symbolic reference, otherwise\nthis method will fail.\n\nThe reference will be automatically updated in\nmemory and on disk.\n","group":"reference"},"git_reference_set_oid":{"type":"function","file":"refs.h","line":180,"lineto":180,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"},{"name":"id","type":"const git_oid *","comment":"The new target OID for the reference"}],"argline":"git_reference *ref, const git_oid *id","sig":"git_reference *::const git_oid *","return":{"type":"int","comment":"0 or an error code"},"description":"Set the OID target of a reference.","comments":"The reference must be a direct reference, otherwise\nthis method will fail.\n\nThe reference will be automatically updated in\nmemory and on disk.\n","group":"reference"},"git_reference_rename":{"type":"function","file":"refs.h","line":208,"lineto":208,"args":[{"name":"ref","type":"git_reference *","comment":"The reference to rename"},{"name":"new_name","type":"const char *","comment":"The new name for the reference"},{"name":"force","type":"int","comment":"Overwrite an existing reference"}],"argline":"git_reference *ref, const char *new_name, int force","sig":"git_reference *::const char *::int","return":{"type":"int","comment":"0 or an error code"},"description":"Rename an existing reference","comments":"This method works for both direct and symbolic references.\nThe new name will be checked for validity and may be\nmodified into a normalized form.\n\nThe given git_reference will be updated in place.\n\nThe reference will be immediately renamed in-memory\nand on disk.\n\nIf the `force` flag is not enabled, and there's already\na reference with the given name, the renaming will fail.\n\nIMPORTANT:\nThe user needs to write a proper reflog entry if the\nreflog is enabled for the repository. We only rename\nthe reflog if it exists.\n","group":"reference"},"git_reference_delete":{"type":"function","file":"refs.h","line":221,"lineto":221,"args":[{"name":"ref","type":"git_reference *","comment":"The reference to remove"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":"0 or an error code"},"description":"Delete an existing reference","comments":"This method works for both direct and symbolic references.\n\nThe reference will be immediately removed on disk and from\nmemory. The given reference pointer will no longer be valid.\n","group":"reference"},"git_reference_packall":{"type":"function","file":"refs.h","line":236,"lineto":236,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where the loose refs will be packed"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":"0 or an error code"},"description":"Pack all the loose references in the repository","comments":"This method will load into the cache all the loose\nreferences on the repository and update the\n`packed-refs` file with them.\n\nOnce the `packed-refs` file has been written properly,\nthe loose references will be removed from disk.\n","group":"reference"},"git_reference_list":{"type":"function","file":"refs.h","line":259,"lineto":259,"args":[{"name":"array","type":"git_strarray *","comment":"Pointer to a git_strarray structure where the reference names will be stored"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the refs"},{"name":"list_flags","type":"unsigned int","comment":"Filtering flags for the reference listing."}],"argline":"git_strarray *array, git_repository *repo, unsigned int list_flags","sig":"git_strarray *::git_repository *::unsigned int","return":{"type":"int","comment":"0 or an error code"},"description":"Fill a list with all the references that can be found\nin a repository.","comments":"The listed references may be filtered by type, or using\na bitwise OR of several types. Use the magic value\n`GIT_REF_LISTALL` to obtain all references, including\npacked ones.\n\nThe string array will be filled with the names of all\nreferences; these values are owned by the user and\nshould be free'd manually when no longer needed, using\n`git_strarray_free`.\n","group":"reference","examples":{"general.c":["ex/HEAD/general.html#git_reference_list-79"]}},"git_reference_foreach":{"type":"function","file":"refs.h","line":280,"lineto":280,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the refs"},{"name":"list_flags","type":"unsigned int","comment":"Filtering flags for the reference listing."},{"name":"callback","type":"int (*)(const char *, void *)","comment":"Function which will be called for every listed ref"},{"name":"payload","type":"void *","comment":"Additional data to pass to the callback"}],"argline":"git_repository *repo, unsigned int list_flags, int (*callback)(const char *, void *), void *payload","sig":"git_repository *::unsigned int::int (*)(const char *, void *)::void *","return":{"type":"int","comment":"0 or an error code"},"description":"Perform an operation on each reference in the repository","comments":"The processed references may be filtered by type, or using\na bitwise OR of several types. Use the magic value\n`GIT_REF_LISTALL` to obtain all references, including\npacked ones.\n\nThe `callback` function will be called for each of the references\nin the repository, and will receive the name of the reference and\nthe `payload` value passed to this method.\n","group":"reference"},"git_reference_is_packed":{"type":"function","file":"refs.h","line":288,"lineto":288,"args":[{"name":"ref","type":"git_reference *","comment":"A git reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":"0 in case it's not packed; 1 otherwise"},"description":"Check if a reference has been loaded from a packfile","comments":"","group":"reference"},"git_reference_reload":{"type":"function","file":"refs.h","line":308,"lineto":308,"args":[{"name":"ref","type":"git_reference *","comment":"The reference to reload"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":"0 on success, or an error code"},"description":"Reload a reference from disk","comments":"Reference pointers may become outdated if the Git\nrepository is accessed simultaneously by other clients\nwhile the library is open.\n\nThis method forces a reload of the reference from disk,\nto ensure that the provided information is still\nreliable.\n\nIf the reload fails (e.g. the reference no longer exists\non disk, or has become corrupted), an error code will be\nreturned and the reference pointer will be invalidated.\n","group":"reference"},"git_reference_free":{"type":"function","file":"refs.h","line":315,"lineto":315,"args":[{"name":"ref","type":"git_reference *","comment":"git_reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"void"},"description":"Free the given reference","comments":"","group":"reference","examples":{"diff.c":["ex/HEAD/diff.html#git_reference_free-25","ex/HEAD/diff.html#git_reference_free-26"]}},"git_reference_cmp":{"type":"function","file":"refs.h","line":324,"lineto":324,"args":[{"name":"ref1","type":"git_reference *","comment":"The first git_reference"},{"name":"ref2","type":"git_reference *","comment":"The second git_reference"}],"argline":"git_reference *ref1, git_reference *ref2","sig":"git_reference *::git_reference *","return":{"type":"int","comment":"0 if the same, else a stable but meaningless ordering."},"description":"Compare two references.","comments":"","group":"reference"},"git_reference_foreach_glob":{"type":"function","file":"refs.h","line":346,"lineto":354,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the references."},{"name":"glob","type":"const char *"},{"name":"list_flags","type":"unsigned int","comment":"Filtering flags for the reference listing."},{"name":"callback","type":"int (*)(\n\t\t\tconst char *reference_name,\n\t\t\tvoid *payload)","comment":"Callback to invoke per found reference."},{"name":"payload","type":"void *","comment":"Extra parameter to callback function."}],"argline":"git_repository *repo,\n\t\tconst char *glob,\n\t\tunsigned int list_flags,\n\t\tint (*callback)(\n\t\t\tconst char *reference_name,\n\t\t\tvoid *payload),\n\t\tvoid *payload","sig":"git_repository *::const char *::unsigned int::int (*)(\n\t\t\tconst char *reference_name,\n\t\t\tvoid *payload)::void *","return":{"type":"int","comment":"0 or an error code."},"description":"Loop over all the references and issue a callback for each one\nwhich name matches the given glob pattern.","comments":"The processed references may be filtered by type, or using\na bitwise OR of several types. Use the magic value\n`GIT_REF_LISTALL` to obtain all references, including\npacked ones.\n","group":"reference"},"git_reference_has_log":{"type":"function","file":"refs.h","line":364,"lineto":364,"args":[{"name":"ref","type":"git_reference *","comment":"A git reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":"0 when no reflog can be found, 1 when it exists; otherwise an error code."},"description":"Check if a reflog exists for the specified reference.","comments":"","group":"reference"},"git_reference_is_branch":{"type":"function","file":"refs.h","line":374,"lineto":374,"args":[{"name":"ref","type":"git_reference *","comment":"A git reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":"1 when the reference lives in the refs/heads namespace; 0 otherwise."},"description":"Check if a reference is a local branch.","comments":"","group":"reference"}},"globals":{"GIT_BEGIN_DECL":{"value":"","file":"common.h","line":24,"comments":"Start declarations in C mode"},"GIT_END_DECL":{"value":"","file":"common.h","line":26,"comments":"End declarations in C mode"},"GIT_EXTERN(type)":{"value":"extern __attribute__((visibility(\"default\"))) type","file":"common.h","line":30,"comments":"Declare a public function exported for application use."},"GIT_INLINE(type)":{"value":"static __inline type","file":"common.h","line":41,"comments":"Declare a function as always inlined."},"GIT_FORMAT_PRINTF(a,b)":{"value":"__attribute__((format (printf, a, b)))","file":"common.h","line":48,"comments":"Declare a function's takes printf style arguments."},"GIT_PATH_LIST_SEPARATOR":{"value":"';'","file":"common.h","line":77,"comments":"The separator used in path list strings (ie like in the PATH\nenvironment variable). A semi-colon \";\" is used on Windows, and\na colon \":\" for all other systems."},"GIT_PATH_MAX":{"value":"4096","file":"common.h","line":86,"comments":"The maximum length of a valid git path."},"GIT_CAP_THREADS":{"file":"common.h","line":110,"value":"( 1 << 0 )","comments":"Combinations of these values describe the capabilities of libgit2."},"GIT_CAP_HTTPS":{"file":"common.h","line":111,"value":"( 1 << 1 )\n","comments":"Combinations of these values describe the capabilities of libgit2."},"GIT_INDEXCAP_IGNORE_CASE":{"file":"index.h","line":95,"value":"1","comments":"Capabilities of system that affect index actions."},"GIT_INDEXCAP_NO_FILEMODE":{"file":"index.h","line":96,"value":"2","comments":"Capabilities of system that affect index actions."},"GIT_INDEXCAP_NO_SYMLINKS":{"file":"index.h","line":97,"value":"4","comments":"Capabilities of system that affect index actions."},"GIT_INDEXCAP_FROM_OWNER":{"file":"index.h","line":98,"value":"~0u\n","comments":"Capabilities of system that affect index actions."},"GIT_STREAM_RDONLY":{"file":"odb_backend.h","line":85,"value":"(1 << 1)","comments":"Streaming mode"},"GIT_STREAM_WRONLY":{"file":"odb_backend.h","line":86,"value":"(1 << 2)","comments":"Streaming mode"},"GIT_STREAM_RW":{"file":"odb_backend.h","line":87,"value":"(GIT_STREAM_RDONLY | GIT_STREAM_WRONLY)","comments":"Streaming mode"},"GIT_DIFF_NORMAL":{"file":"diff.h","line":37,"value":"0","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_REVERSE":{"file":"diff.h","line":38,"value":"(1 << 0)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_FORCE_TEXT":{"file":"diff.h","line":39,"value":"(1 << 1)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_IGNORE_WHITESPACE":{"file":"diff.h","line":40,"value":"(1 << 2)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_IGNORE_WHITESPACE_CHANGE":{"file":"diff.h","line":41,"value":"(1 << 3)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_IGNORE_WHITESPACE_EOL":{"file":"diff.h","line":42,"value":"(1 << 4)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_IGNORE_SUBMODULES":{"file":"diff.h","line":43,"value":"(1 << 5)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_PATIENCE":{"file":"diff.h","line":44,"value":"(1 << 6)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_INCLUDE_IGNORED":{"file":"diff.h","line":45,"value":"(1 << 7)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_INCLUDE_UNTRACKED":{"file":"diff.h","line":46,"value":"(1 << 8)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_INCLUDE_UNMODIFIED":{"file":"diff.h","line":47,"value":"(1 << 9)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_RECURSE_UNTRACKED_DIRS":{"file":"diff.h","line":48,"value":"(1 << 10)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_DIFF_DISABLE_PATHSPEC_MATCH":{"file":"diff.h","line":49,"value":"(1 << 11)","comments":"Flags for diff options.  A combination of these flags can be passed\nin via the `flags` value in the `git_diff_options`."},"GIT_OID_RAWSZ":{"value":"20","file":"oid.h","line":23,"comments":"Size (in bytes) of a raw/binary oid"},"GIT_OID_HEXSZ":{"value":"(GIT_OID_RAWSZ * 2)","file":"oid.h","line":26,"comments":"Size (in bytes) of a hex formatted oid"},"GIT_OID_MINPREFIXLEN":{"value":"4","file":"oid.h","line":30,"comments":"Minimum length (in number of hex characters,\ni.e. packets of 4 bits) of an oid prefix"},"GIT_ATTR_TRUE(attr)":{"value":"(git_attr_value(attr) == GIT_ATTR_TRUE_T)","file":"attr.h","line":33,"comments":"GIT_ATTR_TRUE checks if an attribute is set on.  In core git\nparlance, this the value for \"Set\" attributes.\n\nFor example, if the attribute file contains:\n\n   *.c foo\n\nThen for file `xyz.c` looking up attribute \"foo\" gives a value for\nwhich `GIT_ATTR_TRUE(value)` is true."},"GIT_ATTR_FALSE(attr)":{"value":"(git_attr_value(attr) == GIT_ATTR_FALSE_T)","file":"attr.h","line":47,"comments":"GIT_ATTR_FALSE checks if an attribute is set off.  In core git\nparlance, this is the value for attributes that are \"Unset\" (not to\nbe confused with values that a \"Unspecified\").\n\nFor example, if the attribute file contains:\n\n   *.h -foo\n\nThen for file `zyx.h` looking up attribute \"foo\" gives a value for\nwhich `GIT_ATTR_FALSE(value)` is true."},"GIT_ATTR_UNSPECIFIED(attr)":{"value":"(git_attr_value(attr) == GIT_ATTR_UNSPECIFIED_T)","file":"attr.h","line":65,"comments":"GIT_ATTR_UNSPECIFIED checks if an attribute is unspecified.  This\nmay be due to the attribute not being mentioned at all or because\nthe attribute was explicitly set unspecified via the `!` operator.\n\nFor example, if the attribute file contains:\n\n   *.c foo\n   *.h -foo\n   onefile.c !foo\n\nThen for `onefile.c` looking up attribute \"foo\" yields a value with\n`GIT_ATTR_UNSPECIFIED(value)` of true.  Also, looking up \"foo\" on\nfile `onefile.rb` or looking up \"bar\" on any file will all give\n`GIT_ATTR_UNSPECIFIED(value)` of true."},"GIT_ATTR_HAS_VALUE(attr)":{"value":"(git_attr_value(attr) == GIT_ATTR_VALUE_T)","file":"attr.h","line":77,"comments":"GIT_ATTR_HAS_VALUE checks if an attribute is set to a value (as\nopposed to TRUE, FALSE or UNSPECIFIED).  This would be the case if\nfor a file with something like:\n\n   *.txt eol=lf\n\nGiven this, looking up \"eol\" for `onefile.txt` will give back the\nstring \"lf\" and `GIT_ATTR_SET_TO_VALUE(attr)` will return true."},"GIT_ATTR_CHECK_NO_SYSTEM":{"value":"(1 << 2)","file":"attr.h","line":125,"comments":"Check attribute flags: Using the system attributes file.\n\nNormally, attribute checks include looking in the /etc (or system\nequivalent) directory for a `gitattributes` file.  Passing this\nflag will cause attribute checks to ignore that file."},"GIT_OK":{"file":"errors.h","line":22,"value":"0","comments":"Generic return codes"},"GIT_ERROR":{"file":"errors.h","line":23,"value":"-1","comments":"Generic return codes"},"GIT_ENOTFOUND":{"file":"errors.h","line":24,"value":"-3","comments":"Generic return codes"},"GIT_EEXISTS":{"file":"errors.h","line":25,"value":"-4","comments":"Generic return codes"},"GIT_EAMBIGUOUS":{"file":"errors.h","line":26,"value":"-5","comments":"Generic return codes"},"GIT_EBUFS":{"file":"errors.h","line":27,"value":"-6","comments":"Generic return codes"},"GIT_PASSTHROUGH":{"file":"errors.h","line":29,"value":"-30","comments":"Generic return codes"},"GIT_REVWALKOVER":{"file":"errors.h","line":30,"value":"-31","comments":"Generic return codes"},"GIT_SORT_NONE":{"value":"(0)","file":"revwalk.h","line":29,"comments":"Sort the repository contents in no particular ordering;\nthis sorting is arbitrary, implementation-specific\nand subject to change at any time.\nThis is the default sorting for new walkers."},"GIT_SORT_TOPOLOGICAL":{"value":"(1 << 0)","file":"revwalk.h","line":36,"comments":"Sort the repository contents in topological order\n(parents before children); this sorting mode\ncan be combined with time sorting."},"GIT_SORT_TIME":{"value":"(1 << 1)","file":"revwalk.h","line":43,"comments":"Sort the repository contents by commit time;\nthis sorting mode can be combined with\ntopological sorting."},"GIT_SORT_REVERSE":{"value":"(1 << 2)","file":"revwalk.h","line":50,"comments":"Iterate through the repository contents in reverse\norder; this sorting mode can be combined with\nany of the above."}},"types":[["GIT_ATTR_CHECK",{"type":"enum","file":"attr.h","line":114,"lineto":116,"block":"GIT_ATTR_CHECK_FILE_THEN_INDEX\nGIT_ATTR_CHECK_INDEX_THEN_FILE\nGIT_ATTR_CHECK_INDEX_ONLY","tdef":null,"comments":"Check attribute flags: Reading values from index and working directory.\n\nWhen checking attributes, it is possible to check attribute files\nin both the working directory (if there is one) and the index (if\nthere is one).  You can explicitly choose where to check and in\nwhich order using the following flags.\n\nCore git usually checks the working directory then the index,\nexcept during a checkout when it checks the index first.  It will\nuse index only for creating archives or for a bare repo (if an\nindex has been specified for the bare repo).","used":{"returns":[],"needs":[]}}],["GIT_DIFF_LINE",{"type":"enum","file":"diff.h","line":167,"lineto":182,"block":"GIT_DIFF_LINE_CONTEXT\nGIT_DIFF_LINE_ADDITION\nGIT_DIFF_LINE_DELETION\nGIT_DIFF_LINE_ADD_EOFNL\nGIT_DIFF_LINE_DEL_EOFNL\nGIT_DIFF_LINE_FILE_HDR\nGIT_DIFF_LINE_HUNK_HDR\nGIT_DIFF_LINE_BINARY","tdef":null,"comments":"Line origin constants.\n\nThese values describe where a line came from and will be passed to\nthe git_diff_data_fn when iterating over a diff.  There are some\nspecial origin constants at the end that are used for the text\noutput callbacks to demarcate lines that are actually part of\nthe file or hunk headers.","used":{"returns":[],"needs":[]}}],["GIT_STATUS_OPT",{"type":"enum","file":"status.h","line":102,"lineto":109,"block":"GIT_STATUS_OPT_INCLUDE_UNTRACKED\nGIT_STATUS_OPT_INCLUDE_IGNORED\nGIT_STATUS_OPT_INCLUDE_UNMODIFIED\nGIT_STATUS_OPT_EXCLUDE_SUBMODULES\nGIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS\nGIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH","tdef":null,"comments":"Flags to control status callbacks\n\n- GIT_STATUS_OPT_INCLUDE_UNTRACKED says that callbacks should\n  be made on untracked files.  These will only be made if the\n  workdir files are included in the status \"show\" option.\n- GIT_STATUS_OPT_INCLUDE_IGNORED says that ignored files should\n  get callbacks.  Again, these callbacks will only be made if\n  the workdir files are included in the status \"show\" option.\n  Right now, there is no option to include all files in\n  directories that are ignored completely.\n- GIT_STATUS_OPT_INCLUDE_UNMODIFIED indicates that callback\n  should be made even on unmodified files.\n- GIT_STATUS_OPT_EXCLUDE_SUBMODULES indicates that directories\n  which appear to be submodules should just be skipped over.\n- GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS indicates that the\n  contents of untracked directories should be included in the\n  status.  Normally if an entire directory is new, then just\n  the top-level directory will be included (with a trailing\n  slash on the entry name).  Given this flag, the directory\n  itself will not be included, but all the files in it will.\n- GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH indicates that the given\n  path will be treated as a literal path, and not as a pathspec.","used":{"returns":[],"needs":[]}}],["git_blob",{"type":"struct","value":"git_blob","file":"types.h","line":108,"lineto":108,"block":"","tdef":"typedef","comments":"In-memory representation of a blob object.","used":{"returns":[],"needs":["git_blob_free","git_blob_lookup","git_blob_lookup_prefix","git_blob_rawcontent","git_blob_rawsize","git_diff_blobs"]}}],["git_branch_t",{"type":"enum","file":"types.h","line":167,"lineto":170,"block":"GIT_BRANCH_LOCAL\nGIT_BRANCH_REMOTE","tdef":"typedef","comments":"Basic type of any Git branch.","used":{"returns":[],"needs":["git_branch_delete","git_branch_foreach","git_branch_lookup"]}}],["git_commit",{"type":"struct","value":"git_commit","file":"types.h","line":111,"lineto":111,"block":"","tdef":"typedef","comments":"Parsed representation of a commit object.","used":{"returns":[],"needs":["git_commit_author","git_commit_committer","git_commit_create","git_commit_free","git_commit_id","git_commit_lookup","git_commit_lookup_prefix","git_commit_message","git_commit_message_encoding","git_commit_nth_gen_ancestor","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]}}],["git_config",{"type":"struct","value":"git_config","file":"types.h","line":126,"lineto":126,"block":"","tdef":"typedef","comments":"Memory representation of a set of config files","used":{"returns":[],"needs":["git_config_add_file","git_config_add_file_ondisk","git_config_delete","git_config_foreach","git_config_foreach_match","git_config_free","git_config_get_bool","git_config_get_int32","git_config_get_int64","git_config_get_mapped","git_config_get_multivar","git_config_get_string","git_config_new","git_config_open_global","git_config_open_ondisk","git_config_set_bool","git_config_set_int32","git_config_set_int64","git_config_set_multivar","git_config_set_string","git_repository_config","git_repository_set_config"]}}],["git_config_file",{"type":"struct","value":"git_config_file","file":"types.h","line":129,"lineto":129,"block":"","tdef":"typedef","comments":"Interface to access a configuration file","used":{"returns":[],"needs":["git_config_add_file","git_config_file__ondisk"]}}],["git_delta_t",{"type":"enum","file":"diff.h","line":87,"lineto":96,"block":"GIT_DELTA_UNMODIFIED\nGIT_DELTA_ADDED\nGIT_DELTA_DELETED\nGIT_DELTA_MODIFIED\nGIT_DELTA_RENAMED\nGIT_DELTA_COPIED\nGIT_DELTA_IGNORED\nGIT_DELTA_UNTRACKED","tdef":"typedef","comments":"What type of change is described by a git_diff_delta?","used":{"returns":[],"needs":[]}}],["git_diff_data_fn",{"type":"function pointer","value":"git_diff_data_fn","file":"diff.h","line":192,"lineto":198,"comments":"When iterating over a diff, callback that will be made per text diff\nline. In this context, the provided range will be NULL.\n\nWhen printing a diff, callback that will be made to output each line\nof text.  This uses some extra GIT_DIFF_LINE_... constants for output\nof lines of file and hunk headers.","used":{"returns":[],"needs":["git_diff_blobs","git_diff_foreach","git_diff_print_compact","git_diff_print_patch"]}}],["git_diff_delta",{"type":"struct","value":"git_diff_delta","file":"diff.h","line":122,"lineto":128,"block":"git_diff_file old_file\ngit_diff_file new_file\ngit_delta_t status\nunsigned int similarity\nint binary","tdef":"typedef","comments":"Description of changes to one file.\n\nWhen iterating over a diff list object, this will generally be passed to\nmost callback functions and you can use the contents to understand\nexactly what has changed.\n\nUnder some circumstances, not all fields will be filled in, but the code\ngenerally tries to fill in as much as possible.  One example is that the\n\"binary\" field will not actually look at file contents if you do not\npass in hunk and/or line callbacks to the diff foreach iteration function.\nIt will just use the git attributes for those files.","used":{"returns":[],"needs":[]}}],["git_diff_file",{"type":"struct","value":"git_diff_file","file":"diff.h","line":101,"lineto":107,"block":"git_oid oid\nchar *path\ngit_off_t size\nunsigned int flags\nuint16_t mode","tdef":"typedef","comments":"Description of one side of a diff.","used":{"returns":[],"needs":[]}}],["git_diff_file_fn",{"type":"function pointer","value":"git_diff_file_fn","file":"diff.h","line":133,"lineto":136,"comments":"When iterating over a diff, callback that will be made per file.","used":{"returns":[],"needs":["git_diff_blobs","git_diff_foreach"]}}],["git_diff_hunk_fn",{"type":"function pointer","value":"git_diff_hunk_fn","file":"diff.h","line":151,"lineto":156,"comments":"When iterating over a diff, callback that will be made per hunk.","used":{"returns":[],"needs":["git_diff_blobs","git_diff_foreach"]}}],["git_diff_list",{"type":"struct","value":"git_diff_list","file":"diff.h","line":73,"lineto":82,"block":"","tdef":"typedef","comments":"The diff list object that contains all individual file deltas.","used":{"returns":[],"needs":["git_diff_foreach","git_diff_index_to_tree","git_diff_list_free","git_diff_merge","git_diff_print_compact","git_diff_print_patch","git_diff_tree_to_tree","git_diff_workdir_to_index","git_diff_workdir_to_tree"]}}],["git_diff_options",{"type":"struct","value":"git_diff_options","file":"diff.h","line":61,"lineto":68,"block":"uint32_t flags\nuint16_t context_lines\nuint16_t interhunk_lines\nchar *old_prefix\nchar *new_prefix\ngit_strarray pathspec","tdef":"typedef","comments":"Structure describing options about how the diff should be executed.\n\nSetting all values of the structure to zero will yield the default\nvalues.  Similarly, passing NULL for the options structure will\ngive the defaults.  The default values are marked below.\n\n@todo Most of the parameters here are not actually supported at this time.","used":{"returns":[],"needs":["git_diff_blobs","git_diff_index_to_tree","git_diff_tree_to_tree","git_diff_workdir_to_index","git_diff_workdir_to_tree"]}}],["git_diff_range",{"type":"struct","value":"git_diff_range","file":"diff.h","line":141,"lineto":146,"block":"int old_start\nint old_lines\nint new_start\nint new_lines","tdef":"typedef","comments":"Structure describing a hunk of a diff.","used":{"returns":[],"needs":[]}}],["git_error_t",{"type":"enum","file":"errors.h","line":39,"lineto":56,"block":"GITERR_NOMEMORY\nGITERR_OS\nGITERR_INVALID\nGITERR_REFERENCE\nGITERR_ZLIB\nGITERR_REPOSITORY\nGITERR_CONFIG\nGITERR_REGEX\nGITERR_ODB\nGITERR_INDEX\nGITERR_OBJECT\nGITERR_NET\nGITERR_TAG\nGITERR_TREE\nGITERR_INDEXER\nGITERR_SSL","tdef":"typedef","comments":"Error classes","used":{"returns":[],"needs":[]}}],["git_headlist_cb",{"type":"function pointer","value":"git_headlist_cb","file":"net.h","line":47,"lineto":47,"comments":"Callback for listing the remote heads","used":{"returns":[],"needs":["git_remote_ls"]}}],["git_index",{"type":"struct","value":"git_index","file":"types.h","line":123,"lineto":123,"block":"","tdef":"typedef","comments":"Memory representation of an index file.","used":{"returns":[],"needs":["git_index_add","git_index_add2","git_index_append","git_index_append2","git_index_caps","git_index_clear","git_index_entrycount","git_index_entrycount_unmerged","git_index_find","git_index_free","git_index_get","git_index_get_unmerged_byindex","git_index_get_unmerged_bypath","git_index_open","git_index_read","git_index_read_tree","git_index_remove","git_index_set_caps","git_index_uniq","git_index_write","git_repository_index","git_repository_set_index","git_tree_create_fromindex"]}}],["git_index_entry",{"type":"struct","value":"git_index_entry","file":"index.h","line":67,"lineto":84,"block":"git_index_time ctime\ngit_index_time mtime\nunsigned int dev\nunsigned int ino\nunsigned int mode\nunsigned int uid\nunsigned int gid\ngit_off_t file_size\ngit_oid oid\nunsigned short flags\nunsigned short flags_extended\nchar *path","tdef":"typedef","comments":"Memory representation of a file entry in the index.","used":{"returns":["git_index_get"],"needs":["git_index_add2","git_index_append2","git_index_entry_stage"]}}],["git_index_entry_unmerged",{"type":"struct","value":"git_index_entry_unmerged","file":"index.h","line":87,"lineto":91,"block":"unsigned int mode[3]\ngit_oid oid[3]\nchar *path","tdef":"typedef","comments":"Representation of an unmerged file entry in the index.","used":{"returns":["git_index_get_unmerged_byindex","git_index_get_unmerged_bypath"],"needs":[]}}],["git_index_time",{"type":"struct","value":"git_index_time","file":"index.h","line":60,"lineto":64,"block":"git_time_t seconds\nunsigned int nanoseconds","tdef":"typedef","comments":"Time used in a git index entry","used":{"returns":[],"needs":[]}}],["git_indexer_stats",{"type":"struct","value":"git_indexer_stats","file":"indexer.h","line":19,"lineto":26,"block":"unsigned int total\nunsigned int processed","tdef":"typedef","comments":"This is passed as the first argument to the callback to allow the\nuser to see the progress.","used":{"returns":[],"needs":["git_indexer_run","git_indexer_stream_add","git_indexer_stream_finalize","git_remote_download"]}}],["git_note",{"type":"struct","value":"git_note","file":"types.h","line":138,"lineto":138,"block":"","tdef":"typedef","comments":"Representation of a git note","used":{"returns":[],"needs":["git_note_free","git_note_message","git_note_oid","git_note_read"]}}],["git_note_data",{"type":"struct","value":"git_note_data","file":"notes.h","line":111,"lineto":114,"block":"git_oid blob_oid\ngit_oid annotated_object_oid","tdef":"typedef","comments":"Basic components of a note\n\n - Oid of the blob containing the message\n - Oid of the git object being annotated","used":{"returns":[],"needs":["git_note_foreach"]}}],["git_object",{"type":"struct","value":"git_object","file":"types.h","line":99,"lineto":99,"block":"","tdef":"typedef","comments":"Representation of a generic object in a repository","used":{"returns":[],"needs":["git_branch_create","git_object_free","git_object_id","git_object_lookup","git_object_lookup_prefix","git_object_owner","git_object_peel","git_object_type","git_reset","git_revparse_single","git_tag_create","git_tag_create_lightweight","git_tag_peel","git_tag_target","git_tree_entry_to_object"]}}],["git_odb",{"type":"struct","value":"git_odb","file":"types.h","line":81,"lineto":81,"block":"","tdef":"typedef","comments":"An open object database handle.","used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_exists","git_odb_foreach","git_odb_free","git_odb_new","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write","git_repository_odb","git_repository_set_odb","git_repository_wrap_odb"]}}],["git_odb_backend",{"type":"struct","value":"git_odb_backend","file":"types.h","line":84,"lineto":84,"block":"","tdef":"typedef","comments":"A custom backend in an ODB","used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend"]}}],["git_odb_object",{"type":"struct","value":"git_odb_object","file":"types.h","line":87,"lineto":87,"block":"","tdef":"typedef","comments":"An object read from the ODB","used":{"returns":[],"needs":["git_odb_object_data","git_odb_object_free","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_read","git_odb_read_prefix"]}}],["git_odb_stream",{"type":"struct","value":"git_odb_stream","file":"types.h","line":90,"lineto":90,"block":"","tdef":"typedef","comments":"A stream to read/write from the ODB","used":{"returns":[],"needs":["git_odb_open_rstream","git_odb_open_wstream"]}}],["git_oid",{"type":"struct","value":"git_oid","file":"oid.h","line":33,"lineto":37,"block":"","tdef":"typedef","comments":"Unique identity of any object (commit, tree, blob, tag).","used":{"returns":["git_commit_id","git_commit_parent_oid","git_commit_tree_oid","git_indexer_hash","git_indexer_stream_hash","git_note_oid","git_object_id","git_odb_object_id","git_reference_oid","git_reflog_entry_oidnew","git_reflog_entry_oidold","git_tag_id","git_tag_target_oid","git_tree_entry_id","git_tree_id"],"needs":["git_blob_create_frombuffer","git_blob_create_fromchunks","git_blob_create_fromdisk","git_blob_create_fromfile","git_blob_lookup","git_blob_lookup_prefix","git_commit_create","git_commit_create_v","git_commit_lookup","git_commit_lookup_prefix","git_merge_base","git_merge_base_many","git_note_create","git_note_read","git_note_remove","git_object_lookup","git_object_lookup_prefix","git_odb_exists","git_odb_foreach","git_odb_hash","git_odb_hashfile","git_odb_open_rstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write","git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_equal","git_oid_fmt","git_oid_fromraw","git_oid_fromstr","git_oid_fromstrn","git_oid_iszero","git_oid_ncmp","git_oid_pathfmt","git_oid_streq","git_oid_tostr","git_reference_create_oid","git_reference_name_to_oid","git_reference_set_oid","git_reflog_append","git_revwalk_hide","git_revwalk_next","git_revwalk_push","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_lookup","git_tag_lookup_prefix","git_tree_create_fromindex","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_insert","git_treebuilder_write"]}}],["git_oid_shorten",{"type":"struct","value":"git_oid_shorten","file":"oid.h","line":194,"lineto":194,"block":"","tdef":"typedef","comments":"OID Shortener object","used":{"returns":["git_oid_shorten_new"],"needs":["git_oid_shorten_add","git_oid_shorten_free"]}}],["git_otype",{"type":"enum","file":"types.h","line":67,"lineto":78,"block":"GIT_OBJ_ANY\nGIT_OBJ_BAD\nGIT_OBJ__EXT1\nGIT_OBJ_COMMIT\nGIT_OBJ_TREE\nGIT_OBJ_BLOB\nGIT_OBJ_TAG\nGIT_OBJ__EXT2\nGIT_OBJ_OFS_DELTA\nGIT_OBJ_REF_DELTA","tdef":"typedef","comments":"Basic type (loose or packed) of any Git object.","used":{"returns":[],"needs":["git_object__size","git_object_lookup","git_object_lookup_prefix","git_object_peel","git_object_type2string","git_object_typeisloose","git_odb_hash","git_odb_hashfile","git_odb_open_wstream","git_odb_read_header","git_odb_write"]}}],["git_ref_t",{"type":"enum","file":"types.h","line":157,"lineto":164,"block":"GIT_REF_INVALID\nGIT_REF_OID\nGIT_REF_SYMBOLIC\nGIT_REF_PACKED\nGIT_REF_HAS_PEEL\nGIT_REF_LISTALL","tdef":"typedef","comments":"Basic type of any Git reference.","used":{"returns":[],"needs":[]}}],["git_reference",{"type":"struct","value":"git_reference","file":"types.h","line":154,"lineto":154,"block":"","tdef":"typedef","comments":"In-memory representation of a reference.","used":{"returns":[],"needs":["git_branch_create","git_branch_lookup","git_branch_move","git_branch_tracking","git_reference_cmp","git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_free","git_reference_has_log","git_reference_is_branch","git_reference_is_packed","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_reload","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type","git_reflog_delete","git_reflog_read","git_reflog_rename","git_repository_head"]}}],["git_reflog",{"type":"struct","value":"git_reflog","file":"types.h","line":135,"lineto":135,"block":"","tdef":"typedef","comments":"Representation of a reference log","used":{"returns":[],"needs":["git_reflog_append","git_reflog_drop","git_reflog_entry_byindex","git_reflog_entrycount","git_reflog_free","git_reflog_read","git_reflog_write"]}}],["git_reflog_entry",{"type":"struct","value":"git_reflog_entry","file":"types.h","line":132,"lineto":132,"block":"","tdef":"typedef","comments":"Representation of a reference log entry","used":{"returns":["git_reflog_entry_byindex"],"needs":["git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_entry_oidnew","git_reflog_entry_oidold"]}}],["git_remote_callbacks",{"type":"struct","value":"git_remote_callbacks","file":"remote.h","line":286,"lineto":291,"block":"int (*progress)(const char *str, void *data)\nint (*completion)(git_remote_completion_type type, void *data)\nint (*update_tips)(const char *refname, const git_oid *a, const git_oid *b, void *data)\nvoid *data","tdef":null,"comments":"The callback settings structure\n\nSet the calbacks to be called by the remote.","used":{"returns":[],"needs":["git_remote_set_callbacks"]}}],["git_remote_head",{"type":"struct","value":"git_remote_head","file":"net.h","line":37,"lineto":42,"block":"int local:1\ngit_oid oid\ngit_oid loid\nchar *name","tdef":null,"comments":"Remote head description, given out on `ls` calls.","used":{"returns":[],"needs":[]}}],["git_repository",{"type":"struct","value":"git_repository","file":"types.h","line":96,"lineto":96,"block":"","tdef":"typedef","comments":"Representation of an existing git repository,\nincluding all its object contents","used":{"returns":["git_object_owner","git_reference_owner","git_revwalk_repository"],"needs":["git_attr_add_macro","git_attr_cache_flush","git_attr_foreach","git_attr_get","git_attr_get_many","git_blob_create_frombuffer","git_blob_create_fromchunks","git_blob_create_fromdisk","git_blob_create_fromfile","git_blob_lookup","git_blob_lookup_prefix","git_branch_create","git_branch_delete","git_branch_foreach","git_branch_lookup","git_commit_create","git_commit_create_v","git_commit_lookup","git_commit_lookup_prefix","git_diff_index_to_tree","git_diff_tree_to_tree","git_diff_workdir_to_index","git_diff_workdir_to_tree","git_merge_base","git_merge_base_many","git_note_create","git_note_default_ref","git_note_foreach","git_note_read","git_note_remove","git_object_lookup","git_object_lookup_prefix","git_reference_create_oid","git_reference_create_symbolic","git_reference_foreach","git_reference_foreach_glob","git_reference_list","git_reference_lookup","git_reference_name_to_oid","git_reference_packall","git_remote_add","git_remote_list","git_remote_load","git_remote_new","git_repository_config","git_repository_free","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_index","git_repository_init","git_repository_is_bare","git_repository_is_empty","git_repository_message","git_repository_message_remove","git_repository_odb","git_repository_open","git_repository_open_ext","git_repository_path","git_repository_set_config","git_repository_set_index","git_repository_set_odb","git_repository_set_workdir","git_repository_workdir","git_repository_wrap_odb","git_reset","git_revparse_single","git_revwalk_new","git_status_file","git_status_foreach","git_status_foreach_ext","git_status_should_ignore","git_submodule_foreach","git_submodule_lookup","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_list","git_tag_list_match","git_tag_lookup","git_tag_lookup_prefix","git_tree_entry_to_object","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_write"]}}],["git_reset_type",{"type":"enum","file":"types.h","line":173,"lineto":182,"block":"GIT_RESET_SOFT\nGIT_RESET_MIXED","tdef":"typedef","comments":"Kinds of reset operation.","used":{"returns":[],"needs":["git_reset"]}}],["git_revwalk",{"type":"struct","value":"git_revwalk","file":"types.h","line":102,"lineto":102,"block":"","tdef":"typedef","comments":"Representation of an in-progress walk through the commits in a repo","used":{"returns":[],"needs":["git_revwalk_free","git_revwalk_hide","git_revwalk_hide_glob","git_revwalk_hide_head","git_revwalk_hide_ref","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_push_glob","git_revwalk_push_head","git_revwalk_push_ref","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]}}],["git_signature",{"type":"struct","value":"git_signature","file":"types.h","line":147,"lineto":151,"block":"char *name\nchar *email\ngit_time when","tdef":"typedef","comments":"An action signature (e.g. for committers, taggers, etc)","used":{"returns":["git_commit_author","git_commit_committer","git_reflog_entry_committer","git_signature_dup","git_tag_tagger"],"needs":["git_commit_create","git_commit_create_v","git_note_create","git_note_remove","git_reflog_append","git_signature_dup","git_signature_free","git_signature_new","git_signature_now","git_tag_create"]}}],["git_status_options",{"type":"struct","value":"git_status_options","file":"status.h","line":116,"lineto":120,"block":"git_status_show_t show\nunsigned int flags\ngit_strarray pathspec","tdef":"typedef","comments":"Options to control how callbacks will be made by\n`git_status_foreach_ext()`.","used":{"returns":[],"needs":["git_status_foreach_ext"]}}],["git_status_show_t",{"type":"enum","file":"status.h","line":71,"lineto":76,"block":"GIT_STATUS_SHOW_INDEX_AND_WORKDIR\nGIT_STATUS_SHOW_INDEX_ONLY\nGIT_STATUS_SHOW_WORKDIR_ONLY\nGIT_STATUS_SHOW_INDEX_THEN_WORKDIR","tdef":"typedef","comments":"Select the files on which to report status.\n\n- GIT_STATUS_SHOW_INDEX_AND_WORKDIR is the default.  This is the\n  rough equivalent of `git status --porcelain` where each file\n  will receive a callback indicating its status in the index and\n  in the workdir.\n- GIT_STATUS_SHOW_INDEX_ONLY will only make callbacks for index\n  side of status.  The status of the index contents relative to\n  the HEAD will be given.\n- GIT_STATUS_SHOW_WORKDIR_ONLY will only make callbacks for the\n  workdir side of status, reporting the status of workdir content\n  relative to the index.\n- GIT_STATUS_SHOW_INDEX_THEN_WORKDIR behaves like index-only\n  followed by workdir-only, causing two callbacks to be issued\n  per file (first index then workdir).  This is slightly more\n  efficient than making separate calls.  This makes it easier to\n  emulate the output of a plain `git status`.","used":{"returns":[],"needs":[]}}],["git_submodule",{"type":"struct","value":"git_submodule","file":"submodule.h","line":58,"lineto":67,"block":"char *name\nchar *path\nchar *url\ngit_oid oid\ngit_submodule_update_t update\ngit_submodule_ignore_t ignore\nint fetch_recurse\nint refcount","tdef":"typedef","comments":"Description of submodule\n\nThis record describes a submodule found in a repository.  There\nshould be an entry for every submodule found in the HEAD and for\nevery submodule described in .gitmodules.  The fields are as follows:\n\n- `name` is the name of the submodule from .gitmodules.\n- `path` is the path to the submodule from the repo working directory.\n  It is almost always the same as `name`.\n- `url` is the url for the submodule.\n- `oid` is the HEAD SHA1 for the submodule.\n- `update` is a value from above - see gitmodules(5) update.\n- `ignore` is a value from above - see gitmodules(5) ignore.\n- `fetch_recurse` is 0 or 1 - see gitmodules(5) fetchRecurseSubmodules.\n- `refcount` is for internal use.\n\nIf the submodule has been added to .gitmodules but not yet git added,\nthen the `oid` will be zero.  If the submodule has been deleted, but\nthe delete has not been committed yet, then the `oid` will be set, but\nthe `url` will be NULL.","used":{"returns":[],"needs":["git_submodule_lookup"]}}],["git_tag",{"type":"struct","value":"git_tag","file":"types.h","line":105,"lineto":105,"block":"","tdef":"typedef","comments":"Parsed representation of a tag object.","used":{"returns":[],"needs":["git_tag_free","git_tag_id","git_tag_lookup","git_tag_lookup_prefix","git_tag_message","git_tag_name","git_tag_peel","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]}}],["git_time",{"type":"struct","value":"git_time","file":"types.h","line":141,"lineto":144,"block":"git_time_t time\nint offset","tdef":"typedef","comments":"Time in a signature","used":{"returns":[],"needs":[]}}],["git_tree",{"type":"struct","value":"git_tree","file":"types.h","line":117,"lineto":117,"block":"","tdef":"typedef","comments":"Representation of a tree object.","used":{"returns":[],"needs":["git_commit_create","git_commit_create_v","git_commit_tree","git_diff_index_to_tree","git_diff_tree_to_tree","git_diff_workdir_to_tree","git_index_read_tree","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_bypath","git_tree_entrycount","git_tree_free","git_tree_id","git_tree_lookup","git_tree_lookup_prefix","git_tree_walk","git_treebuilder_create"]}}],["git_tree_entry",{"type":"struct","value":"git_tree_entry","file":"types.h","line":114,"lineto":114,"block":"","tdef":"typedef","comments":"Representation of each one of the entries in a tree object.","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_dup","git_treebuilder_get"],"needs":["git_tree_entry_attributes","git_tree_entry_bypath","git_tree_entry_dup","git_tree_entry_free","git_tree_entry_id","git_tree_entry_name","git_tree_entry_to_object","git_tree_entry_type","git_treebuilder_filter","git_treebuilder_insert"]}}],["git_treebuilder",{"type":"struct","value":"git_treebuilder","file":"types.h","line":120,"lineto":120,"block":"","tdef":"typedef","comments":"Constructor for in-memory trees","used":{"returns":[],"needs":["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]}}],["git_treewalk_cb",{"type":"function pointer","value":"git_treewalk_cb","file":"tree.h","line":325,"lineto":325,"comments":"Callback for the tree traversal method","used":{"returns":[],"needs":["git_tree_walk"]}}]],"prefix":"include/git2","groups":[["attr",["git_attr_add_macro","git_attr_cache_flush","git_attr_foreach","git_attr_get","git_attr_get_many"]],["blob",["git_blob_create_frombuffer","git_blob_create_fromchunks","git_blob_create_fromdisk","git_blob_create_fromfile","git_blob_free","git_blob_lookup","git_blob_lookup_prefix","git_blob_rawcontent","git_blob_rawsize"]],["branch",["git_branch_create","git_branch_delete","git_branch_foreach","git_branch_lookup","git_branch_move","git_branch_tracking"]],["commit",["git_commit_author","git_commit_committer","git_commit_create","git_commit_create_v","git_commit_free","git_commit_id","git_commit_lookup","git_commit_lookup_prefix","git_commit_message","git_commit_message_encoding","git_commit_nth_gen_ancestor","git_commit_parent","git_commit_parent_oid","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_oid"]],["config",["git_config_add_file","git_config_add_file_ondisk","git_config_delete","git_config_file__ondisk","git_config_find_global","git_config_find_system","git_config_foreach","git_config_foreach_match","git_config_free","git_config_get_bool","git_config_get_int32","git_config_get_int64","git_config_get_mapped","git_config_get_multivar","git_config_get_string","git_config_new","git_config_open_global","git_config_open_ondisk","git_config_set_bool","git_config_set_int32","git_config_set_int64","git_config_set_multivar","git_config_set_string"]],["diff",["git_diff_blobs","git_diff_foreach","git_diff_index_to_tree","git_diff_list_free","git_diff_merge","git_diff_print_compact","git_diff_print_patch","git_diff_tree_to_tree","git_diff_workdir_to_index","git_diff_workdir_to_tree"]],["giterr",["giterr_clear","giterr_last"]],["gitwin",["gitwin_get_codepage","gitwin_set_codepage","gitwin_set_utf8"]],["index",["git_index_add","git_index_add2","git_index_append","git_index_append2","git_index_caps","git_index_clear","git_index_entry_stage","git_index_entrycount","git_index_entrycount_unmerged","git_index_find","git_index_free","git_index_get","git_index_get_unmerged_byindex","git_index_get_unmerged_bypath","git_index_open","git_index_read","git_index_read_tree","git_index_remove","git_index_set_caps","git_index_uniq","git_index_write"]],["indexer",["git_indexer_free","git_indexer_hash","git_indexer_new","git_indexer_run","git_indexer_stream_add","git_indexer_stream_finalize","git_indexer_stream_free","git_indexer_stream_hash","git_indexer_stream_new","git_indexer_write"]],["libgit2",["git_libgit2_capabilities","git_libgit2_version"]],["merge",["git_merge_base","git_merge_base_many"]],["message",["git_message_prettify"]],["note",["git_note_create","git_note_default_ref","git_note_foreach","git_note_free","git_note_message","git_note_oid","git_note_read","git_note_remove"]],["object",["git_object__size","git_object_free","git_object_id","git_object_lookup","git_object_lookup_prefix","git_object_owner","git_object_peel","git_object_string2type","git_object_type","git_object_type2string","git_object_typeisloose"]],["odb",["git_odb_add_alternate","git_odb_add_backend","git_odb_exists","git_odb_foreach","git_odb_free","git_odb_hash","git_odb_hashfile","git_odb_new","git_odb_object_data","git_odb_object_free","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_equal","git_oid_fmt","git_oid_fromraw","git_oid_fromstr","git_oid_fromstrn","git_oid_iszero","git_oid_ncmp","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_shorten_new","git_oid_streq","git_oid_tostr"]],["reference",["git_reference_cmp","git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_foreach","git_reference_foreach_glob","git_reference_free","git_reference_has_log","git_reference_is_branch","git_reference_is_packed","git_reference_list","git_reference_lookup","git_reference_name","git_reference_name_to_oid","git_reference_oid","git_reference_owner","git_reference_packall","git_reference_reload","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]],["reflog",["git_reflog_append","git_reflog_delete","git_reflog_drop","git_reflog_entry_byindex","git_reflog_entry_committer","git_reflog_entry_msg","git_reflog_entry_oidnew","git_reflog_entry_oidold","git_reflog_entrycount","git_reflog_free","git_reflog_read","git_reflog_rename","git_reflog_write"]],["refspec",["git_refspec_dst","git_refspec_force","git_refspec_parse","git_refspec_src","git_refspec_src_matches","git_refspec_transform"]],["remote",["git_remote_add","git_remote_check_cert","git_remote_connect","git_remote_connected","git_remote_disconnect","git_remote_download","git_remote_fetchspec","git_remote_free","git_remote_list","git_remote_load","git_remote_ls","git_remote_name","git_remote_new","git_remote_pushspec","git_remote_pushurl","git_remote_save","git_remote_set_callbacks","git_remote_set_fetchspec","git_remote_set_pushspec","git_remote_set_pushurl","git_remote_set_url","git_remote_supported_url","git_remote_update_tips","git_remote_url","git_remote_valid_url"]],["repository",["git_repository_config","git_repository_discover","git_repository_free","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_index","git_repository_init","git_repository_is_bare","git_repository_is_empty","git_repository_message","git_repository_message_remove","git_repository_odb","git_repository_open","git_repository_open_ext","git_repository_path","git_repository_set_config","git_repository_set_index","git_repository_set_odb","git_repository_set_workdir","git_repository_workdir","git_repository_wrap_odb"]],["reset",["git_reset"]],["revparse",["git_revparse_single"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_hide_glob","git_revwalk_hide_head","git_revwalk_hide_ref","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_push_glob","git_revwalk_push_head","git_revwalk_push_ref","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["signature",["git_signature_dup","git_signature_free","git_signature_new","git_signature_now"]],["status",["git_status_file","git_status_foreach","git_status_foreach_ext","git_status_should_ignore"]],["submodule",["git_submodule_foreach","git_submodule_lookup"]],["tag",["git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_free","git_tag_id","git_tag_list","git_tag_list_match","git_tag_lookup","git_tag_lookup_prefix","git_tag_message","git_tag_name","git_tag_peel","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]],["threads",["git_threads_init","git_threads_shutdown"]],["tree",["git_tree_create_fromindex","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_bypath","git_tree_entry_dup","git_tree_entry_free","git_tree_entry_id","git_tree_entry_name","git_tree_entry_to_object","git_tree_entry_type","git_tree_entrycount","git_tree_free","git_tree_id","git_tree_lookup","git_tree_lookup_prefix","git_tree_walk"]],["treebuilder",["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]]],"examples":[["showindex.c","ex/HEAD/showindex.html"],["general.c","ex/HEAD/general.html"],["network/ls-remote.c","ex/HEAD/ls-remote.html"],["network/git2.c","ex/HEAD/git2.html"],["network/index-pack.c","ex/HEAD/index-pack.html"],["network/fetch.c","ex/HEAD/fetch.html"],["diff.c","ex/HEAD/diff.html"]]}