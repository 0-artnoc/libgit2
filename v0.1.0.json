{"files":[{"file":"zlib.h","functions":["deflateBound"],"meta":{"brief":"Git data compression routines","defgroup":"git_zlib Git data compression routines","ingroup":"Git","comments":"\n"},"lines":35},{"file":"tree.h","functions":["git_tree_lookup","git_tree_new","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_entry_2object","git_tree_add_entry","git_tree_remove_entry_byindex","git_tree_remove_entry_byname","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entry_set_attributes"],"meta":{"brief":"Git tree parsing, loading routines","defgroup":"git_tree Git tree parsing, loading routines","ingroup":"Git","comments":"\n"},"lines":185},{"file":"thread-utils.h","functions":[],"meta":{},"lines":56},{"file":"tag.h","functions":["git_tag_lookup","git_tag_new","git_tag_id","git_tag_target","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_set_target","git_tag_set_name","git_tag_set_tagger","git_tag_set_message"],"meta":{"brief":"Git tag parsing routines","defgroup":"git_tag Git tag management","ingroup":"Git","comments":"\n"},"lines":120},{"file":"revwalk.h","functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_hide","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"],"meta":{"brief":"Git revision traversal routines","defgroup":"git_revwalk Git revision traversal routines","ingroup":"Git","comments":"\n"},"lines":112},{"file":"repository.h","functions":["git_repository_open","git_repository_lookup","git_repository_database","git_repository_index","git_repository_newobject","git_object_write","git_object_id","git_object_type","git_object_owner","git_object_free","git_repository_free"],"meta":{"brief":"Git revision object management routines","defgroup":"git_repository Git revision object management routines","ingroup":"Git","comments":"\n"},"lines":171},{"file":"oid.h","functions":["git_oid_mkstr","git_oid_mkraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_to_string","git_oid_cpy","git_oid_cmp"],"meta":{"brief":"Git object id routines","defgroup":"git_oid Git object id routines","ingroup":"Git","comments":"\n"},"lines":122},{"file":"odb.h","functions":["git_odb_open","git_odb_close","git_odb_read","git_odb_read_header","git_odb__read_packed","git_odb__read_loose","git_odb_write","git_obj_close","git_obj_type_to_string","git_obj_string_to_type","git_obj__loose_object_type","git_obj_hash","git_odb_exists"],"meta":{"brief":"Git object database routines","defgroup":"git_odb Git object database routines","ingroup":"Git","comments":"\n"},"lines":200},{"file":"index.h","functions":["git_index_open_bare","git_index_open_inrepo","git_index_clear","git_index_free","git_index_read","git_index_write","git_index_find","git_index_add","git_index_remove","git_index_insert","git_index_get","git_index_entrycount"],"meta":{"brief":"Git index parsing and manipulation routines","defgroup":"git_index Git index parsing and manipulation routines","ingroup":"Git","comments":"\n"},"lines":172},{"file":"errors.h","functions":["git_strerror"],"meta":{"brief":"Git error handling routines and variables","ingroup":"Git","comments":"\n"},"lines":33},{"file":"common.h","functions":[],"meta":{"brief":"Git common platform definitions","defgroup":"git_common Git common platform definitions","ingroup":"Git","comments":"\n"},"lines":133},{"file":"commit.h","functions":["git_commit_lookup","git_commit_new","git_commit_id","git_commit_message_short","git_commit_message","git_commit_time","git_commit_committer","git_commit_author","git_commit_tree","git_commit_add_parent","git_commit_set_message","git_commit_set_committer","git_commit_set_author","git_commit_set_tree"],"meta":{"brief":"Git commit parsing, formatting routines","defgroup":"git_commit Git commit parsing, formatting routines","ingroup":"Git","comments":"\n"},"lines":137},{"file":"blob.h","functions":["git_blob_lookup","git_blob_new","git_blob_set_rawcontent_fromfile","git_blob_set_rawcontent","git_blob_rawcontent","git_blob_rawsize","git_blob_writefile"],"meta":{"brief":"Git blob load and write routines","defgroup":"git_blob Git blob load and write routines","ingroup":"Git","comments":"\n"},"lines":99}],"functions":{"deflateBound":{"type":"function","file":"zlib.h","line":27,"lineto":31,"args":[{"name":"stream","type":"z_streamp","comment":"the stream pointer."},{"name":"s","type":"size_t","comment":"tream the stream pointer."}],"argline":"z_streamp stream, size_t s","sig":"z_streamp::size_t","return":{"type":"size_t","comment":"maximum length of the compressed data."},"description":"deflateBound returns an upper bound on the compressed size.","comments":"This is a stub function used when zlib does not supply the\ndeflateBound() implementation itself.\n","group":"zlib"},"git_tree_lookup":{"type":"function","file":"tree.h","line":34,"lineto":34,"args":[{"name":"tree","type":"git_tree **","comment":"pointer to the looked up tree"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tree."},{"name":"id","type":"const git_oid *","comment":"identity of the tree to locate."}],"argline":"git_tree **tree, git_repository *repo, const git_oid *id","sig":"git_tree **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Lookup a tree object from the repository.\nThe generated tree object is owned by the revision\nrepo and shall not be freed by the user.","comments":"","group":"tree"},"git_tree_new":{"type":"function","file":"tree.h","line":47,"lineto":47,"args":[{"name":"tree","type":"git_tree **","comment":"pointer to the new tree"},{"name":"repo","type":"git_repository *","comment":"The repository where the object will reside"}],"argline":"git_tree **tree, git_repository *repo","sig":"git_tree **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new in-memory git_tree.","comments":"The tree object must be manually filled using\nsetter methods before it can be written to its\nrepository.\n","group":"tree"},"git_tree_id":{"type":"function","file":"tree.h","line":54,"lineto":54,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"const git_oid *","comment":"object identity for the tree."},"description":"Get the id of a tree.\n@param tree a previously loaded tree.\n@return object identity for the tree.","comments":"","group":"tree"},"git_tree_entrycount":{"type":"function","file":"tree.h","line":62,"lineto":62,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"size_t","comment":"the number of entries in the tree"},"description":"Get the number of entries listed in a tree\n@param tree a previously loaded tree.\n@return the number of entries in the tree","comments":"","group":"tree"},"git_tree_entry_byname":{"type":"function","file":"tree.h","line":70,"lineto":70,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."},{"name":"filename","type":"const char *","comment":"the filename of the desired entry"}],"argline":"git_tree *tree, const char *filename","sig":"git_tree *::const char *","return":{"type":"git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"Lookup a tree entry by its filename\n@param tree a previously loaded tree.\n@param filename the filename of the desired entry\n@return the tree entry; NULL if not found","comments":"","group":"tree"},"git_tree_entry_byindex":{"type":"function","file":"tree.h","line":78,"lineto":78,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."},{"name":"idx","type":"int","comment":"the position in the entry list"}],"argline":"git_tree *tree, int idx","sig":"git_tree *::int","return":{"type":"git_tree_entry *","comment":"the tree entry; NULL if not found"},"description":"Lookup a tree entry by its position in the tree\n@param tree a previously loaded tree.\n@param idx the position in the entry list\n@return the tree entry; NULL if not found","comments":"","group":"tree"},"git_tree_entry_attributes":{"type":"function","file":"tree.h","line":85,"lineto":85,"args":[{"name":"entry","type":"git_tree_entry *","comment":"a tree entry"}],"argline":"git_tree_entry *entry","sig":"git_tree_entry *","return":{"type":"unsigned int","comment":"attributes as an integer"},"description":"Get the UNIX file attributes of a tree entry\n@param entry a tree entry\n@return attributes as an integer","comments":"","group":"tree"},"git_tree_entry_name":{"type":"function","file":"tree.h","line":92,"lineto":92,"args":[{"name":"entry","type":"git_tree_entry *","comment":"a tree entry"}],"argline":"git_tree_entry *entry","sig":"git_tree_entry *","return":{"type":"const char *","comment":"the name of the file"},"description":"Get the filename of a tree entry\n@param entry a tree entry\n@return the name of the file","comments":"","group":"tree"},"git_tree_entry_id":{"type":"function","file":"tree.h","line":99,"lineto":99,"args":[{"name":"entry","type":"git_tree_entry *","comment":"a tree entry"}],"argline":"git_tree_entry *entry","sig":"git_tree_entry *","return":{"type":"const git_oid *","comment":"the oid of the object"},"description":"Get the id of the object pointed by the entry\n@param entry a tree entry\n@return the oid of the object","comments":"","group":"tree"},"git_tree_entry_2object":{"type":"function","file":"tree.h","line":108,"lineto":108,"args":[{"name":"object","type":"git_object **","comment":"pointer to the converted object"},{"name":"entry","type":"git_tree_entry *","comment":"a tree entry"}],"argline":"git_object **object, git_tree_entry *entry","sig":"git_object **::git_tree_entry *","return":{"type":"int","comment":"a reference to the pointed object in the repository"},"description":"Convert a tree entry to the git_object it points too.","comments":"","group":"tree"},"git_tree_add_entry":{"type":"function","file":"tree.h","line":122,"lineto":122,"args":[{"name":"tree","type":"git_tree *","comment":"Tree object to store the entry @iparam id OID for the tree entry"},{"name":"id","type":"const git_oid *"},{"name":"filename","type":"const char *","comment":"Filename for the tree entry"},{"name":"attributes","type":"int","comment":"UNIX file attributes for the entry"}],"argline":"git_tree *tree, const git_oid *id, const char *filename, int attributes","sig":"git_tree *::const git_oid *::const char *::int","return":{"type":"int","comment":"0 on success; otherwise error code"},"description":"Add a new entry to a tree.","comments":"This will mark the tree as modified; the new entry will\nbe written back to disk on the next git_object_write()\n","group":"tree"},"git_tree_remove_entry_byindex":{"type":"function","file":"tree.h","line":136,"lineto":136,"args":[{"name":"tree","type":"git_tree *","comment":"Tree where to remove the entry"},{"name":"idx","type":"int","comment":"index of the entry"}],"argline":"git_tree *tree, int idx","sig":"git_tree *::int","return":{"type":"int","comment":"0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"},"description":"Remove an entry by its index.","comments":"Index must be >= 0 and < than git_tree_entrycount().\n\nThis will mark the tree as modified; the modified entry will\nbe written back to disk on the next git_object_write()\n","group":"tree"},"git_tree_remove_entry_byname":{"type":"function","file":"tree.h","line":148,"lineto":148,"args":[{"name":"tree","type":"git_tree *","comment":"Tree where to remove the entry"},{"name":"filename","type":"const char *","comment":"File name of the entry"}],"argline":"git_tree *tree, const char *filename","sig":"git_tree *::const char *","return":{"type":"int","comment":"0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"},"description":"Remove an entry by its filename.","comments":"This will mark the tree as modified; the modified entry will\nbe written back to disk on the next git_object_write()\n","group":"tree"},"git_tree_entry_set_id":{"type":"function","file":"tree.h","line":159,"lineto":159,"args":[{"name":"entry","type":"git_tree_entry *","comment":"Entry object which will be modified"},{"name":"oid","type":"const git_oid *","comment":"new SHA1 oid for the entry"}],"argline":"git_tree_entry *entry, const git_oid *oid","sig":"git_tree_entry *::const git_oid *","return":{"type":"void"},"description":"Change the SHA1 id of a tree entry.","comments":"This will mark the tree that contains the entry as modified;\nthe modified entry will be written back to disk on the next git_object_write()\n","group":"tree"},"git_tree_entry_set_name":{"type":"function","file":"tree.h","line":170,"lineto":170,"args":[{"name":"entry","type":"git_tree_entry *","comment":"Entry object which will be modified"},{"name":"name","type":"const char *"}],"argline":"git_tree_entry *entry, const char *name","sig":"git_tree_entry *::const char *","return":{"type":"void"},"description":"Change the filename of a tree entry.","comments":"This will mark the tree that contains the entry as modified;\nthe modified entry will be written back to disk on the next git_object_write()\n","group":"tree"},"git_tree_entry_set_attributes":{"type":"function","file":"tree.h","line":181,"lineto":181,"args":[{"name":"entry","type":"git_tree_entry *","comment":"Entry object which will be modified"},{"name":"attr","type":"int"}],"argline":"git_tree_entry *entry, int attr","sig":"git_tree_entry *::int","return":{"type":"void"},"description":"Change the attributes of a tree entry.","comments":"This will mark the tree that contains the entry as modified;\nthe modified entry will be written back to disk on the next git_object_write()\n","group":"tree"},"git_tag_lookup":{"type":"function","file":"tag.h","line":31,"lineto":31,"args":[{"name":"tag","type":"git_tag **","comment":"pointer to the looked up tag"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tag."},{"name":"id","type":"const git_oid *","comment":"identity of the tag to locate."}],"argline":"git_tag **tag, git_repository *repo, const git_oid *id","sig":"git_tag **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Lookup a tag object from the repository.\nThe generated tag object is owned by the revision\nrepo and shall not be freed by the user.","comments":"","group":"tag"},"git_tag_new":{"type":"function","file":"tag.h","line":44,"lineto":44,"args":[{"name":"tag","type":"git_tag **","comment":"pointer to the new tag"},{"name":"repo","type":"git_repository *","comment":"The repository where the object will reside"}],"argline":"git_tag **tag, git_repository *repo","sig":"git_tag **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new in-memory git_tag.","comments":"The tag object must be manually filled using\nsetter methods before it can be written to its\nrepository.\n","group":"tag"},"git_tag_id":{"type":"function","file":"tag.h","line":51,"lineto":51,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const git_oid *","comment":"object identity for the tag."},"description":"Get the id of a tag.\n@param tag a previously loaded tag.\n@return object identity for the tag.","comments":"","group":"tag"},"git_tag_target":{"type":"function","file":"tag.h","line":58,"lineto":58,"args":[{"name":"t","type":"git_tag *","comment":"ag a previously loaded tag."}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"const git_object *","comment":"reference to a repository object"},"description":"Get the tagged object of a tag\n@param tag a previously loaded tag.\n@return reference to a repository object","comments":"","group":"tag"},"git_tag_type":{"type":"function","file":"tag.h","line":65,"lineto":65,"args":[{"name":"t","type":"git_tag *","comment":"ag a previously loaded tag."}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"git_otype","comment":"type of the tagged object"},"description":"Get the type of a tag's tagged object\n@param tag a previously loaded tag.\n@return type of the tagged object","comments":"","group":"tag"},"git_tag_name":{"type":"function","file":"tag.h","line":72,"lineto":72,"args":[{"name":"t","type":"git_tag *","comment":"ag a previously loaded tag."}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"const char *","comment":"name of the tag"},"description":"Get the name of a tag\n@param tag a previously loaded tag.\n@return name of the tag","comments":"","group":"tag"},"git_tag_tagger":{"type":"function","file":"tag.h","line":79,"lineto":79,"args":[{"name":"t","type":"git_tag *","comment":"ag a previously loaded tag."}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"const git_person *","comment":"reference to the tag's author"},"description":"Get the tagger (author) of a tag\n@param tag a previously loaded tag.\n@return reference to the tag's author","comments":"","group":"tag"},"git_tag_message":{"type":"function","file":"tag.h","line":86,"lineto":86,"args":[{"name":"t","type":"git_tag *","comment":"ag a previously loaded tag."}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"const char *","comment":"message of the tag"},"description":"Get the message of a tag\n@param tag a previously loaded tag.\n@return message of the tag","comments":"","group":"tag"},"git_tag_set_target":{"type":"function","file":"tag.h","line":93,"lineto":93,"args":[{"name":"tag","type":"git_tag *","comment":"The tag to modify"},{"name":"target","type":"git_object *","comment":"the new tagged target"}],"argline":"git_tag *tag, git_object *target","sig":"git_tag *::git_object *","return":{"type":"void"},"description":"Set the target of a tag (i.e. the object that the tag points to)\n@param tag The tag to modify\n@param target the new tagged target","comments":"","group":"tag"},"git_tag_set_name":{"type":"function","file":"tag.h","line":100,"lineto":100,"args":[{"name":"tag","type":"git_tag *","comment":"The tag to modify"},{"name":"name","type":"const char *","comment":"the new name for the tag"}],"argline":"git_tag *tag, const char *name","sig":"git_tag *::const char *","return":{"type":"void"},"description":"Set the name of a tag\n@param tag The tag to modify\n@param name the new name for the tag","comments":"","group":"tag"},"git_tag_set_tagger":{"type":"function","file":"tag.h","line":109,"lineto":109,"args":[{"name":"tag","type":"git_tag *","comment":"The tag to modify"},{"name":"name","type":"const char *","comment":"the name of the new tagger"},{"name":"email","type":"const char *","comment":"the email of the new tagger"},{"name":"time","type":"time_t","comment":"the time when the tag was created"}],"argline":"git_tag *tag, const char *name, const char *email, time_t time","sig":"git_tag *::const char *::const char *::time_t","return":{"type":"void"},"description":"Set the tagger of a tag\n@param tag The tag to modify\n@param name the name of the new tagger\n@param email the email of the new tagger\n@param time the time when the tag was created","comments":"","group":"tag"},"git_tag_set_message":{"type":"function","file":"tag.h","line":116,"lineto":116,"args":[{"name":"tag","type":"git_tag *","comment":"The tag to modify"},{"name":"message","type":"const char *","comment":"the new tagger for the tag"}],"argline":"git_tag *tag, const char *message","sig":"git_tag *::const char *","return":{"type":"void"},"description":"Set the message of a tag\n@param tag The tag to modify\n@param message the new tagger for the tag","comments":"","group":"tag"},"git_revwalk_new":{"type":"function","file":"revwalk.h","line":55,"lineto":55,"args":[{"name":"walker","type":"git_revwalk **","comment":"pointer to the new revision walker"},{"name":"repo","type":"git_repository *","comment":"the repo to walk through"}],"argline":"git_revwalk **walker, git_repository *repo","sig":"git_revwalk **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Allocate a new revision walker to iterate through a repo.","comments":"","group":"revwalk"},"git_revwalk_reset":{"type":"function","file":"revwalk.h","line":61,"lineto":61,"args":[{"name":"walker","type":"git_revwalk *","comment":"handle to reset."}],"argline":"git_revwalk *walker","sig":"git_revwalk *","return":{"type":"void"},"description":"Reset the walking machinery for reuse.\n@param walker handle to reset.","comments":"","group":"revwalk"},"git_revwalk_push":{"type":"function","file":"revwalk.h","line":70,"lineto":70,"args":[{"name":"walk","type":"git_revwalk *","comment":"er the walker being used for the traversal."},{"name":"commit","type":"git_commit *","comment":"the commit to start from."}],"argline":"git_revwalk *walk, git_commit *commit","sig":"git_revwalk *::git_commit *","return":{"type":"int"},"description":"Mark a commit to start traversal from.\nThe commit object must belong to the repo which is being walked through.","comments":"","group":"revwalk"},"git_revwalk_hide":{"type":"function","file":"revwalk.h","line":77,"lineto":77,"args":[{"name":"walk","type":"git_revwalk *","comment":"er the walker being used for the traversal."},{"name":"commit","type":"git_commit *","comment":"the commit that will be ignored during the traversal"}],"argline":"git_revwalk *walk, git_commit *commit","sig":"git_revwalk *::git_commit *","return":{"type":"int"},"description":"Mark a commit (and its ancestors) uninteresting for the output.\n@param walker the walker being used for the traversal.\n@param commit the commit that will be ignored during the traversal","comments":"","group":"revwalk"},"git_revwalk_next":{"type":"function","file":"revwalk.h","line":84,"lineto":84,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker to pop the commit from."}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"git_commit *","comment":"next commit; NULL if there is no more output."},"description":"Get the next commit from the revision traversal.\n@param walk the walker to pop the commit from.\n@return next commit; NULL if there is no more output.","comments":"","group":"revwalk"},"git_revwalk_sorting":{"type":"function","file":"revwalk.h","line":93,"lineto":93,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"sort_mode","type":"unsigned int","comment":"combination of GIT_RPSORT_XXX flags"}],"argline":"git_revwalk *walk, unsigned int sort_mode","sig":"git_revwalk *::unsigned int","return":{"type":"int"},"description":"Change the sorting mode when iterating through the\nrepository's contents.\nChanging the sorting mode resets the walker.\n@param walk the walker being used for the traversal.\n@param sort_mode combination of GIT_RPSORT_XXX flags","comments":"","group":"revwalk"},"git_revwalk_free":{"type":"function","file":"revwalk.h","line":99,"lineto":99,"args":[{"name":"walk","type":"git_revwalk *","comment":"traversal handle to close. If NULL nothing occurs."}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"void"},"description":"Free a revwalk previously allocated.\n@param walk traversal handle to close.  If NULL nothing occurs.","comments":"","group":"revwalk"},"git_revwalk_repository":{"type":"function","file":"revwalk.h","line":108,"lineto":108,"args":[{"name":"walk","type":"git_revwalk *","comment":"the revision walker"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"git_repository *","comment":"the repository being walked"},"description":"Return the repository on which this walker\nis operating.","comments":"","group":"revwalk"},"git_repository_open":{"type":"function","file":"repository.h","line":41,"lineto":41,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"path","type":"const char *","comment":"the path to the repository"}],"argline":"git_repository **repository, const char *path","sig":"git_repository **::const char *","return":{"type":"int","comment":"the new repository handle; NULL on error"},"description":"Open a git repository.","comments":"The 'path' argument must point to an existing git repository\nfolder, e.g.\n\n\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\tobjects/\n\t\t\t\t\tindex\n\t\t\t\t\tHEAD\n\nThe method will automatically detect if 'path' is a normal\nor bare repository or fail is 'path' is neither.\n","group":"repository"},"git_repository_lookup":{"type":"function","file":"repository.h","line":61,"lineto":61,"args":[{"name":"object","type":"git_object **","comment":"pointer to the looked-up object"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the object"},{"name":"id","type":"const git_oid *","comment":"the unique identifier for the object"},{"name":"type","type":"git_otype","comment":"the type of the object"}],"argline":"git_object **object, git_repository *repo, const git_oid *id, git_otype type","sig":"git_object **::git_repository *::const git_oid *::git_otype","return":{"type":"int","comment":"a reference to the object"},"description":"Lookup a reference to one of the objects in the repostory.","comments":"The generated reference is owned by the repository and\nshould not be freed by the user.\n\nThe 'type' parameter must match the type of the object\nin the odb; the method will fail otherwise.\nThe special value 'GIT_OBJ_ANY' may be passed to let\nthe method guess the object's type.\n","group":"repository"},"git_repository_database":{"type":"function","file":"repository.h","line":69,"lineto":69,"args":[{"name":"repo","type":"git_repository *","comment":"a repository object"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"git_odb *","comment":"a pointer to the object db"},"description":"Get the object database behind a Git repository","comments":"","group":"repository"},"git_repository_index":{"type":"function","file":"repository.h","line":78,"lineto":78,"args":[{"name":"rpeo","type":"git_repository *"}],"argline":"git_repository *rpeo","sig":"git_repository *","return":{"type":"git_index *","comment":"a pointer to the Index object; NULL if the index cannot be opened"},"description":"Get the Index file of a Git repository","comments":"","group":"repository"},"git_repository_newobject":{"type":"function","file":"repository.h","line":101,"lineto":101,"args":[{"name":"object","type":"git_object **","comment":"pointer to the new object @parem repo Repository where the object belongs"},{"name":"repo","type":"git_repository *"},{"name":"type","type":"git_otype","comment":"Type of the object to be created"}],"argline":"git_object **object, git_repository *repo, git_otype type","sig":"git_object **::git_repository *::git_otype","return":{"type":"int","comment":"the new object"},"description":"Create a new in-memory repository object with\nthe given type.","comments":"The object's attributes can be filled in using the\ncorresponding setter methods.\n\nThe object will be written back to given git_repository\nwhen the git_object_write() function is called; objects\ncannot be written to disk until all their main\nattributes have been properly filled.\n\nObjects are instantiated with no SHA1 id; their id\nwill be automatically generated when writing to the\nrepository.\n","group":"repository"},"git_object_write":{"type":"function","file":"repository.h","line":120,"lineto":120,"args":[{"name":"object","type":"git_object *","comment":"Git object to write back"}],"argline":"git_object *object","sig":"git_object *","return":{"type":"int","comment":"0 on success; otherwise an error code"},"description":"Write back an object to disk.","comments":"The object will be written to its corresponding\nrepository.\n\nIf the object has no changes since it was first\nread from the repository, no actions will take place.\n\nIf the object has been modified since it was read from\nthe repository, or it has been created from scratch\nin memory, it will be written to the repository and\nits SHA1 ID will be updated accordingly.\n","group":"object"},"git_object_id":{"type":"function","file":"repository.h","line":131,"lineto":131,"args":[{"name":"obj","type":"git_object *","comment":"the repository object"}],"argline":"git_object *obj","sig":"git_object *","return":{"type":"const git_oid *","comment":"the SHA1 id"},"description":"Get the id (SHA1) of a repository object","comments":"In-memory objects created by git_object_new() do not\nhave a SHA1 ID until they are written on a repository.\n","group":"object"},"git_object_type":{"type":"function","file":"repository.h","line":139,"lineto":139,"args":[{"name":"obj","type":"git_object *","comment":"the repository object"}],"argline":"git_object *obj","sig":"git_object *","return":{"type":"git_otype","comment":"the object's type"},"description":"Get the object type of an object","comments":"","group":"object"},"git_object_owner":{"type":"function","file":"repository.h","line":147,"lineto":147,"args":[{"name":"obj","type":"git_object *","comment":"the object"}],"argline":"git_object *obj","sig":"git_object *","return":{"type":"git_repository *","comment":"the repository who owns this object"},"description":"Get the repository that owns this object","comments":"","group":"object"},"git_object_free":{"type":"function","file":"repository.h","line":161,"lineto":161,"args":[{"name":"object","type":"git_object *","comment":"the object to free"}],"argline":"git_object *object","sig":"git_object *","return":{"type":"void"},"description":"Free a reference to one of the objects in the repository.","comments":"Repository objects are managed automatically by the library,\nbut this method can be used to force freeing one of the\nobjects.\n\nCareful: freeing objects in the middle of a repository\ntraversal will most likely cause errors.\n","group":"object"},"git_repository_free":{"type":"function","file":"repository.h","line":167,"lineto":167,"args":[{"name":"repo","type":"git_repository *","comment":"repository handle to close. If NULL nothing occurs."}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"void"},"description":"Free a previously allocated repository\n@param repo repository handle to close. If NULL nothing occurs.","comments":"","group":"repository"},"git_oid_mkstr":{"type":"function","file":"oid.h","line":36,"lineto":36,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes)."}],"argline":"git_oid *out, const char *str","sig":"git_oid *::const char *","return":{"type":"int","comment":"GIT_SUCCESS if valid; GIT_ENOTOID on failure."},"description":"Parse a hex formatted object id into a git_oid.\n@param out oid structure the result is written into.\n@param str input hex string; must be pointing at the start of\n       the hex sequence and have at least the number of bytes\n       needed for an oid encoded in hex (40 bytes).\n@return GIT_SUCCESS if valid; GIT_ENOTOID on failure.","comments":"","group":"oid"},"git_oid_mkraw":{"type":"function","file":"oid.h","line":43,"lineto":46,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"raw","type":"const unsigned char *","comment":"the raw input bytes to be copied."}],"argline":"git_oid *out, const unsigned char *raw","sig":"git_oid *::const unsigned char *","return":{"type":"void"},"description":"Copy an already raw oid into a git_oid structure.\n@param out oid structure the result is written into.\n@param raw the raw input bytes to be copied.","comments":"","group":"oid"},"git_oid_fmt":{"type":"function","file":"oid.h","line":57,"lineto":57,"args":[{"name":"str","type":"char *","comment":"output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (40 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required."},{"name":"oid","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *str, const git_oid *oid","sig":"char *::const git_oid *","return":{"type":"void"},"description":"Format a git_oid into a hex string.\n@param str output hex string; must be pointing at the start of\n       the hex sequence and have at least the number of bytes\n       needed for an oid encoded in hex (40 bytes).  Only the\n       oid digits are written; a '\\\\0' terminator must be added\n       by the caller if it is required.\n@param oid oid structure to format.","comments":"","group":"oid"},"git_oid_pathfmt":{"type":"function","file":"oid.h","line":72,"lineto":72,"args":[{"name":"str","type":"char *","comment":"output hex string; must be pointing at the start of the hex sequence and have at least the number of bytes needed for an oid encoded in hex (41 bytes). Only the oid digits are written; a '\\\\0' terminator must be added by the caller if it is required."},{"name":"oid","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *str, const git_oid *oid","sig":"char *::const git_oid *","return":{"type":"void"},"description":"Format a git_oid into a loose-object path string.\n<p>\nThe resulting string is \"aa/...\", where \"aa\" is the first two\nhex digitis of the oid and \"...\" is the remaining 38 digits.","comments":"","group":"oid"},"git_oid_allocfmt":{"type":"function","file":"oid.h","line":80,"lineto":80,"args":[{"name":"oid","type":"const git_oid *","comment":"the oid structure to format"}],"argline":"const git_oid *oid","sig":"const git_oid *","return":{"type":"char *","comment":"the c-string; NULL if memory is exhausted. Caller must deallocate the string with free()."},"description":"Format a gid_oid into a newly allocated c-string.\n@param oid the oid structure to format\n@return the c-string; NULL if memory is exhausted.  Caller must\n        deallocate the string with free().","comments":"","group":"oid"},"git_oid_to_string":{"type":"function","file":"oid.h","line":97,"lineto":97,"args":[{"name":"out","type":"char *","comment":"the buffer into which the oid string is output."},{"name":"n","type":"size_t","comment":"the size of the out buffer."},{"name":"oid","type":"const git_oid *","comment":"the oid structure to format."}],"argline":"char *out, size_t n, const git_oid *oid","sig":"char *::size_t::const git_oid *","return":{"type":"char *","comment":"the out buffer pointer, assuming no input parameter errors, otherwise a pointer to an empty string."},"description":"Format a git_oid into a buffer as a hex format c-string.\n<p>\nIf the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\noid c-string will be truncated to n-1 characters. If there are\nany input parameter errors (out == NULL, n == 0, oid == NULL),\nthen a pointer to an empty string is returned, so that the return\nvalue can always be printed.","comments":"","group":"oid"},"git_oid_cpy":{"type":"function","file":"oid.h","line":104,"lineto":107,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"src","type":"const git_oid *","comment":"oid structure to copy from."}],"argline":"git_oid *out, const git_oid *src","sig":"git_oid *::const git_oid *","return":{"type":"void"},"description":"Copy an oid from one structure to another.\n@param out oid structure the result is written into.\n@param src oid structure to copy from.","comments":"","group":"oid"},"git_oid_cmp":{"type":"function","file":"oid.h","line":115,"lineto":118,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."}],"argline":"const git_oid *a, const git_oid *b","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":"<0, 0, >0 if a < b, a == b, a > b."},"description":"Compare two oid structures.\n@param a first oid structure.\n@param b second oid structure.\n@return <0, 0, >0 if a < b, a == b, a > b.","comments":"","group":"oid"},"git_odb_open":{"type":"function","file":"odb.h","line":28,"lineto":28,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened. Set to NULL if the open failed."},{"name":"objects_dir","type":"const char *","comment":"path of the database's \"objects\" directory."}],"argline":"git_odb **out, const char *objects_dir","sig":"git_odb **::const char *","return":{"type":"int","comment":"GIT_SUCCESS if the database opened; otherwise an error code describing why the open was not possible."},"description":"Open an object database for read/write access.\n@param out location to store the database pointer, if opened.\n           Set to NULL if the open failed.\n@param objects_dir path of the database's \"objects\" directory.\n@return GIT_SUCCESS if the database opened; otherwise an error\n        code describing why the open was not possible.","comments":"","group":"odb"},"git_odb_close":{"type":"function","file":"odb.h","line":34,"lineto":34,"args":[{"name":"db","type":"git_odb *","comment":"database pointer to close. If NULL no action is taken."}],"argline":"git_odb *db","sig":"git_odb *","return":{"type":"void"},"description":"Close an open object database.\n@param db database pointer to close.  If NULL no action is taken.","comments":"","group":"odb"},"git_odb_read":{"type":"function","file":"odb.h","line":69,"lineto":69,"args":[{"name":"out","type":"git_rawobj *","comment":"object descriptor to populate upon reading."},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_rawobj *out, git_odb *db, const git_oid *id","sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":"- GIT_SUCCESS if the object was read; - GIT_ENOTFOUND if the object is not in the database."},"description":"Read an object from the database.","comments":"If GIT_ENOTFOUND then out->data is set to NULL.\n","group":"odb"},"git_odb_read_header":{"type":"function","file":"odb.h","line":88,"lineto":88,"args":[{"name":"out","type":"git_rawobj *","comment":"object descriptor to populate upon reading."},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_rawobj *out, git_odb *db, const git_oid *id","sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":"- GIT_SUCCESS if the object was read; - GIT_ENOTFOUND if the object is not in the database."},"description":"Read the header of an object from the database, without\nreading its full contents.","comments":"Only the 'type' and 'len' fields of the git_rawobj structure\nare filled. The 'data' pointer will always be NULL.\n\nThe raw object pointed by 'out' doesn't need to be manually\nclosed with git_obj_close().\n","group":"odb"},"git_odb__read_packed":{"type":"function","file":"odb.h","line":102,"lineto":102,"args":[{"name":"out","type":"git_rawobj *","comment":"object descriptor to populate upon reading."},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_rawobj *out, git_odb *db, const git_oid *id","sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":"- GIT_SUCCESS if the object was read. - GIT_ENOTFOUND if the object is not in the database."},"description":"Read an object from the database using only pack files.","comments":"If GIT_ENOTFOUND then out->data is set to NULL.\n","group":"odb"},"git_odb__read_loose":{"type":"function","file":"odb.h","line":116,"lineto":116,"args":[{"name":"out","type":"git_rawobj *","comment":"object descriptor to populate upon reading."},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_rawobj *out, git_odb *db, const git_oid *id","sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":"- GIT_SUCCESS if the object was read. - GIT_ENOTFOUND if the object is not in the database."},"description":"Read an object from the database using only loose object files.","comments":"If GIT_ENOTFOUND then out->data is set to NULL.\n","group":"odb"},"git_odb_write":{"type":"function","file":"odb.h","line":128,"lineto":128,"args":[{"name":"id","type":"git_oid *","comment":"identity of the object written."},{"name":"db","type":"git_odb *","comment":"database to which the object should be written."},{"name":"obj","type":"git_rawobj *","comment":"object descriptor for the object to write."}],"argline":"git_oid *id, git_odb *db, git_rawobj *obj","sig":"git_oid *::git_odb *::git_rawobj *","return":{"type":"int","comment":"- GIT_SUCCESS if the object was written; - GIT_ERROR otherwise."},"description":"Write an object to the database.","comments":"","group":"odb"},"git_obj_close":{"type":"function","file":"odb.h","line":139,"lineto":143,"args":[{"name":"obj","type":"git_rawobj *","comment":"object descriptor to free."}],"argline":"git_rawobj *obj","sig":"git_rawobj *","return":{"type":"void"},"description":"Release all memory used by the obj structure.","comments":"As a result of this call, obj->data will be set to NULL.\n\nIf obj->data is already NULL, nothing happens.\n","group":"obj"},"git_obj_type_to_string":{"type":"function","file":"odb.h","line":154,"lineto":154,"args":[{"name":"type","type":"git_otype","comment":"object type to convert."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"const char *","comment":"the corresponding string representation."},"description":"Convert an object type to it's string representation.","comments":"The result is a pointer to a string in static memory and\nshould not be free()'ed.\n","group":"obj"},"git_obj_string_to_type":{"type":"function","file":"odb.h","line":162,"lineto":162,"args":[{"name":"str","type":"const char *","comment":"the string to convert."}],"argline":"const char *str","sig":"const char *","return":{"type":"git_otype","comment":"the corresponding git_otype."},"description":"Convert a string object type representation to it's git_otype.","comments":"","group":"obj"},"git_obj__loose_object_type":{"type":"function","file":"odb.h","line":171,"lineto":171,"args":[{"name":"type","type":"git_otype","comment":"object type to test."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"int","comment":"true if the type represents a valid loose object type, false otherwise."},"description":"Determine if the given git_otype is a valid loose object type.","comments":"","group":"obj"},"git_obj_hash":{"type":"function","file":"odb.h","line":185,"lineto":185,"args":[{"name":"id","type":"git_oid *","comment":"the resulting object-ID."},{"name":"obj","type":"git_rawobj *","comment":"the object whose hash is to be determined."}],"argline":"git_oid *id, git_rawobj *obj","sig":"git_oid *::git_rawobj *","return":{"type":"int","comment":"- GIT_SUCCESS if the object-ID was correctly determined. - GIT_ERROR if the given object is malformed."},"description":"Determine the object-ID (sha1 hash) of the given git_rawobj.","comments":"The input obj must be a valid loose object type and the data\npointer must not be NULL, unless the len field is also zero.\n","group":"obj"},"git_odb_exists":{"type":"function","file":"odb.h","line":196,"lineto":196,"args":[{"name":"db","type":"git_odb *","comment":"database to be searched for the given object."},{"name":"id","type":"const git_oid *","comment":"the object to search for."}],"argline":"git_odb *db, const git_oid *id","sig":"git_odb *::const git_oid *","return":{"type":"int","comment":"- true, if the object was found - false, otherwise"},"description":"Determine if the given object can be found in the object database.","comments":"","group":"odb"},"git_index_open_bare":{"type":"function","file":"index.h","line":61,"lineto":61,"args":[{"name":"index","type":"git_index **","comment":"the pointer for the new index"},{"name":"index_path","type":"const char *","comment":"the path to the index file in disk"}],"argline":"git_index **index, const char *index_path","sig":"git_index **::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new Git index object as a memory representation\nof the Git index file in 'index_path', without a repository\nto back it.","comments":"Since there is no ODB behind this index, any Index methods\nwhich rely on the ODB (e.g. index_add) will fail with the\nGIT_EBAREINDEX error code.\n","group":"index"},"git_index_open_inrepo":{"type":"function","file":"index.h","line":71,"lineto":71,"args":[{"name":"index","type":"git_index **","comment":"_path the path to the index file in disk"},{"name":"repo","type":"git_repository *","comment":"the git repo which owns the index"}],"argline":"git_index **index, git_repository *repo","sig":"git_index **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Open the Index inside the git repository pointed\nby 'repo'.","comments":"","group":"index"},"git_index_clear":{"type":"function","file":"index.h","line":80,"lineto":80,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void"},"description":"Clear the contents (all the entries) of an index object.\nThis clears the index object in memory; changes must be manually\nwritten to disk for them to take effect.","comments":"","group":"index"},"git_index_free":{"type":"function","file":"index.h","line":87,"lineto":87,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void"},"description":"Free an existing index object.","comments":"","group":"index"},"git_index_read":{"type":"function","file":"index.h","line":96,"lineto":96,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Update the contents of an existing index object in memory\nby reading from the hard disk.","comments":"","group":"index"},"git_index_write":{"type":"function","file":"index.h","line":105,"lineto":105,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Write an existing index object from memory back to disk\nusing an atomic file lock.","comments":"","group":"index"},"git_index_find":{"type":"function","file":"index.h","line":115,"lineto":115,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"int","comment":"an index >= 0 if found, -1 otherwise"},"description":"Find the first index of any entires which point to given\npath in the Git index.","comments":"","group":"index"},"git_index_add":{"type":"function","file":"index.h","line":125,"lineto":125,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"filename to add"},{"name":"stage","type":"int","comment":"stage for the entry"}],"argline":"git_index *index, const char *path, int stage","sig":"git_index *::const char *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Add or update an index entry from a file in disk.","comments":"","group":"index"},"git_index_remove":{"type":"function","file":"index.h","line":134,"lineto":134,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"position","type":"int","comment":"position of the entry to remove"}],"argline":"git_index *index, int position","sig":"git_index *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Remove an entry from the index","comments":"","group":"index"},"git_index_insert":{"type":"function","file":"index.h","line":147,"lineto":147,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"source_entry","type":"const git_index_entry *","comment":"new entry object"}],"argline":"git_index *index, const git_index_entry *source_entry","sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"description":"Insert an entry into the index.\nA full copy (including the 'path' string) of the given\n'source_entry' will be inserted on the index; if the index\nalready contains an entry for the same path, the entry\nwill be updated.","comments":"","group":"index"},"git_index_get":{"type":"function","file":"index.h","line":159,"lineto":159,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"n","type":"int","comment":"the position of the entry"}],"argline":"git_index *index, int n","sig":"git_index *::int","return":{"type":"git_index_entry *","comment":"a pointer to the entry; NULL if out of bounds"},"description":"Get a pointer to one of the entries in the index","comments":"This entry can be modified, and the changes will be written\nback to disk on the next write() call.\n","group":"index"},"git_index_entrycount":{"type":"function","file":"index.h","line":167,"lineto":167,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current entries"},"description":"Get the count of entries currently in the index","comments":"","group":"index"},"git_strerror":{"type":"function","file":"errors.h","line":29,"lineto":29,"args":[{"name":"num","type":"int","comment":"The error code to explain"}],"argline":"int num","sig":"int","return":{"type":"const char *","comment":"a string explaining the error code"},"description":"strerror() for the Git library\n@param num The error code to explain\n@return a string explaining the error code","comments":"","group":"errors"},"git_commit_lookup":{"type":"function","file":"commit.h","line":32,"lineto":32,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the looked up commit"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the commit."},{"name":"id","type":"const git_oid *","comment":"identity of the commit to locate. If the object is an annotated tag it will be peeled back to the commit."}],"argline":"git_commit **commit, git_repository *repo, const git_oid *id","sig":"git_commit **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Lookup a commit object from a repository.\nThe generated commit object is owned by the revision\nrepo and shall not be freed by the user.","comments":"","group":"commit"},"git_commit_new":{"type":"function","file":"commit.h","line":45,"lineto":45,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the new commit"},{"name":"repo","type":"git_repository *","comment":"The repository where the object will reside"}],"argline":"git_commit ** commit, git_repository *repo","sig":"git_commit **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new in-memory git_commit.","comments":"The commit object must be manually filled using\nsetter methods before it can be written to its\nrepository.\n","group":"commit"},"git_commit_id":{"type":"function","file":"commit.h","line":52,"lineto":52,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_oid *","comment":"object identity for the commit."},"description":"Get the id of a commit.\n@param commit a previously loaded commit.\n@return object identity for the commit.","comments":"","group":"commit"},"git_commit_message_short":{"type":"function","file":"commit.h","line":59,"lineto":59,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const char *","comment":"the short message of a commit"},"description":"Get the short (one line) message of a commit.\n@param commit a previously loaded commit.\n@return the short message of a commit","comments":"","group":"commit"},"git_commit_message":{"type":"function","file":"commit.h","line":66,"lineto":66,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const char *","comment":"the message of a commit"},"description":"Get the full message of a commit.\n@param commit a previously loaded commit.\n@return the message of a commit","comments":"","group":"commit"},"git_commit_time":{"type":"function","file":"commit.h","line":73,"lineto":73,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"time_t","comment":"the time of a commit"},"description":"Get the commit time (i.e. committer time) of a commit.\n@param commit a previously loaded commit.\n@return the time of a commit","comments":"","group":"commit"},"git_commit_committer":{"type":"function","file":"commit.h","line":80,"lineto":80,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_person *","comment":"the committer of a commit"},"description":"Get the committer of a commit.\n@param commit a previously loaded commit.\n@return the committer of a commit","comments":"","group":"commit"},"git_commit_author":{"type":"function","file":"commit.h","line":87,"lineto":87,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_person *","comment":"the author of a commit"},"description":"Get the author of a commit.\n@param commit a previously loaded commit.\n@return the author of a commit","comments":"","group":"commit"},"git_commit_tree":{"type":"function","file":"commit.h","line":94,"lineto":94,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_tree *","comment":"the tree of a commit"},"description":"Get the tree pointed to by a commit.\n@param commit a previously loaded commit.\n@return the tree of a commit","comments":"","group":"commit"},"git_commit_add_parent":{"type":"function","file":"commit.h","line":101,"lineto":101,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"new_parent","type":"git_commit *","comment":"the new commit which will be a parent"}],"argline":"git_commit *commit, git_commit *new_parent","sig":"git_commit *::git_commit *","return":{"type":"void"},"description":"Add a new parent commit to an existing commit\n@param commit the commit object\n@param new_parent the new commit which will be a parent","comments":"","group":"commit"},"git_commit_set_message":{"type":"function","file":"commit.h","line":108,"lineto":108,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"message","type":"const char *","comment":"the new message"}],"argline":"git_commit *commit, const char *message","sig":"git_commit *::const char *","return":{"type":"void"},"description":"Set the message of a commit\n@param commit the commit object\n@param message the new message","comments":"","group":"commit"},"git_commit_set_committer":{"type":"function","file":"commit.h","line":117,"lineto":117,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"name","type":"const char *","comment":"name of the new committer"},{"name":"email","type":"const char *","comment":"email of the new committer"},{"name":"time","type":"time_t","comment":"time when the committer committed the commit"}],"argline":"git_commit *commit, const char *name, const char *email, time_t time","sig":"git_commit *::const char *::const char *::time_t","return":{"type":"void"},"description":"Set the committer of a commit\n@param commit the commit object\n@param name name of the new committer\n@param email email of the new committer\n@param time time when the committer committed the commit","comments":"","group":"commit"},"git_commit_set_author":{"type":"function","file":"commit.h","line":126,"lineto":126,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"name","type":"const char *","comment":"name of the new author"},{"name":"email","type":"const char *","comment":"email of the new author"},{"name":"time","type":"time_t","comment":"time when the author created the commit"}],"argline":"git_commit *commit, const char *name, const char *email, time_t time","sig":"git_commit *::const char *::const char *::time_t","return":{"type":"void"},"description":"Set the author of a commit\n@param commit the commit object\n@param name name of the new author\n@param email email of the new author\n@param time time when the author created the commit","comments":"","group":"commit"},"git_commit_set_tree":{"type":"function","file":"commit.h","line":133,"lineto":133,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"tree","type":"git_tree *","comment":"the new tree"}],"argline":"git_commit *commit, git_tree *tree","sig":"git_commit *::git_tree *","return":{"type":"void"},"description":"Set the tree which is pointed to by a commit\n@param commit the commit object\n@param tree the new tree","comments":"","group":"commit"},"git_blob_lookup":{"type":"function","file":"blob.h","line":29,"lineto":29,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the looked up blob"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the blob."},{"name":"id","type":"const git_oid *","comment":"identity of the blob to locate."}],"argline":"git_blob **blob, git_repository *repo, const git_oid *id","sig":"git_blob **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Lookup a blob object from a repository.\nThe generated blob object is owned by the revision\nrepo and shall not be freed by the user.","comments":"","group":"blob"},"git_blob_new":{"type":"function","file":"blob.h","line":42,"lineto":42,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the new blob"},{"name":"repo","type":"git_repository *","comment":"The repository where the object will reside"}],"argline":"git_blob **blob, git_repository *repo","sig":"git_blob **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Create a new in-memory git_blob.","comments":"The blob object must be manually filled using\nthe 'set_rawcontent' methods before it can\nbe written back to disk.\n","group":"blob"},"git_blob_set_rawcontent_fromfile":{"type":"function","file":"blob.h","line":52,"lineto":52,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the new blob"},{"name":"filename","type":"const char *","comment":"name of the file to read"}],"argline":"git_blob *blob, const char *filename","sig":"git_blob *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Fill a blob with the contents inside\nthe pointed file.","comments":"","group":"blob"},"git_blob_set_rawcontent":{"type":"function","file":"blob.h","line":63,"lineto":63,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"},{"name":"buffer","type":"const void *","comment":"buffer with the contents for the blob"},{"name":"len","type":"size_t","comment":"size of the buffer"}],"argline":"git_blob *blob, const void *buffer, size_t len","sig":"git_blob *::const void *::size_t","return":{"type":"int","comment":"0 on success; error code otherwise"},"description":"Fill a blob with the contents inside\nthe pointed buffer","comments":"","group":"blob"},"git_blob_rawcontent":{"type":"function","file":"blob.h","line":76,"lineto":76,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"const char *","comment":"the pointer; NULL if the blob has no contents"},"description":"Get a read-only buffer with the raw content of a blob.","comments":"A pointer to the raw content of a blob is returned;\nthis pointer is owned internally by the object and shall\nnot be free'd. The pointer may be invalidated at a later\ntime (e.g. when changing the contents of the blob).\n","group":"blob"},"git_blob_rawsize":{"type":"function","file":"blob.h","line":84,"lineto":84,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"int","comment":"size on bytes"},"description":"Get the size in bytes of the contents of a blob","comments":"","group":"blob"},"git_blob_writefile":{"type":"function","file":"blob.h","line":95,"lineto":95,"args":[{"name":"written_id","type":"git_oid *","comment":"return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written"},{"name":"path","type":"const char *","comment":"file from which the blob will be created"}],"argline":"git_oid *written_id, git_repository *repo, const char *path","sig":"git_oid *::git_repository *::const char *","return":{"type":"int"},"description":"Read a file from the working folder of a repository\nand write it to the Object Database as a loose blob,\nif such doesn't exist yet.","comments":"","group":"blob"}},"globals":{"GIT_SORT_NONE":{"value":"(0)","file":"revwalk.h","line":23,"comments":"Sort the repository contents in no particular ordering;\nthis sorting is arbitrary, implementation-specific\nand subject to change at any time.\nThis is the default sorting for new walkers."},"GIT_SORT_TOPOLOGICAL":{"value":"(1 << 0)","file":"revwalk.h","line":30,"comments":"Sort the repository contents in topological order\n(parents before children); this sorting mode\ncan be combined with time sorting."},"GIT_SORT_TIME":{"value":"(1 << 1)","file":"revwalk.h","line":37,"comments":"Sort the repository contents by commit time;\nthis sorting mode can be combined with\ntopological sorting."},"GIT_SORT_REVERSE":{"value":"(1 << 2)","file":"revwalk.h","line":44,"comments":"Iterate through the repository contents in reverse\norder; this sorting mode can be combined with\nany of the above."},"GIT_OID_RAWSZ":{"value":"20","file":"oid.h","line":17,"comments":"Size (in bytes) of a raw/binary oid"},"GIT_OID_HEXSZ":{"value":"(GIT_OID_RAWSZ * 2)","file":"oid.h","line":20,"comments":"Size (in bytes) of a hex formatted oid"},"GIT_BEGIN_DECL":{"value":"","file":"common.h","line":12,"comments":"Start declarations in C mode"},"GIT_END_DECL":{"value":"","file":"common.h","line":14,"comments":"End declarations in C mode"},"GIT_EXTERN(type)":{"value":"extern __attribute__((visibility(\"default\"))) type","file":"common.h","line":18,"comments":"Declare a public function exported for application use."},"GIT_EXTERN_TLS(type)":{"value":"extern __attribute__((visibility(\"default\"))) GIT_TLS type","file":"common.h","line":27,"comments":"Declare a public TLS symbol exported for application use."},"GIT_INLINE(type)":{"value":"static __inline type","file":"common.h","line":37,"comments":"Declare a function as always inlined."},"GIT_FORMAT_PRINTF(a,b)":{"value":"__attribute__((format (printf, a, b)))","file":"common.h","line":44,"comments":"Declare a function's takes printf style arguments."},"GIT_SUCCESS":{"value":"0","file":"common.h","line":59,"comments":"Operation completed successfully."},"GIT_ERROR":{"value":"-1","file":"common.h","line":67,"comments":"Operation failed, with unspecified reason.\nThis value also serves as the base error code; all other\nerror codes are subtracted from it such that all errors\nare < 0, in typical POSIX C tradition."},"GIT_ENOTOID":{"value":"(GIT_ERROR - 1)","file":"common.h","line":70,"comments":"Input was not a properly formatted Git object id."},"GIT_ENOTFOUND":{"value":"(GIT_ERROR - 2)","file":"common.h","line":73,"comments":"Input does not exist in the scope searched."},"GIT_ENOMEM":{"value":"(GIT_ERROR - 3)","file":"common.h","line":76,"comments":"Not enough space available."},"GIT_EOSERR":{"value":"(GIT_ERROR - 4)","file":"common.h","line":79,"comments":"Consult the OS error information."},"GIT_EOBJTYPE":{"value":"(GIT_ERROR - 5)","file":"common.h","line":82,"comments":"The specified object is of invalid type"},"GIT_EOBJCORRUPTED":{"value":"(GIT_ERROR - 6)","file":"common.h","line":85,"comments":"The specified object has its data corrupted"},"GIT_ENOTAREPO":{"value":"(GIT_ERROR - 7)","file":"common.h","line":88,"comments":"The specified repository is invalid"},"GIT_EINVALIDTYPE":{"value":"(GIT_ERROR - 8)","file":"common.h","line":91,"comments":"The object type is invalid or doesn't match"},"GIT_EMISSINGOBJDATA":{"value":"(GIT_ERROR - 9)","file":"common.h","line":94,"comments":"The object cannot be written that because it's missing internal data"},"GIT_EPACKCORRUPTED":{"value":"(GIT_ERROR - 10)","file":"common.h","line":97,"comments":"The packfile for the ODB is corrupted"},"GIT_EFLOCKFAIL":{"value":"(GIT_ERROR - 11)","file":"common.h","line":100,"comments":"Failed to adquire or release a file lock"},"GIT_EZLIB":{"value":"(GIT_ERROR - 12)","file":"common.h","line":103,"comments":"The Z library failed to inflate/deflate an object's data"},"GIT_EBUSY":{"value":"(GIT_ERROR - 13)","file":"common.h","line":106,"comments":"The queried object is currently busy"},"GIT_EBAREINDEX":{"value":"(GIT_ERROR -14)","file":"common.h","line":109,"comments":"The index file is not backed up by an existing repository"}},"types":[["git_blob",{"type":"struct","value":"git_blob","file":"blob.h","line":17,"lineto":17,"block":"","tdef":"typedef","comments":"In-memory representation of a blob object.","used":{"returns":[],"needs":["git_blob_lookup","git_blob_new","git_blob_rawcontent","git_blob_rawsize","git_blob_set_rawcontent","git_blob_set_rawcontent_fromfile"]}}],["git_commit",{"type":"struct","value":"git_commit","file":"commit.h","line":19,"lineto":19,"block":"","tdef":"typedef","comments":"Parsed representation of a commit object.","used":{"returns":["git_revwalk_next"],"needs":["git_commit_add_parent","git_commit_author","git_commit_committer","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_new","git_commit_set_author","git_commit_set_committer","git_commit_set_message","git_commit_set_tree","git_commit_time","git_commit_tree","git_revwalk_hide","git_revwalk_push"]}}],["git_index",{"type":"struct","value":"git_index","file":"index.h","line":18,"lineto":18,"block":"","tdef":"typedef","comments":"Memory representation of an index file.","used":{"returns":["git_repository_index"],"needs":["git_index_add","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_insert","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write"]}}],["git_index_entry",{"type":"struct","value":"git_index_entry","file":"index.h","line":28,"lineto":45,"block":"git_index_time ctime\ngit_index_time mtime\nuint32_t dev\nuint32_t ino\nuint32_t mode\nuint32_t uid\nuint32_t gid\nuint32_t file_size\ngit_oid oid\nuint16_t flags\nuint16_t flags_extended\nchar *path","tdef":"typedef","comments":"Memory representation of a file entry in the index.","used":{"returns":["git_index_get"],"needs":["git_index_insert"]}}],["git_index_time",{"type":"struct","value":"git_index_time","file":"index.h","line":22,"lineto":25,"block":"uint32_t seconds\nuint32_t nanoseconds","tdef":"typedef","comments":"Time used in a git index entry","used":{"returns":[],"needs":[]}}],["git_object",{"type":"struct","value":"git_object","file":"common.h","line":121,"lineto":121,"block":"","tdef":"typedef","comments":"Representation of a generic object in a repository","used":{"returns":["git_tag_target"],"needs":["git_object_free","git_object_id","git_object_owner","git_object_type","git_object_write","git_repository_lookup","git_repository_newobject","git_tag_set_target","git_tree_entry_2object"]}}],["git_odb",{"type":"struct","value":"git_odb","file":"odb.h","line":18,"lineto":18,"block":"","tdef":"typedef","comments":"An open object database handle.","used":{"returns":["git_repository_database"],"needs":["git_odb__read_loose","git_odb__read_packed","git_odb_close","git_odb_exists","git_odb_open","git_odb_read","git_odb_read_header","git_odb_write"]}}],["git_oid",{"type":"struct","value":"git_oid","file":"oid.h","line":23,"lineto":26,"block":"unsigned char id[GIT_OID_RAWSZ]","tdef":"typedef","comments":"Unique identity of any object (commit, tree, blob, tag).","used":{"returns":["git_commit_id","git_object_id","git_tag_id","git_tree_entry_id","git_tree_id"],"needs":["git_blob_lookup","git_blob_writefile","git_commit_lookup","git_obj_hash","git_odb__read_loose","git_odb__read_packed","git_odb_exists","git_odb_read","git_odb_read_header","git_odb_write","git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_to_string","git_repository_lookup","git_tag_lookup","git_tree_add_entry","git_tree_entry_set_id","git_tree_lookup"]}}],["git_otype",{"type":"enum","file":"odb.h","line":37,"lineto":48,"block":"GIT_OBJ_ANY\nGIT_OBJ_BAD\nGIT_OBJ__EXT1\nGIT_OBJ_COMMIT\nGIT_OBJ_TREE\nGIT_OBJ_BLOB\nGIT_OBJ_TAG\nGIT_OBJ__EXT2\nGIT_OBJ_OFS_DELTA\nGIT_OBJ_REF_DELTA","tdef":"typedef","comments":"Basic type (loose or packed) of any Git object.","used":{"returns":[],"needs":["git_obj__loose_object_type","git_obj_type_to_string","git_repository_lookup","git_repository_newobject"]}}],["git_person",{"type":"struct","value":"git_person","file":"common.h","line":125,"lineto":129,"block":"","tdef":"typedef","comments":"Parsed representation of a person","used":{"returns":["git_commit_author","git_commit_committer","git_tag_tagger"],"needs":[]}}],["git_rawobj",{"type":"struct","value":"git_rawobj","file":"odb.h","line":51,"lineto":55,"block":"void *data\nsize_t len\ngit_otype type","tdef":"typedef","comments":"An object read from the database.","used":{"returns":[],"needs":["git_obj_close","git_obj_hash","git_odb__read_loose","git_odb__read_packed","git_odb_read","git_odb_read_header","git_odb_write"]}}],["git_repository",{"type":"struct","value":"git_repository","file":"common.h","line":118,"lineto":118,"block":"","tdef":"typedef","comments":"Representation of an existing git repository,\nincluding all its object contents","used":{"returns":["git_object_owner","git_revwalk_repository"],"needs":["git_blob_lookup","git_blob_new","git_blob_writefile","git_commit_lookup","git_commit_new","git_index_open_inrepo","git_repository_database","git_repository_free","git_repository_index","git_repository_lookup","git_repository_newobject","git_repository_open","git_revwalk_new","git_tag_lookup","git_tag_new","git_tree_lookup","git_tree_new"]}}],["git_tag",{"type":"struct","value":"git_tag","file":"tag.h","line":19,"lineto":19,"block":"","tdef":"typedef","comments":"Parsed representation of a tag object.","used":{"returns":[],"needs":["git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_new","git_tag_set_message","git_tag_set_name","git_tag_set_tagger","git_tag_set_target","git_tag_tagger","git_tag_target","git_tag_type"]}}],["git_tree",{"type":"struct","value":"git_tree","file":"tree.h","line":22,"lineto":22,"block":"","tdef":"typedef","comments":"Representation of a tree object.","used":{"returns":["git_commit_tree"],"needs":["git_commit_set_tree","git_tree_add_entry","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_new","git_tree_remove_entry_byindex","git_tree_remove_entry_byname"]}}],["git_tree_entry",{"type":"struct","value":"git_tree_entry","file":"tree.h","line":19,"lineto":19,"block":"","tdef":"typedef","comments":"Representation of each one of the entries in a tree object.","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname"],"needs":["git_tree_entry_2object","git_tree_entry_attributes","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name"]}}]],"prefix":"src/git","groups":[["blob",["git_blob_lookup","git_blob_new","git_blob_rawcontent","git_blob_rawsize","git_blob_set_rawcontent","git_blob_set_rawcontent_fromfile","git_blob_writefile"]],["commit",["git_commit_add_parent","git_commit_author","git_commit_committer","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_new","git_commit_set_author","git_commit_set_committer","git_commit_set_message","git_commit_set_tree","git_commit_time","git_commit_tree"]],["errors",["git_strerror"]],["index",["git_index_add","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_insert","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write"]],["obj",["git_obj__loose_object_type","git_obj_close","git_obj_hash","git_obj_string_to_type","git_obj_type_to_string"]],["object",["git_object_free","git_object_id","git_object_owner","git_object_type","git_object_write"]],["odb",["git_odb__read_loose","git_odb__read_packed","git_odb_close","git_odb_exists","git_odb_open","git_odb_read","git_odb_read_header","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_to_string"]],["repository",["git_repository_database","git_repository_free","git_repository_index","git_repository_lookup","git_repository_newobject","git_repository_open"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["tag",["git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_new","git_tag_set_message","git_tag_set_name","git_tag_set_tagger","git_tag_set_target","git_tag_tagger","git_tag_target","git_tag_type"]],["tree",["git_tree_add_entry","git_tree_entry_2object","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_new","git_tree_remove_entry_byindex","git_tree_remove_entry_byname"]],["zlib",["deflateBound"]]]}